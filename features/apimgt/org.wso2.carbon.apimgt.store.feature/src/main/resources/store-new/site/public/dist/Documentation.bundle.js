(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{1660:function(e,t,a){"use strict";a.r(t);var n=a(0),o=a.n(n),r=a(2),i=a.n(r),c=a(5),l=a(287),s=a(642),u=a(209),d=a(353),p=a(830),m=a(831),f=a(832),g=a(648),w=a(860),h=a(357),y=a(11),E=a(110),v=a(215),b=a(667),T=a(646),N=a(1577),I=a.n(N),L=a(787),R=a.n(L);function O(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var a=[],n=!0,o=!1,r=void 0;try{for(var i,c=e[Symbol.iterator]();!(n=(i=c.next()).done)&&(a.push(i.value),!t||a.length!==t);n=!0);}catch(e){o=!0,r=e}finally{try{n||null==c.return||c.return()}finally{if(o)throw r}}return a}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function S(e){var t=e.classes,a=e.doc,r=e.apiId,i=e.fullScreen,c=(e.intl,O(Object(n.useState)(""),2)),l=c[0],s=c[1],d=new v.a;Object(n.useEffect)(function(){"MARKDOWN"!==a.sourceType&&"INLINE"!==a.sourceType||p()},[e.doc]);var p=function(){d.getInlineContentOfDocument(r,a.documentId).then(function(e){s(e.text)}).catch(function(e){0})};return o.a.createElement(o.a.Fragment,null,!i&&o.a.createElement("div",{className:t.docBadge},a.type),o.a.createElement(u.a,{variant:"h5",component:"h3",className:t.docTitle},a.name),o.a.createElement(u.a,{variant:"caption"},a.summary),"MARKDOWN"===a.sourceType&&o.a.createElement(I.a,{source:l}),"INLINE"===a.sourceType&&o.a.createElement(R.a,{html:l}),"URL"===a.sourceType&&o.a.createElement("a",{className:t.displayURL,href:a.sourceUrl,target:"_blank"},a.sourceUrl,o.a.createElement(g.a,{className:t.displayURLLink},"open_in_new")),"FILE"===a.sourceType&&o.a.createElement(T.a,{variant:"contained",color:"default",className:t.button,onClick:function(){d.getFileForDocument(r,a.documentId).then(function(e){!function(e,t){var a="",n=e.headers["content-disposition"];if(n&&-1!==n.indexOf("attachment")){var o=/filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/.exec(n);null!=o&&o[1]&&(a=o[1].replace(/['"]/g,""))}var r=e.headers["content-type"],i=new Blob([e.data],{type:r});if(void 0!==window.navigator.msSaveBlob)window.navigator.msSaveBlob(i,a);else{var c=window.URL||window.webkitURL,l=c.createObjectURL(i);if(a){var s=document.createElement("a");void 0===s.download?window.location=l:(s.href=l,s.download=a,document.body.appendChild(s),s.click())}else window.location=l;setTimeout(function(){c.revokeObjectURL(l)},100)}}(e,document)}).catch(function(e){})}},o.a.createElement(y.a,{id:"Apis.Details.Documents.View.btn.download",defaultMessage:"Download"}),o.a.createElement(g.a,null,"arrow_downward")))}S.propTypes={classes:i.a.shape({}).isRequired,doc:i.a.shape({}).isRequired,apiId:i.a.shape({}).isRequired,intl:i.a.shape({formatMessage:i.a.func}).isRequired,fullScreen:i.a.shape({}).isRequired};var x=Object(y.e)(Object(c.a)(function(e){return{root:{paddingTop:2*e.spacing.unit,paddingBottom:2*e.spacing.unit},docTitle:{fontWeight:100,fontSize:50,color:e.palette.grey[500]},docBadge:{padding:e.spacing.unit,background:e.palette.primary.main,position:"absolute",top:0,marginTop:-22,color:e.palette.getContrastText(e.palette.primary.main)},button:{padding:2*e.spacing.unit,marginTop:2*e.spacing.unit},displayURL:{padding:2*e.spacing.unit,marginTop:2*e.spacing.unit,background:e.palette.grey[200],color:e.palette.getContrastText(e.palette.grey[200]),display:"flex"},displayURLLink:{paddingLeft:2*e.spacing.unit}}})(S));function M(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var a=[],n=!0,o=!1,r=void 0;try{for(var i,c=e[Symbol.iterator]();!(n=(i=c.next()).done)&&(a.push(i.value),!t||a.length!==t);n=!0);}catch(e){o=!0,r=e}finally{try{n||null==c.return||c.return()}finally{if(o)throw r}}return a}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function k(e){var t=e.classes,a=M(Object(n.useState)(0),2),r=a[0],i=a[1],c=M(Object(n.useState)(0),2),T=c[0],N=c[1],I=M(Object(n.useState)(null),2),L=I[0],R=I[1],O=M(Object(n.useState)(null),2),S=O[0],k=O[1],j=M(Object(n.useState)(!1),2),A=j[0],D=j[1],C=function(e,t,a,n){var o,r,c,l,s,u,d;i(t),N(a),k(n),o=0,r=1500,c="easeInOutQuint",l=window.scrollY||document.documentElement.scrollTop,o=o||0,r=r||2e3,c=c||"easeOutSine",s=0,u=Math.max(.1,Math.min(Math.abs(l-o)/r,.8)),d={easeOutSine:function(e){return Math.sin(e*(Math.PI/2))},easeInOutSine:function(e){return-.5*(Math.cos(Math.PI*e)-1)},easeInOutQuint:function(e){return(e/=.5)<1?.5*Math.pow(e,5):.5*(Math.pow(e-2,5)+2)}},function e(){var t=(s+=1/60)/u,a=d[c](t);t<1?(requestAnimFrame(e),window.scrollTo(0,l+(o-l)*a)):(console.log("scroll done"),window.scrollTo(0,o))}()},q=e.match.params.api_uuid;Object(n.useEffect)(function(){(new v.a).getDocumentsByAPIId(q).then(function(e){var t=[];if(e.obj.list.length>0)for(var a=e.obj.list,n=0;n<a.length;n++){for(var o=a[n].type,r=!1,i=0;i<t.length;i++)o===t[i].docType&&(t[i].docs.push(a[n]),r=!0);r||t.push({docType:o,docs:[a[n]]})}R(t),t.length>0&&C(0,0,0,t[0].docs[0])}).catch(function(e){404===e.status&&E.a.error("Error occured")})},[]);var F=function(){D(!A)};return o.a.createElement("div",{className:t.contentWrapper},o.a.createElement(u.a,{variant:"h4"},o.a.createElement(y.a,{id:"Apis.Details.Documents.Documentation.title",defaultMessage:"Documentation"})),L&&o.a.createElement(s.a,{container:!0,spacing:3,className:t.docContent},o.a.createElement(s.a,{item:!0,xs:12,sm:3},o.a.createElement(l.a,{className:t.paperMenu},o.a.createElement(d.a,{component:"nav",className:t.listRoot},L.map(function(e,a){return o.a.createElement(o.a.Fragment,null,o.a.createElement(p.a,{className:t.parentListItem},o.a.createElement(m.a,null,o.a.createElement(b.a,{strokeColor:"#444",width:24,height:24,icon:"docs"})),o.a.createElement(f.a,{primary:e.docType})),e.docs.length>0&&o.a.createElement(d.a,{component:"div",className:t.childList},e.docs.map(function(e,n){return o.a.createElement(p.a,{button:!0,className:t.nested,classes:{selected:t.selected},selected:r===a&&T===n,onClick:function(t){return C(0,a,n,e)}},o.a.createElement(m.a,null,"MARKDOWN"===e.sourceType&&o.a.createElement(g.a,null,"code"),"INLINE"===e.sourceType&&o.a.createElement(g.a,null,"description"),"URL"===e.sourceType&&o.a.createElement(g.a,null,"open_in_new"),"FILE"===e.sourceType&&o.a.createElement(g.a,null,"arrow_downward")),o.a.createElement(f.a,{inset:!0,primary:e.name,secondary:(i=e.summary,c=i,i.length>100&&i.length>105&&(c=i.substring(1,100)+" ... "),c)}));var i,c})))})))),o.a.createElement(s.a,{item:!0,xs:12,sm:9},S&&o.a.createElement(o.a.Fragment,null,o.a.createElement(l.a,{className:t.paper},("MARKDOWN"===S.sourceType||"INLINE"===S.sourceType)&&o.a.createElement(g.a,{className:t.fullView,onClick:F},"launch"),o.a.createElement(x,{doc:S,apiId:q,fullScreen:A})),o.a.createElement(w.a,{fullScreen:!0,open:A,onClose:F},o.a.createElement(l.a,{square:!0,className:t.popupHeader},o.a.createElement(h.a,{color:"inherit",onClick:F,"aria-label":"Close"},o.a.createElement(g.a,null,"close")),o.a.createElement(u.a,{variant:"h4",className:t.docName},S.name)),o.a.createElement("div",{className:t.viewWrapper},o.a.createElement(x,{doc:S,apiId:q,fullScreen:A})))))))}window.requestAnimFrame=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||function(e){window.setTimeout(e,1e3/60)},k.propTypes={classes:i.a.object.isRequired};t.default=Object(c.a)(function(e){return{paper:{padding:2*e.spacing.unit,color:e.palette.text.secondary,minHeight:400,position:"relative"},paperMenu:{color:e.palette.text.secondary,minHeight:400+4*e.spacing.unit},contentWrapper:{paddingLeft:3*e.spacing.unit,paddingRight:3*e.spacing.unit,paddingTop:3*e.spacing.unit},docContent:{paddingTop:e.spacing.unit},parentListItem:{borderTop:"solid 1px #ccc",borderBottom:"solid 1px #ccc",color:e.palette.grey[100],background:e.palette.grey[100],cursor:"default"},listRoot:{paddingTop:0},nested:{paddingLeft:3*e.spacing.unit,paddingTop:3,paddingBottom:3},fullView:{cursor:"pointer",position:"absolute",right:5,top:5},childList:{paddingTop:0,marginTop:0,paddingBottom:0},popupHeader:{display:"flex",flexDirection:"row",alignItems:"center",position:"fixed",width:"100%"},viewWrapper:{padding:2*e.spacing.unit,marginTop:50}}})(k)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,