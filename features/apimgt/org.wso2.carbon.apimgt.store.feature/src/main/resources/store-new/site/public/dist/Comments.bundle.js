(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{1193:function(e,t,n){"use strict";var a=n(51);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=a(n(88)),i=a(n(87)),r=a(n(0)),l=(a(n(2)),a(n(4))),s=a(n(784)),c=(a(n(1576)),[0,1,2,3,4,5,6,7,8,9,10]),m=["auto",!0,1,2,3,4,5,6,7,8,9,10,11,12];function u(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=parseFloat(e);return"".concat(n/t).concat(String(e).replace(String(n),"")||"px")}var d=function(e){return(0,i.default)({root:{},container:{boxSizing:"border-box",display:"flex",flexWrap:"wrap",width:"100%"},item:{boxSizing:"border-box",margin:"0"},zeroMinWidth:{minWidth:0},"direction-xs-column":{flexDirection:"column"},"direction-xs-column-reverse":{flexDirection:"column-reverse"},"direction-xs-row-reverse":{flexDirection:"row-reverse"},"wrap-xs-nowrap":{flexWrap:"nowrap"},"wrap-xs-wrap-reverse":{flexWrap:"wrap-reverse"},"align-items-xs-center":{alignItems:"center"},"align-items-xs-flex-start":{alignItems:"flex-start"},"align-items-xs-flex-end":{alignItems:"flex-end"},"align-items-xs-baseline":{alignItems:"baseline"},"align-content-xs-center":{alignContent:"center"},"align-content-xs-flex-start":{alignContent:"flex-start"},"align-content-xs-flex-end":{alignContent:"flex-end"},"align-content-xs-space-between":{alignContent:"space-between"},"align-content-xs-space-around":{alignContent:"space-around"},"justify-xs-center":{justifyContent:"center"},"justify-xs-flex-end":{justifyContent:"flex-end"},"justify-xs-space-between":{justifyContent:"space-between"},"justify-xs-space-around":{justifyContent:"space-around"},"justify-xs-space-evenly":{justifyContent:"space-evenly"}},function(e,t){var n={};return c.forEach(function(a){var o=e.spacing(a);0!==o&&(n["spacing-".concat(t,"-").concat(a)]={margin:"-".concat(u(o,2)),width:"calc(100% + ".concat(u(o),")"),"& > $item":{padding:u(o,2)}})}),n}(e,"xs"),{},e.breakpoints.keys.reduce(function(t,n){return function(e,t,n){var a={};m.forEach(function(e){var t="grid-".concat(n,"-").concat(e);if(!0!==e)if("auto"!==e){var o="".concat(Math.round(e/12*1e8)/1e6,"%");a[t]={flexBasis:o,flexGrow:0,maxWidth:o}}else a[t]={flexBasis:"auto",flexGrow:0,maxWidth:"none"};else a[t]={flexBasis:0,flexGrow:1,maxWidth:"100%"}}),"xs"===n?(0,i.default)(e,a):e[t.breakpoints.up(n)]=a}(t,e,n),t},{}))};t.styles=d;var p=r.default.forwardRef(function(e,t){var n=e.alignContent,a=void 0===n?"stretch":n,s=e.alignItems,c=void 0===s?"stretch":s,m=e.classes,u=e.className,d=e.component,p=void 0===d?"div":d,f=e.container,h=void 0!==f&&f,g=e.direction,y=void 0===g?"row":g,C=e.item,b=void 0!==C&&C,v=e.justify,w=void 0===v?"flex-start":v,x=e.lg,k=void 0!==x&&x,E=e.md,O=void 0!==E&&E,S=e.sm,T=void 0!==S&&S,j=e.spacing,D=void 0===j?0:j,I=e.wrap,R=void 0===I?"wrap":I,_=e.xl,A=void 0!==_&&_,M=e.xs,P=void 0!==M&&M,L=e.zeroMinWidth,W=void 0!==L&&L,q=(0,o.default)(e,["alignContent","alignItems","classes","className","component","container","direction","item","justify","lg","md","sm","spacing","wrap","xl","xs","zeroMinWidth"]),N=(0,l.default)(m.root,u,h&&[m.container,0!==D&&m["spacing-xs-".concat(String(D))]],b&&m.item,W&&m.zeroMinWidth,"row"!==y&&m["direction-xs-".concat(String(y))],"wrap"!==R&&m["wrap-xs-".concat(String(R))],"stretch"!==c&&m["align-items-xs-".concat(String(c))],"stretch"!==a&&m["align-content-xs-".concat(String(a))],"flex-start"!==w&&m["justify-xs-".concat(String(w))],!1!==P&&m["grid-xs-".concat(String(P))],!1!==T&&m["grid-sm-".concat(String(T))],!1!==O&&m["grid-md-".concat(String(O))],!1!==k&&m["grid-lg-".concat(String(k))],!1!==A&&m["grid-xl-".concat(String(A))]);return r.default.createElement(p,(0,i.default)({className:N,ref:t},q))});var f=(0,s.default)(d,{name:"MuiGrid"})(p);t.default=f},1202:function(e,t,n){"use strict";n.r(t);var a=n(0),o=n.n(a),i=n(2),r=n.n(i),l=n(5),s=n(648),c=n(209),m=n(1193),u=n.n(m),d=n(11),p=(n(113),n(12)),f=n(642),h=n(110),g=n(860),y=n(864),C=n(862),b=n(863),v=n(861),w=n(646);function x(e){return(x="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function k(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function E(e,t){return!t||"object"!==x(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function O(e){return(O=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function S(e,t){return(S=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var T=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),E(this,O(t).apply(this,arguments))}var n,a,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&S(e,t)}(t,o.a.Component),n=t,(a=[{key:"handleRequestClose",value:function(e){var n=this.props.callback;e===t.Action.OK?n(!0):n(!1)}},{key:"render",value:function(){var e=this,n=this.props,a=n.title,i=n.message,r=n.labelCancel,l=n.labelOk,s=n.open;return o.a.createElement(g.a,{open:s,onClose:this.handleRequestClose},o.a.createElement(y.a,null,a||o.a.createElement(d.a,{id:"Shared.ConfirmDialog.please.confirm",defaultMessage:"Please Confirm"})),o.a.createElement(C.a,null,o.a.createElement(b.a,null,i||o.a.createElement(d.a,{id:"Shared.ConfirmDialog.please.confirm.sure",defaultMessage:"Are you sure?"}))),o.a.createElement(v.a,null,o.a.createElement(w.a,{onClick:function(){return e.handleRequestClose(t.Action.CANCEL)},color:"primary"},r||o.a.createElement(d.a,{id:"Shared.ConfirmDialog.cancel",defaultMessage:"Cancel"})),o.a.createElement(w.a,{onClick:function(){return e.handleRequestClose(t.Action.OK)},color:"primary"},l||o.a.createElement(d.a,{id:"Shared.ConfirmDialog.ok",defaultMessage:"OK"}))))}}])&&k(n.prototype,a),i&&k(n,i),t}();T.propTypes={title:r.a.string.isRequired,message:r.a.string.isRequired,labelCancel:r.a.string.isRequired,labelOk:r.a.string.isRequired,callback:r.a.func.isRequired,open:r.a.bool.isRequired},T.Action={OK:"ok",CANCEL:"cancel"};var j=T,D=n(645),I=n(215);function R(e){return(R="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function A(e){return(A=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function M(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function P(e,t){return(P=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var L=function(e){function t(e){var n,a,o;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),a=this,(n=!(o=A(t).call(this,e))||"object"!==R(o)&&"function"!=typeof o?M(a):o).state={content:"",currentLength:0},n.inputChange=n.inputChange.bind(M(n)),n.handleClickAddComment=n.handleClickAddComment.bind(M(n)),n.handleClickCancel=n.handleClickCancel.bind(M(n)),n}var n,a,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&P(e,t)}(t,o.a.Component),n=t,(a=[{key:"inputChange",value:function(e){var t=e.target;this.setState({content:t.value,currentLength:t.value.length})}},{key:"handleClickCancel",value:function(){this.setState({content:""})}},{key:"handleClickAddComment",value:function(){var e=this,t=this.props,n=t.apiId,a=t.allComments,o=t.commentsUpdate,i=t.intl,r=this.state.content,l=new I.a,s={content:r.trim()};s.content.replace(/\s/g,"").length?l.addComment(n,s).then(function(t){e.setState({content:""});var n=t.body;a.push(n),o(a)}).catch(function(e){console.error(e),e.response?h.a.error(e.response.body.message):h.a.error(i.formatMessage({defaultMessage:"Something went wrong while adding the comment",id:"Apis.Details.Comments.CommentAdd.something.went.wrong"}))}):h.a.error(i.formatMessage({defaultMessage:"You cannot enter a blank comment",id:"Apis.Details.Comments.CommentAdd.error.blank.comment"})),this.setState({currentLength:0})}},{key:"render",value:function(){var e=this,t=this.props,n=t.classes,a=t.cancelButton,i=t.theme,r=t.intl,l=this.state,s=l.content,m=l.currentLength;return o.a.createElement(f.a,{container:!0,spacing:3,className:n.contentWrapper},o.a.createElement(f.a,{item:!0,xs:!0,zeroMinWidth:!0},o.a.createElement(D.a,{id:"standard-multiline-flexible",autoFocus:!0,multiline:!0,className:n.textField,margin:"normal",placeholder:r.formatMessage({defaultMessage:"Write a comment",id:"Apis.Details.Comments.CommentAdd.write.comment.help"}),inputProps:{maxLength:i.custom.maxCommentLength},value:s,onChange:this.inputChange}),o.a.createElement(c.a,{className:n.content,align:"right"},m+"/"+i.custom.maxCommentLength),o.a.createElement(f.a,{container:!0,spacing:1},o.a.createElement(f.a,{item:!0},o.a.createElement(w.a,{variant:"contained",color:"primary",onClick:function(){return e.handleClickAddComment()}},o.a.createElement(d.a,{id:"Apis.Details.Comments.CommentAdd.btn.add.comment",defaultMessage:"Add Comment"}))),a&&o.a.createElement(f.a,{item:!0},o.a.createElement(w.a,{onClick:function(){return e.handleClickCancel()},className:n.button},o.a.createElement(d.a,{id:"Apis.Details.Comments.CommentAdd.btn.cancel",defaultMessage:"Cancel"}))))))}}])&&_(n.prototype,a),i&&_(n,i),t}();L.defaultProps={parentCommentId:null,toggleShowReply:null,commentsUpdate:null},L.propTypes={classes:r.a.instanceOf(Object).isRequired,cancelButton:r.a.bool.isRequired,apiId:r.a.string.isRequired,parentCommentId:r.a.string,toggleShowReply:r.a.func,commentsUpdate:r.a.func,allComments:r.a.instanceOf(Array).isRequired,intl:r.a.shape({formatMessage:r.a.func}).isRequired};var W=Object(d.e)(Object(l.a)(function(e){return{commentIcon:{color:e.palette.getContrastText(e.palette.background.default)},content:{color:e.palette.getContrastText(e.palette.background.default)},contentWrapper:{maxWidth:e.custom.contentAreaWidth,paddingLeft:2*e.spacing.unit,paddingTop:e.spacing.unig,marginTop:2*e.spacing.unit},textField:{marginTop:0,width:"88%"}}},{withTheme:!0})(L)),q=n(348),N=n(829),U=n(360);function B(e){return(B="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function z(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function F(e){return(F=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function G(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function K(e,t){return(K=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Y=function(e){function t(e){var n,a,o;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),a=this,(n=!(o=F(t).call(this,e))||"object"!==B(o)&&"function"!=typeof o?G(a):o).state={commentText:"",category:"",currentLength:0},n.inputChange=n.inputChange.bind(G(n)),n.handleCategoryChange=n.handleCategoryChange.bind(G(n)),n.handleClickUpdateComment=n.handleClickUpdateComment.bind(G(n)),n.handleClickCancel=n.handleClickCancel.bind(G(n)),n.filterCommentToUpdate=n.filterCommentToUpdate.bind(G(n)),n.filterCommentToUpdateReply=n.filterCommentToUpdateReply.bind(G(n)),n}var n,a,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&K(e,t)}(t,o.a.Component),n=t,(a=[{key:"componentDidMount",value:function(){var e=this.props.comment;this.setState({commentText:e.commentText,category:e.category,currentLength:e.commentText.length})}},{key:"inputChange",value:function(e){var t=e.target;this.setState({commentText:t.value,currentLength:t.value.length})}},{key:"handleClickCancel",value:function(){var e=this.props,t=e.toggleShowEdit,n=e.commentsUpdate,a=e.allComments;t(),n(a)}},{key:"handleCategoryChange",value:function(e){this.setState({category:e.target.value})}},{key:"filterCommentToUpdate",value:function(e){var t=this.props.comment;return e.commentId===t.commentId}},{key:"filterCommentToUpdateReply",value:function(e){var t=this.props.comment;return e.commentId===t.parentCommentId}},{key:"handleClickUpdateComment",value:function(){var e=this,t=this.props,n=t.apiId,a=t.comment,o=t.allComments,i=t.toggleShowEdit,r=t.commentsUpdate,l=t.intl,s=this.state,c=s.category,m=s.commentText,u=new I.a,d=a;d.commentText=m.trim(),d.category=c,a.commentText.replace(/\s/g,"").length?u.updateComment(n,d.commentId,d).then(function(t){var n=t.body;if(void 0===d.parentCommentId){var a=o.findIndex(e.filterCommentToUpdate);o[a].category=n.category,o[a].commentText=n.commentText}else{var l=o.findIndex(e.filterCommentToUpdateReply),s=o[l].replies.findIndex(e.filterCommentToUpdate);o[l].replies[s]=n}i(),r(o)}).catch(function(e){console.error(e),e.response?h.a.error(e.response.body.message):h.a.error(l.formatMessage({defaultMessage:"Something went wrong while adding the comment",id:"Apis.Details.Comments.CommentEdit.something.went.wrong"}))}):h.a.error(l.formatMessage({defaultMessage:"You cannot enter a blank comment",id:"Apis.Details.Comments.CommentEdit.blank.comment.error"}))}},{key:"render",value:function(){var e=this,t=this.props,n=t.classes,a=t.theme,i=t.intl,r=this.state,l=r.category,s=r.commentText,m=r.currentLength;return o.a.createElement("div",null,o.a.createElement(q.a,{className:n.category},o.a.createElement(U.a,{value:l,onChange:this.handleCategoryChange},o.a.createElement(N.a,{value:"General"},o.a.createElement(d.a,{id:"Apis.Details.Comments.CommentEdit.general",defaultMessage:"General"})),o.a.createElement(N.a,{value:"Feature Request"},o.a.createElement(d.a,{id:"Apis.Details.Comments.CommentEdit.feature.request",defaultMessage:"Feature Request"})),o.a.createElement(N.a,{value:"Bug Report"},o.a.createElement(d.a,{id:"Apis.Details.Comments.CommentEdit.bug.report",defaultMessage:"Bug Report"})))),o.a.createElement(D.a,{id:"multiline-static",autoFocus:!0,multiline:!0,className:n.textField,margin:"normal",placeholder:i.formatMessage({defaultMessage:"Write a comment",id:"Apis.Details.Comments.CommentEdit.write.a.comment"}),inputProps:{maxLength:a.custom.maxCommentLength},value:s,onChange:this.inputChange}),o.a.createElement(c.a,{className:n.commentText,align:"right"},m+"/"+a.custom.maxCommentLength),o.a.createElement(f.a,{container:!0,spacing:1},o.a.createElement(f.a,{item:!0},o.a.createElement(w.a,{variant:"contained",color:"primary",onClick:function(){return e.handleClickUpdateComment()}},o.a.createElement(d.a,{id:"Apis.Details.Comments.CommentEdit.btn.save",defaultMessage:"Save"}))),o.a.createElement(f.a,{item:!0},o.a.createElement(w.a,{onClick:function(){return e.handleClickCancel()},className:n.button},o.a.createElement(d.a,{id:"Apis.Details.Comments.CommentEdit.btn.cancel",defaultMessage:"Cancel"})))))}}])&&z(n.prototype,a),i&&z(n,i),t}();Y.propTypes={classes:r.a.instanceOf(Object).isRequired,apiId:r.a.string.isRequired,allComments:r.a.instanceOf(Array).isRequired,commentsUpdate:r.a.func.isRequired,toggleShowEdit:r.a.func.isRequired,comment:r.a.instanceOf(Object).isRequired,intl:r.a.shape({formatMessage:r.a.func}).isRequired};var J=Object(d.e)(Object(l.a)(function(e){return{textField:{marginTop:0,width:"87.5%"},contentWrapper:{maxWidth:e.custom.contentAreaWidth,paddingLeft:2*e.spacing.unit,paddingTop:e.spacing.unig,marginTop:2*e.spacing.unit},category:{width:"12%",marginRight:"0.5%"}}},{withTheme:!0})(Y)),$=n(714);function H(e){return(H="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Q(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function V(e){return(V=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function X(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Z(e,t){return(Z=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var ee=function(e){function t(e){var n,a,o;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),a=this,(n=!(o=V(t).call(this,e))||"object"!==H(o)&&"function"!=typeof o?X(a):o).state={},n.showAddComment=n.showAddComment.bind(X(n)),n.showEditComment=n.showEditComment.bind(X(n)),n.handleClickOpen=n.handleClickOpen.bind(X(n)),n}var n,a,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Z(e,t)}(t,o.a.Component),n=t,(a=[{key:"showAddComment",value:function(e){var t=this.props,n=t.editIndex,a=t.showAddComment;-1===n&&a(e)}},{key:"showEditComment",value:function(e){var t=this.props,n=t.editIndex,a=t.showEditComment;-1===n&&a(e)}},{key:"handleClickOpen",value:function(e){var t=this.props,n=t.editIndex,a=t.handleClickOpen;-1===n&&a(e)}},{key:"displayDate",value:function(e){var t=new Date(e);return t.toLocaleDateString(void 0,{day:"numeric",month:"short",year:"numeric"})+" "+t.toLocaleTimeString(void 0,{hour:"2-digit",minute:"2-digit"})}},{key:"render",value:function(){var e=this,t=this.props,n=t.classes,a=t.comment,i=t.editIndex,r=t.index,l=t.theme;return o.a.createElement(u.a,{container:!0,spacing:1,className:n.verticalSpace,key:a.commentId},(a.createdBy===p.a.getUser().name||p.a.getUser().name===l.custom.adminRole)&&[o.a.createElement(u.a,{item:!0,key:"key-delete"},o.a.createElement(c.a,{component:"a",className:-1===i?n.link:n.disable,onClick:function(){return e.handleClickOpen(a)}},o.a.createElement(d.a,{id:"Apis.Details.Comments.CommentOptions.delete",defaultMessage:"Delete"}))),o.a.createElement(u.a,{item:!0,key:"key-delete-vertical-divider"},o.a.createElement($.a,{height:15}))],a.createdBy===p.a.getUser().name&&"APIStore"===a.entryPoint&&[o.a.createElement(u.a,{item:!0,key:"key-edit"},o.a.createElement(c.a,{component:"a",className:-1===i?n.link:n.disable,onClick:function(){return e.showEditComment(r)}},o.a.createElement(d.a,{id:"Apis.Details.Comments.CommentOptions.edit",defaultMessage:"Edit"}))),o.a.createElement(u.a,{item:!0,key:"key-edit-verical-divider"},o.a.createElement($.a,{height:15}))],o.a.createElement(u.a,{item:!0,className:n.time},o.a.createElement(c.a,{component:"a",variant:"caption"},this.displayDate(a.createdTime))),i===r?null:[o.a.createElement(u.a,{item:!0,key:"key-category-vertical-divider"},o.a.createElement($.a,{height:15})),o.a.createElement(u.a,{item:!0,className:n.time,key:"key-category"},o.a.createElement(c.a,{component:"a",variant:"caption"},a.category))])}}])&&Q(n.prototype,a),i&&Q(n,i),t}();ee.defaultProps={showAddComment:null},ee.propTypes={classes:r.a.instanceOf(Object).isRequired,editIndex:r.a.number.isRequired,index:r.a.number.isRequired,comment:r.a.instanceOf(Object).isRequired,handleClickOpen:r.a.func.isRequired,showEditComment:r.a.func.isRequired,showAddComment:r.a.func};var te=Object(l.a)(function(e){return{link:{color:e.palette.getContrastText(e.palette.background.default),cursor:"pointer"},time:{color:e.palette.getContrastText(e.palette.background.default),marginTop:.3*e.spacing.unit},verticalSpace:{marginTop:.2*e.spacing.unit},disable:{color:e.custom.disableColor},commentIcon:{color:e.palette.getContrastText(e.palette.background.default)},commentText:{color:e.palette.getContrastText(e.palette.background.default),marginTop:e.spacing.unig,width:"100%",whiteSpace:"pre-wrap",overflowWrap:"break-word"},root:{marginTop:2.5*e.spacing.unit},contentWrapper:{maxWidth:e.custom.contentAreaWidth,paddingLeft:2*e.spacing.unit,paddingTop:e.spacing.unig}}},{withTheme:!0})(ee);function ne(e){return(ne="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ae(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function oe(e){return(oe=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ie(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function re(e,t){return(re=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var le=function(e){function t(e){var n,a,o;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),a=this,(n=!(o=oe(t).call(this,e))||"object"!==ne(o)&&"function"!=typeof o?ie(a):o).state={openDialog:!1,editIndex:-1,deleteComment:null},n.handleClickDeleteComment=n.handleClickDeleteComment.bind(ie(n)),n.handleShowEdit=n.handleShowEdit.bind(ie(n)),n.handleClickOpen=n.handleClickOpen.bind(ie(n)),n.showEditComment=n.showEditComment.bind(ie(n)),n.handleConfirmDialog=n.handleConfirmDialog.bind(ie(n)),n.handleClose=n.handleClose.bind(ie(n)),n.filterRemainingComments=n.filterRemainingComments.bind(ie(n)),n.filterCommentToDelete=n.filterCommentToDelete.bind(ie(n)),n}var n,a,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&re(e,t)}(t,o.a.Component),n=t,(a=[{key:"filterRemainingComments",value:function(e){var t=this.state.deleteComment;return e.commentId!==t.commentId}},{key:"filterCommentToDelete",value:function(e){var t=this.state.deleteComment;return e.commentId===t.parentCommentId}},{key:"showEditComment",value:function(e){-1===this.state.editIndex&&this.setState({editIndex:e})}},{key:"handleShowEdit",value:function(){this.setState({editIndex:-1})}},{key:"handleClickOpen",value:function(e){-1===this.state.editIndex&&this.setState({deleteComment:e,openDialog:!0})}},{key:"handleClose",value:function(){this.setState({openDialog:!1})}},{key:"handleConfirmDialog",value:function(e){e?this.handleClickDeleteComment():this.handleClose()}},{key:"handleClickDeleteComment",value:function(){var e=this,t=new I.a,n=this.state.deleteComment,a=this.props,o=a.apiId,i=a.allComments,r=a.commentsUpdate,l=a.intl,s=n.commentId,c=n.parentCommentId;this.handleClose(),t.deleteComment(o,s).then(function(t){if(void 0===c){var n=i.filter(e.filterRemainingComments);r(n)}else{var a=i.findIndex(e.filterCommentToDelete),o=i[a].replies.filter(e.filterRemainingComments);i[a].replies=o,r(i)}}).catch(function(e){console.error(e),e.response?h.a.error(e.response.body.message):h.a.error(l.formatMessage({defaultMessage:"Something went wrong while deleting comment",id:"Apis.Details.Comments.CommentReply.something.went.wrong"})+" - "+s)})}},{key:"render",value:function(){var e=this,t=this.props,n=t.classes,a=t.comments,i=t.apiId,r=t.allComments,l=t.commentsUpdate,m=t.intl,u=this.state,d=u.editIndex,p=u.openDialog;return[a&&a.map(function(t,a){return o.a.createElement("div",{key:t.commentId+"-"+a,className:n.contentWrapper},o.a.createElement(f.a,{container:!0,spacing:1,className:n.root},o.a.createElement(f.a,{item:!0},o.a.createElement(s.a,{className:n.commentIcon},"account_box")),o.a.createElement(f.a,{item:!0,xs:!0,zeroMinWidth:!0},o.a.createElement(c.a,{noWrap:!0,className:n.commentText,variant:"body1"},t.createdBy),a!==d&&o.a.createElement(c.a,{className:n.commentText},t.commentText),d===a&&null,a===d&&o.a.createElement(J,{apiId:i,allComments:r,commentsUpdate:l,comment:t,toggleShowEdit:e.handleShowEdit}),o.a.createElement(te,{classes:n,comment:t,editIndex:d,index:a,showAddComment:e.showAddComment,handleClickOpen:e.handleClickOpen,showEditComment:e.showEditComment}))))}),o.a.createElement(j,{key:"key-dialog",labelCancel:"Cancel",title:"Confirm Delete",message:m.formatMessage({defaultMessage:"Are you sure you want to delete this comment?",id:"Apis.Details.Comments.CommentReply.are.you.sure"}),labelOk:"Yes",callback:this.handleConfirmDialog,open:p})]}}])&&ae(n.prototype,a),i&&ae(n,i),t}();le.defaultProps={api:null},le.propTypes={classes:r.a.instanceOf(Object).isRequired,apiId:r.a.string.isRequired,allComments:r.a.instanceOf(Array).isRequired,commentsUpdate:r.a.func.isRequired,comments:r.a.instanceOf(Array).isRequired,intl:r.a.shape({formatMessage:r.a.func}).isRequired};Object(d.e)(Object(l.a)(function(e){return{link:{color:e.palette.getContrastText(e.palette.background.default),cursor:"pointer"},commentIcon:{color:e.palette.getContrastText(e.palette.background.default)},commentText:{color:e.palette.getContrastText(e.palette.background.default),marginTop:e.spacing.unig,width:"100%",whiteSpace:"pre-wrap",overflowWrap:"break-word"},root:{marginTop:2.5*e.spacing.unit},contentWrapper:{maxWidth:e.custom.contentAreaWidth,paddingLeft:2*e.spacing.unit,paddingTop:e.spacing.unig}}})(le));function se(e){return(se="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ce(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function me(e){return(me=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ue(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function de(e,t){return(de=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var pe=function(e){function t(e){var n,a,o;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),a=this,(n=!(o=me(t).call(this,e))||"object"!==se(o)&&"function"!=typeof o?ue(a):o).state={openDialog:!1,replyIndex:-1,editIndex:-1,deleteComment:null},n.handleClickDeleteComment=n.handleClickDeleteComment.bind(ue(n)),n.handleShowEdit=n.handleShowEdit.bind(ue(n)),n.handleShowReply=n.handleShowReply.bind(ue(n)),n.handleClickOpen=n.handleClickOpen.bind(ue(n)),n.showAddComment=n.showAddComment.bind(ue(n)),n.showEditComment=n.showEditComment.bind(ue(n)),n.handleConfirmDialog=n.handleConfirmDialog.bind(ue(n)),n.handleClose=n.handleClose.bind(ue(n)),n.filterRemainingComments=n.filterRemainingComments.bind(ue(n)),n.filterCommentToDelete=n.filterCommentToDelete.bind(ue(n)),n}var n,a,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&de(e,t)}(t,o.a.Component),n=t,(a=[{key:"filterRemainingComments",value:function(e){var t=this.state.deleteComment;return e.id!==t.id}},{key:"filterCommentToDelete",value:function(e){this.state.deleteComment;return e.id}},{key:"showAddComment",value:function(e){-1===this.state.editIndex&&this.setState({replyIndex:e})}},{key:"showEditComment",value:function(e){-1===this.state.editIndex&&this.setState({editIndex:e})}},{key:"handleShowEdit",value:function(){this.setState({editIndex:-1})}},{key:"handleShowReply",value:function(){this.setState({replyIndex:-1})}},{key:"handleClickOpen",value:function(e){-1===this.state.editIndex&&this.setState({deleteComment:e,openDialog:!0})}},{key:"handleClose",value:function(){this.setState({openDialog:!1})}},{key:"handleConfirmDialog",value:function(e){e?this.handleClickDeleteComment():this.handleClose()}},{key:"handleClickDeleteComment",value:function(){var e=this,t=new I.a,n=this.state.deleteComment,a=this.props,o=a.apiId,i=a.allComments,r=a.commentsUpdate,l=(a.intl,n.id);this.handleClose(),t.deleteComment(o,l).then(function(t){var n=i.filter(e.filterRemainingComments);r(n),h.a.message("Comment"+l+"has been successfully deleted")}).catch(function(e){console.error(e),e.response&&h.a.error(e.response.body.message)})}},{key:"render",value:function(){var e=this,t=this.props,n=t.classes,a=t.comments,i=t.apiId,r=t.allComments,l=t.commentsUpdate,m=this.state,u=m.editIndex,d=(m.replyIndex,m.openDialog);return[a&&a.slice(0).reverse().map(function(t,a){return o.a.createElement("div",{key:t.commentId+"-"+a,className:n.contentWrapper},o.a.createElement(f.a,{container:!0,spacing:1,className:n.root},o.a.createElement(f.a,{item:!0},o.a.createElement(s.a,{className:n.commentIcon},"account_box")),o.a.createElement(f.a,{item:!0,xs:!0,zeroMinWidth:!0},o.a.createElement(c.a,{noWrap:!0,className:n.commentText},t.createdBy),a!==u&&o.a.createElement(c.a,{className:n.commentText},t.content),a===u&&o.a.createElement(J,{apiId:i,allComments:r,commentsUpdate:l,comment:t,toggleShowEdit:e.handleShowEdit}),o.a.createElement(te,{classes:n,comment:t,editIndex:u,index:a,showAddComment:e.showAddComment,handleClickOpen:e.handleClickOpen,showEditComment:e.showEditComment}))))}),o.a.createElement(j,{key:"key-dialog",labelCancel:"Cancel",title:"Confirm Delete",message:"Are you sure you want to delete this comment?",labelOk:"Yes",callback:this.handleConfirmDialog,open:d})]}}])&&ce(n.prototype,a),i&&ce(n,i),t}();pe.propTypes={classes:r.a.instanceOf(Object).isRequired,apiId:r.a.string.isRequired,allComments:r.a.instanceOf(Array).isRequired,commentsUpdate:r.a.func.isRequired,comments:r.a.instanceOf(Array).isRequired};var fe=Object(d.e)(Object(l.a)(function(e){return{link:{color:e.palette.getContrastText(e.palette.background.default),cursor:"pointer"},commentIcon:{color:e.palette.getContrastText(e.palette.background.default)},commentText:{color:e.palette.getContrastText(e.palette.background.default),marginTop:.8*e.spacing.unit,width:"100%",whiteSpace:"pre-wrap",overflowWrap:"break-word"},root:{marginTop:2.5*e.spacing.unit},contentWrapper:{maxWidth:e.custom.contentAreaWidth,paddingLeft:2*e.spacing.unit,paddingTop:e.spacing.unig}}})(pe)),he=n(662);function ge(e){return(ge="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ye(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function Ce(e){return(Ce=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function be(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ve(e,t){return(ve=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var we,xe,ke,Ee=function(e){function t(e){var n,a,o;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),a=this,(n=!(o=Ce(t).call(this,e))||"object"!==ge(o)&&"function"!=typeof o?be(a):o).state={expanded:!0,allComments:[],comments:[],totalComments:0,startCommentsToDisplay:0},n.updateCommentList=n.updateCommentList.bind(be(n)),n.handleExpandClick=n.handleExpandClick.bind(be(n)),n.handleLoadMoreComments=n.handleLoadMoreComments.bind(be(n)),n}var n,i,r;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ve(e,t)}(t,a["Component"]),n=t,(i=[{key:"componentDidMount",value:function(){var e=this,t=this.props,n=t.apiId,a=t.theme,o=t.match,i=(t.intl,t.isOverview),r=t.setCount;o&&(n=o.params.apiUuid);var l=new I.a;null!=p.a.getUser()&&l.getAllComments(n).then(function(t){var n=t.body.list;i&&(r(n.length),n.length>2&&(n=n.slice(n.length-3,n.length))),e.setState({allComments:n,totalComments:n.length}),n.length<a.custom.commentsLimit?e.setState({startCommentsToDisplay:0,comments:n.slice(0,n.length)}):e.setState({startCommentsToDisplay:n.length-a.custom.commentsLimit,comments:n.slice(n.length-a.custom.commentsLimit,n.length)})}).catch(function(e){0})}},{key:"handleLoadMoreComments",value:function(){var e=this.state,t=e.totalComments,n=e.startCommentsToDisplay,a=e.allComments,o=this.props.theme;n-o.custom.commentsLimit<=0?this.setState({startCommentsToDisplay:0,comments:a.slice(0,t)}):this.setState({startCommentsToDisplay:n-o.custom.commentsLimit,comments:a.slice(n-o.custom.commentsLimit,t)})}},{key:"handleExpandClick",value:function(){var e=this.state.expanded;this.setState({expanded:!e})}},{key:"updateCommentList",value:function(e){var t,n,a,o=this.state,i=o.startCommentsToDisplay,r=o.totalComments,l=this.props.theme;this.setState({allComments:e}),r<l.custom.commentsLimit?(a=e.length,this.setState({startCommentsToDisplay:0,totalComments:a,comments:e})):r<=e.length?(t=i+(n=e.length-r),a=e.length,this.setState({startCommentsToDisplay:t,totalComments:a,comments:e.slice(t,a)})):(n=r-e.length,t=0===i?i:i-n,a=e.length,this.setState({startCommentsToDisplay:t,totalComments:a,comments:e.slice(t,a)}))}},{key:"render",value:function(){var e=this,t=this.props,n=t.classes,a=t.showLatest,i=this.state,r=i.comments,l=i.expanded,m=i.allComments,p=i.startCommentsToDisplay,f=i.totalComments;i.commentsUpdate;return o.a.createElement(he.a.Consumer,null,function(t){var i=t.api;return o.a.createElement("div",{className:n.contentWrapper},!a&&o.a.createElement("div",{className:n.root},o.a.createElement(s.a,{onClick:e.handleExpandClick,"aria-expanded":l},"arrow_drop_down_circle"),o.a.createElement(c.a,{onClick:e.handleExpandClick,variant:"h4",className:n.titleSub},o.a.createElement(d.a,{id:"Apis.Details.Comments.title",defaultMessage:"Comments"}))),o.a.createElement(fe,{comments:r,apiId:i.id,commentsUpdate:e.updateCommentList,allComments:m}),!a&&o.a.createElement(W,{apiId:i.id,commentsUpdate:e.updateCommentList,allComments:m,parentCommentId:null,cancelButton:!0}),0!==p&&o.a.createElement("div",{className:n.contentWrapper},o.a.createElement(u.a,{container:!0,spacing:4,className:n.root},o.a.createElement(u.a,{item:!0},o.a.createElement(c.a,{className:n.verticalSpace,variant:"body1"},o.a.createElement("a",{className:n.link+" "+n.loadMoreLink,onClick:e.handleLoadMoreComments},o.a.createElement(d.a,{id:"Apis.Details.Comments.load.previous.comments",defaultMessage:"Load Previous Comments"})))),o.a.createElement(u.a,null,o.a.createElement(s.a,{onClick:e.handleLoadMoreComments,className:n.link+" "+n.verticalSpace},"arrow_drop_down")),o.a.createElement(u.a,{item:!0},o.a.createElement(c.a,{className:n.verticalSpace,variant:"body1"},o.a.createElement(d.a,{id:"Apis.Details.Comments.showing.comments",defaultMessage:"Showing comments "}),f-p+" of "+f)))))})}}])&&ye(n.prototype,i),r&&ye(n,r),t}();we=Ee,xe="contextType",ke=he.a,xe in we?Object.defineProperty(we,xe,{value:ke,enumerable:!0,configurable:!0,writable:!0}):we[xe]=ke,Ee.propTypes={classes:r.a.instanceOf(Object).isRequired};t.default=Object(d.e)(Object(l.a)(function(e){return{root:{display:"flex",alignItems:"center",paddingTop:2*e.spacing.unit,paddingBottom:2*e.spacing.unit},contentWrapper:{maxWidth:e.custom.contentAreaWidth,paddingLeft:2*e.spacing.unit,paddingTop:e.spacing.unig},titleSub:{cursor:"pointer"},link:{color:e.palette.getContrastText(e.palette.background.default),cursor:"pointer"},verticalSpace:{marginTop:.2*e.spacing.unit},loadMoreLink:{textDecoration:"underline"}}},{withTheme:!0})(Ee))},1576:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=function(e){return function(){return null}};t.default=a}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvR3JpZC9HcmlkLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9zcmMvYXBwL2NvbXBvbmVudHMvU2hhcmVkL0NvbmZpcm1EaWFsb2cuanN4Iiwid2VicGFjazovLy8uL3NvdXJjZS9zcmMvYXBwL2NvbXBvbmVudHMvQXBpcy9EZXRhaWxzL0NvbW1lbnRzL0NvbW1lbnRBZGQuanN4Iiwid2VicGFjazovLy8uL3NvdXJjZS9zcmMvYXBwL2NvbXBvbmVudHMvQXBpcy9EZXRhaWxzL0NvbW1lbnRzL0NvbW1lbnRFZGl0LmpzeCIsIndlYnBhY2s6Ly8vLi9zb3VyY2Uvc3JjL2FwcC9jb21wb25lbnRzL0FwaXMvRGV0YWlscy9Db21tZW50cy9Db21tZW50T3B0aW9ucy5qc3giLCJ3ZWJwYWNrOi8vLy4vc291cmNlL3NyYy9hcHAvY29tcG9uZW50cy9BcGlzL0RldGFpbHMvQ29tbWVudHMvQ29tbWVudFJlcGx5LmpzeCIsIndlYnBhY2s6Ly8vLi9zb3VyY2Uvc3JjL2FwcC9jb21wb25lbnRzL0FwaXMvRGV0YWlscy9Db21tZW50cy9Db21tZW50LmpzeCIsIndlYnBhY2s6Ly8vLi9zb3VyY2Uvc3JjL2FwcC9jb21wb25lbnRzL0FwaXMvRGV0YWlscy9Db21tZW50cy9Db21tZW50cy5qc3giLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3V0aWxzL3JlcXVpcmVQcm9wRmFjdG9yeS5qcyJdLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsInN0eWxlcyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllczIiLCJfZXh0ZW5kczIiLCJfcmVhY3QiLCJfY2xzeCIsIl93aXRoU3R5bGVzIiwiU1BBQ0lOR1MiLCJHUklEX1NJWkVTIiwiZ2V0T2Zmc2V0IiwidmFsIiwiZGl2IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwicGFyc2UiLCJwYXJzZUZsb2F0IiwiY29uY2F0IiwiU3RyaW5nIiwicmVwbGFjZSIsInRoZW1lIiwicm9vdCIsImNvbnRhaW5lciIsImJveFNpemluZyIsImRpc3BsYXkiLCJmbGV4V3JhcCIsIndpZHRoIiwiaXRlbSIsIm1hcmdpbiIsInplcm9NaW5XaWR0aCIsIm1pbldpZHRoIiwiZGlyZWN0aW9uLXhzLWNvbHVtbiIsImZsZXhEaXJlY3Rpb24iLCJkaXJlY3Rpb24teHMtY29sdW1uLXJldmVyc2UiLCJkaXJlY3Rpb24teHMtcm93LXJldmVyc2UiLCJ3cmFwLXhzLW5vd3JhcCIsIndyYXAteHMtd3JhcC1yZXZlcnNlIiwiYWxpZ24taXRlbXMteHMtY2VudGVyIiwiYWxpZ25JdGVtcyIsImFsaWduLWl0ZW1zLXhzLWZsZXgtc3RhcnQiLCJhbGlnbi1pdGVtcy14cy1mbGV4LWVuZCIsImFsaWduLWl0ZW1zLXhzLWJhc2VsaW5lIiwiYWxpZ24tY29udGVudC14cy1jZW50ZXIiLCJhbGlnbkNvbnRlbnQiLCJhbGlnbi1jb250ZW50LXhzLWZsZXgtc3RhcnQiLCJhbGlnbi1jb250ZW50LXhzLWZsZXgtZW5kIiwiYWxpZ24tY29udGVudC14cy1zcGFjZS1iZXR3ZWVuIiwiYWxpZ24tY29udGVudC14cy1zcGFjZS1hcm91bmQiLCJqdXN0aWZ5LXhzLWNlbnRlciIsImp1c3RpZnlDb250ZW50IiwianVzdGlmeS14cy1mbGV4LWVuZCIsImp1c3RpZnkteHMtc3BhY2UtYmV0d2VlbiIsImp1c3RpZnkteHMtc3BhY2UtYXJvdW5kIiwianVzdGlmeS14cy1zcGFjZS1ldmVubHkiLCJicmVha3BvaW50IiwiZm9yRWFjaCIsInNwYWNpbmciLCJ0aGVtZVNwYWNpbmciLCImID4gJGl0ZW0iLCJwYWRkaW5nIiwiZ2VuZXJhdGVHdXR0ZXIiLCJicmVha3BvaW50cyIsImtleXMiLCJyZWR1Y2UiLCJhY2N1bXVsYXRvciIsImtleSIsImdsb2JhbFN0eWxlcyIsInNpemUiLCJNYXRoIiwicm91bmQiLCJmbGV4QmFzaXMiLCJmbGV4R3JvdyIsIm1heFdpZHRoIiwidXAiLCJnZW5lcmF0ZUdyaWQiLCJHcmlkIiwiZm9yd2FyZFJlZiIsInByb3BzIiwicmVmIiwiX3Byb3BzJGFsaWduQ29udGVudCIsIl9wcm9wcyRhbGlnbkl0ZW1zIiwiY2xhc3NlcyIsImNsYXNzTmFtZVByb3AiLCJjbGFzc05hbWUiLCJfcHJvcHMkY29tcG9uZW50IiwiY29tcG9uZW50IiwiQ29tcG9uZW50IiwiX3Byb3BzJGNvbnRhaW5lciIsIl9wcm9wcyRkaXJlY3Rpb24iLCJkaXJlY3Rpb24iLCJfcHJvcHMkaXRlbSIsIl9wcm9wcyRqdXN0aWZ5IiwianVzdGlmeSIsIl9wcm9wcyRsZyIsImxnIiwiX3Byb3BzJG1kIiwibWQiLCJfcHJvcHMkc20iLCJzbSIsIl9wcm9wcyRzcGFjaW5nIiwiX3Byb3BzJHdyYXAiLCJ3cmFwIiwiX3Byb3BzJHhsIiwieGwiLCJfcHJvcHMkeHMiLCJ4cyIsIl9wcm9wcyR6ZXJvTWluV2lkdGgiLCJvdGhlciIsImNyZWF0ZUVsZW1lbnQiLCJfZGVmYXVsdCIsIm5hbWUiLCJDb25maXJtRGlhbG9nIiwiUmVhY3QiLCJhY3Rpb24iLCJjYWxsYmFjayIsInRoaXMiLCJBY3Rpb24iLCJPSyIsIl90aGlzIiwiX3RoaXMkcHJvcHMiLCJ0aXRsZSIsIm1lc3NhZ2UiLCJsYWJlbENhbmNlbCIsImxhYmVsT2siLCJvcGVuIiwicmVhY3RfZGVmYXVsdCIsImEiLCJEaWFsb2ciLCJvbkNsb3NlIiwiaGFuZGxlUmVxdWVzdENsb3NlIiwiRGlhbG9nVGl0bGUiLCJpbmRleF9lcyIsImlkIiwiZGVmYXVsdE1lc3NhZ2UiLCJEaWFsb2dDb250ZW50IiwiRGlhbG9nQ29udGVudFRleHQiLCJEaWFsb2dBY3Rpb25zIiwiQnV0dG9uIiwib25DbGljayIsIkNBTkNFTCIsImNvbG9yIiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwic3RyaW5nIiwiaXNSZXF1aXJlZCIsImZ1bmMiLCJib29sIiwiQ29tbWVudEFkZCIsIkNvbW1lbnRBZGRfY2xhc3NDYWxsQ2hlY2siLCJDb21tZW50QWRkX2dldFByb3RvdHlwZU9mIiwiY2FsbCIsInN0YXRlIiwiY29udGVudCIsImN1cnJlbnRMZW5ndGgiLCJpbnB1dENoYW5nZSIsImJpbmQiLCJDb21tZW50QWRkX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsImhhbmRsZUNsaWNrQWRkQ29tbWVudCIsImhhbmRsZUNsaWNrQ2FuY2VsIiwidGFyZ2V0IiwiX3JlZiIsInNldFN0YXRlIiwiX3RoaXMyIiwiYXBpSWQiLCJhbGxDb21tZW50cyIsImNvbW1lbnRzVXBkYXRlIiwiaW50bCIsIkFwaSIsIkFQSSIsImNvbW1lbnQiLCJ0cmltIiwiYWRkQ29tbWVudCIsInRoZW4iLCJuZXdDb21tZW50IiwiYWRkZWRDb21tZW50IiwiYm9keSIsInB1c2giLCJlcnJvciIsImNvbnNvbGUiLCJyZXNwb25zZSIsIkFsZXJ0IiwiZm9ybWF0TWVzc2FnZSIsIl90aGlzMyIsIl90aGlzJHByb3BzMiIsImNhbmNlbEJ1dHRvbiIsIl90aGlzJHN0YXRlIiwiR3JpZF9HcmlkIiwiY29udGVudFdyYXBwZXIiLCJUZXh0RmllbGQiLCJhdXRvRm9jdXMiLCJtdWx0aWxpbmUiLCJ0ZXh0RmllbGQiLCJwbGFjZWhvbGRlciIsImlucHV0UHJvcHMiLCJtYXhMZW5ndGgiLCJjdXN0b20iLCJtYXhDb21tZW50TGVuZ3RoIiwib25DaGFuZ2UiLCJUeXBvZ3JhcGh5IiwiYWxpZ24iLCJ2YXJpYW50IiwiYnV0dG9uIiwiZGVmYXVsdFByb3BzIiwicGFyZW50Q29tbWVudElkIiwidG9nZ2xlU2hvd1JlcGx5IiwiaW5zdGFuY2VPZiIsIkFycmF5Iiwic2hhcGUiLCJpbmplY3RJbnRsIiwid2l0aFN0eWxlcyIsImNvbW1lbnRJY29uIiwicGFsZXR0ZSIsImdldENvbnRyYXN0VGV4dCIsImJhY2tncm91bmQiLCJjb250ZW50QXJlYVdpZHRoIiwicGFkZGluZ0xlZnQiLCJ1bml0IiwicGFkZGluZ1RvcCIsInVuaWciLCJtYXJnaW5Ub3AiLCJ3aXRoVGhlbWUiLCJDb21tZW50RWRpdCIsIkNvbW1lbnRFZGl0X2NsYXNzQ2FsbENoZWNrIiwiQ29tbWVudEVkaXRfZ2V0UHJvdG90eXBlT2YiLCJjb21tZW50VGV4dCIsImNhdGVnb3J5IiwiQ29tbWVudEVkaXRfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiaGFuZGxlQ2F0ZWdvcnlDaGFuZ2UiLCJoYW5kbGVDbGlja1VwZGF0ZUNvbW1lbnQiLCJmaWx0ZXJDb21tZW50VG9VcGRhdGUiLCJmaWx0ZXJDb21tZW50VG9VcGRhdGVSZXBseSIsInRvZ2dsZVNob3dFZGl0IiwiZXZlbnQiLCJjb21tZW50VG9GaWx0ZXIiLCJjb21tZW50SWQiLCJjb21tZW50VG9FZGl0IiwidXBkYXRlQ29tbWVudCIsInJlc3VsdCIsInVwZGF0ZWRDb21tZW50IiwiaW5kZXgiLCJmaW5kSW5kZXgiLCJyZXBseUluZGV4IiwicmVwbGllcyIsIl90aGlzJHByb3BzMyIsIl90aGlzJHN0YXRlMiIsIkZvcm1Db250cm9sIiwiU2VsZWN0IiwiTWVudUl0ZW0iLCJtYXJnaW5SaWdodCIsIkNvbW1lbnRPcHRpb25zIiwiQ29tbWVudE9wdGlvbnNfY2xhc3NDYWxsQ2hlY2siLCJDb21tZW50T3B0aW9uc19nZXRQcm90b3R5cGVPZiIsInNob3dBZGRDb21tZW50IiwiQ29tbWVudE9wdGlvbnNfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwic2hvd0VkaXRDb21tZW50IiwiaGFuZGxlQ2xpY2tPcGVuIiwiZWRpdEluZGV4IiwidGltZXN0YW1wIiwibG9jYWxEYXRlIiwiRGF0ZSIsInRvTG9jYWxlRGF0ZVN0cmluZyIsImRheSIsIm1vbnRoIiwieWVhciIsInRvTG9jYWxlVGltZVN0cmluZyIsImhvdXIiLCJtaW51dGUiLCJfdGhpcyRwcm9wczQiLCJHcmlkX2RlZmF1bHQiLCJ2ZXJ0aWNhbFNwYWNlIiwiY3JlYXRlZEJ5IiwiQXV0aE1hbmFnZXIiLCJnZXRVc2VyIiwiYWRtaW5Sb2xlIiwibGluayIsImRpc2FibGUiLCJWZXJ0aWNhbERpdmlkZXIiLCJoZWlnaHQiLCJlbnRyeVBvaW50IiwidGltZSIsImRpc3BsYXlEYXRlIiwiY3JlYXRlZFRpbWUiLCJudW1iZXIiLCJjdXJzb3IiLCJkaXNhYmxlQ29sb3IiLCJ3aGl0ZVNwYWNlIiwib3ZlcmZsb3dXcmFwIiwiQ29tbWVudFJlcGx5IiwiQ29tbWVudFJlcGx5X2NsYXNzQ2FsbENoZWNrIiwiQ29tbWVudFJlcGx5X2dldFByb3RvdHlwZU9mIiwib3BlbkRpYWxvZyIsImRlbGV0ZUNvbW1lbnQiLCJoYW5kbGVDbGlja0RlbGV0ZUNvbW1lbnQiLCJDb21tZW50UmVwbHlfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiaGFuZGxlU2hvd0VkaXQiLCJoYW5kbGVDb25maXJtRGlhbG9nIiwiaGFuZGxlQ2xvc2UiLCJmaWx0ZXJSZW1haW5pbmdDb21tZW50cyIsImZpbHRlckNvbW1lbnRUb0RlbGV0ZSIsImNvbW1lbnRJZE9mQ29tbWVudFRvRGVsZXRlIiwicGFyZW50Q29tbWVudElkT2ZDb21tZW50VG9EZWxldGUiLCJyZW1haW5pbmdDb21tZW50cyIsImZpbHRlciIsInJlbWFpbmluZ1JlcGxpZXMiLCJjb21tZW50cyIsIm1hcCIsIkljb24iLCJub1dyYXAiLCJDb21tZW50c19Db21tZW50RWRpdCIsIkNvbW1lbnRzX0NvbW1lbnRPcHRpb25zIiwiU2hhcmVkX0NvbmZpcm1EaWFsb2ciLCJhcGkiLCJDb21tZW50IiwiQ29tbWVudF9jbGFzc0NhbGxDaGVjayIsIkNvbW1lbnRfZ2V0UHJvdG90eXBlT2YiLCJDb21tZW50X2Fzc2VydFRoaXNJbml0aWFsaXplZCIsImhhbmRsZVNob3dSZXBseSIsImFwaUNsaWVudCIsInNsaWNlIiwicmV2ZXJzZSIsIkNvbW1lbnRzIiwiQ29tbWVudHNfY2xhc3NDYWxsQ2hlY2siLCJDb21tZW50c19nZXRQcm90b3R5cGVPZiIsImV4cGFuZGVkIiwidG90YWxDb21tZW50cyIsInN0YXJ0Q29tbWVudHNUb0Rpc3BsYXkiLCJ1cGRhdGVDb21tZW50TGlzdCIsIkNvbW1lbnRzX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsImhhbmRsZUV4cGFuZENsaWNrIiwiaGFuZGxlTG9hZE1vcmVDb21tZW50cyIsIm1hdGNoIiwiaXNPdmVydmlldyIsInNldENvdW50IiwicGFyYW1zIiwiYXBpVXVpZCIsInJlc3RBcGkiLCJnZXRBbGxDb21tZW50cyIsImNvbW1lbnRMaXN0IiwibGlzdCIsImNvbW1lbnRzTGltaXQiLCJwcm9jZXNzIiwibmV3U3RhcnQiLCJkaWZmZXJlbmNlIiwibmV3VG90YWwiLCJzaG93TGF0ZXN0IiwiX3RoaXMkc3RhdGUzIiwiQXBpQ29udGV4dCIsIkNvbnN1bWVyIiwiYXJpYS1leHBhbmRlZCIsInRpdGxlU3ViIiwiQ29tbWVudHNfQ29tbWVudCIsIkNvbW1lbnRzX0NvbW1lbnRBZGQiLCJsb2FkTW9yZUxpbmsiLCJwYWRkaW5nQm90dG9tIiwidGV4dERlY29yYXRpb24iLCJjb21wb25lbnROYW1lSW5FcnJvciJdLCJtYXBwaW5ncyI6IjJGQUVBLElBQUFBLEVBQTZCQyxFQUFRLElBRXJDQyxPQUFBQyxlQUFBQyxFQUFBLGNBQ0FDLE9BQUEsSUFFQUQsRUFBQUUsUUFBQUYsRUFBQUcsWUFBQSxFQUVBLElBQUFDLEVBQUFSLEVBQXVEQyxFQUFRLEtBRS9EUSxFQUFBVCxFQUF1Q0MsRUFBUSxLQUUvQ1MsRUFBQVYsRUFBb0NDLEVBQVEsSUFJNUNVLEdBRkFYLEVBQXdDQyxFQUFRLElBRWhERCxFQUFtQ0MsRUFBUSxLQUUzQ1csRUFBQVosRUFBeUNDLEVBQVEsTUFjakRZLEdBWkFiLEVBQWlEQyxFQUFRLE9BWXpELDBCQUNBYSxFQUFBLHVDQTRDQSxTQUFBQyxFQUFBQyxHQUNBLElBQUFDLEVBQUFDLFVBQUFDLE9BQUEsUUFBQUMsSUFBQUYsVUFBQSxHQUFBQSxVQUFBLEtBQ0FHLEVBQUFDLFdBQUFOLEdBQ0EsU0FBQU8sT0FBQUYsRUFBQUosR0FBQU0sT0FBQUMsT0FBQVIsR0FB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c291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zdHlsZXMgPSB2b2lkIDA7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2Nsc3ggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbHN4XCIpKTtcblxudmFyIF93aXRoU3R5bGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3dpdGhTdHlsZXNcIikpO1xuXG52YXIgX3JlcXVpcmVQcm9wRmFjdG9yeSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL3JlcXVpcmVQcm9wRmFjdG9yeVwiKSk7XG5cbi8vIEEgZ3JpZCBjb21wb25lbnQgdXNpbmcgdGhlIGZvbGxvd2luZyBsaWJzIGFzIGluc3BpcmF0aW9uLlxuLy9cbi8vIEZvciB0aGUgaW1wbGVtZW50YXRpb246XG4vLyAtIGh0dHBzOi8vZ2V0Ym9vdHN0cmFwLmNvbS9kb2NzLzQuMy9sYXlvdXQvZ3JpZC9cbi8vIC0gaHR0cHM6Ly9naXRodWIuY29tL2tyaXN0b2Zlcmpvc2VwaC9mbGV4Ym94Z3JpZC9ibG9iL21hc3Rlci9zcmMvY3NzL2ZsZXhib3hncmlkLmNzc1xuLy8gLSBodHRwczovL2dpdGh1Yi5jb20vcm95bGVlMDcwNC9yZWFjdC1mbGV4Ym94LWdyaWRcbi8vIC0gaHR0cHM6Ly9tYXRlcmlhbC5hbmd1bGFyanMub3JnL2xhdGVzdC9sYXlvdXQvaW50cm9kdWN0aW9uXG4vL1xuLy8gRm9sbG93IHRoaXMgZmxleGJveCBHdWlkZSB0byBiZXR0ZXIgdW5kZXJzdGFuZCB0aGUgdW5kZXJseWluZyBtb2RlbDpcbi8vIC0gaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9zbmlwcGV0cy9jc3MvYS1ndWlkZS10by1mbGV4Ym94L1xudmFyIFNQQUNJTkdTID0gWzAsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwXTtcbnZhciBHUklEX1NJWkVTID0gWydhdXRvJywgdHJ1ZSwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMl07XG5cbmZ1bmN0aW9uIGdlbmVyYXRlR3JpZChnbG9iYWxTdHlsZXMsIHRoZW1lLCBicmVha3BvaW50KSB7XG4gIHZhciBzdHlsZXMgPSB7fTtcbiAgR1JJRF9TSVpFUy5mb3JFYWNoKGZ1bmN0aW9uIChzaXplKSB7XG4gICAgdmFyIGtleSA9IFwiZ3JpZC1cIi5jb25jYXQoYnJlYWtwb2ludCwgXCItXCIpLmNvbmNhdChzaXplKTtcblxuICAgIGlmIChzaXplID09PSB0cnVlKSB7XG4gICAgICAvLyBGb3IgdGhlIGF1dG8gbGF5b3V0aW5nXG4gICAgICBzdHlsZXNba2V5XSA9IHtcbiAgICAgICAgZmxleEJhc2lzOiAwLFxuICAgICAgICBmbGV4R3JvdzogMSxcbiAgICAgICAgbWF4V2lkdGg6ICcxMDAlJ1xuICAgICAgfTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoc2l6ZSA9PT0gJ2F1dG8nKSB7XG4gICAgICBzdHlsZXNba2V5XSA9IHtcbiAgICAgICAgZmxleEJhc2lzOiAnYXV0bycsXG4gICAgICAgIGZsZXhHcm93OiAwLFxuICAgICAgICBtYXhXaWR0aDogJ25vbmUnXG4gICAgICB9O1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gS2VlcCA3IHNpZ25pZmljYW50IG51bWJlcnMuXG5cblxuICAgIHZhciB3aWR0aCA9IFwiXCIuY29uY2F0KE1hdGgucm91bmQoc2l6ZSAvIDEyICogMTBlNykgLyAxMGU1LCBcIiVcIik7IC8vIENsb3NlIHRvIHRoZSBib290c3RyYXAgaW1wbGVtZW50YXRpb246XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvOGZjY2FhMjQzOWU5N2VjNzJhNGI3ZGM0MmNjYzFmNjQ5NzkwYWRiMC9zY3NzL21peGlucy9fZ3JpZC5zY3NzI0w0MVxuXG4gICAgc3R5bGVzW2tleV0gPSB7XG4gICAgICBmbGV4QmFzaXM6IHdpZHRoLFxuICAgICAgZmxleEdyb3c6IDAsXG4gICAgICBtYXhXaWR0aDogd2lkdGhcbiAgICB9O1xuICB9KTsgLy8gTm8gbmVlZCBmb3IgYSBtZWRpYSBxdWVyeSBmb3IgdGhlIGZpcnN0IHNpemUuXG5cbiAgaWYgKGJyZWFrcG9pbnQgPT09ICd4cycpIHtcbiAgICAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKGdsb2JhbFN0eWxlcywgc3R5bGVzKTtcbiAgfSBlbHNlIHtcbiAgICBnbG9iYWxTdHlsZXNbdGhlbWUuYnJlYWtwb2ludHMudXAoYnJlYWtwb2ludCldID0gc3R5bGVzO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldE9mZnNldCh2YWwpIHtcbiAgdmFyIGRpdiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMTtcbiAgdmFyIHBhcnNlID0gcGFyc2VGbG9hdCh2YWwpO1xuICByZXR1cm4gXCJcIi5jb25jYXQocGFyc2UgLyBkaXYpLmNvbmNhdChTdHJpbmcodmFsKS5yZXBsYWNlKFN0cmluZyhwYXJzZSksICcnKSB8fCAncHgnKTtcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVHdXR0ZXIodGhlbWUsIGJyZWFrcG9pbnQpIHtcbiAgdmFyIHN0eWxlcyA9IHt9O1xuICBTUEFDSU5HUy5mb3JFYWNoKGZ1bmN0aW9uIChzcGFjaW5nKSB7XG4gICAgdmFyIHRoZW1lU3BhY2luZyA9IHRoZW1lLnNwYWNpbmcoc3BhY2luZyk7XG5cbiAgICBpZiAodGhlbWVTcGFjaW5nID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3R5bGVzW1wic3BhY2luZy1cIi5jb25jYXQoYnJlYWtwb2ludCwgXCItXCIpLmNvbmNhdChzcGFjaW5nKV0gPSB7XG4gICAgICBtYXJnaW46IFwiLVwiLmNvbmNhdChnZXRPZmZzZXQodGhlbWVTcGFjaW5nLCAyKSksXG4gICAgICB3aWR0aDogXCJjYWxjKDEwMCUgKyBcIi5jb25jYXQoZ2V0T2Zmc2V0KHRoZW1lU3BhY2luZyksIFwiKVwiKSxcbiAgICAgICcmID4gJGl0ZW0nOiB7XG4gICAgICAgIHBhZGRpbmc6IGdldE9mZnNldCh0aGVtZVNwYWNpbmcsIDIpXG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG4gIHJldHVybiBzdHlsZXM7XG59IC8vIERlZmF1bHQgQ1NTIHZhbHVlc1xuLy8gZmxleDogJzAgMSBhdXRvJyxcbi8vIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxuLy8gYWxpZ25JdGVtczogJ2ZsZXgtc3RhcnQnLFxuLy8gZmxleFdyYXA6ICdub3dyYXAnLFxuLy8ganVzdGlmeUNvbnRlbnQ6ICdmbGV4LXN0YXJ0JyxcblxuXG52YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50ICovXG4gICAgcm9vdDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb250YWluZXI9e3RydWV9YC4gKi9cbiAgICBjb250YWluZXI6IHtcbiAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgZmxleFdyYXA6ICd3cmFwJyxcbiAgICAgIHdpZHRoOiAnMTAwJSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgaXRlbT17dHJ1ZX1gLiAqL1xuICAgIGl0ZW06IHtcbiAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgbWFyZ2luOiAnMCcgLy8gRm9yIGluc3RhbmNlLCBpdCdzIHVzZWZ1bCB3aGVuIHVzZWQgd2l0aCBhIGBmaWd1cmVgIGVsZW1lbnQuXG5cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgemVyb01pbldpZHRoPXt0cnVlfWAuICovXG4gICAgemVyb01pbldpZHRoOiB7XG4gICAgICBtaW5XaWR0aDogMFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXJlY3Rpb249XCJjb2x1bW5cImAuICovXG4gICAgJ2RpcmVjdGlvbi14cy1jb2x1bW4nOiB7XG4gICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXJlY3Rpb249XCJjb2x1bW4tcmV2ZXJzZVwiYC4gKi9cbiAgICAnZGlyZWN0aW9uLXhzLWNvbHVtbi1yZXZlcnNlJzoge1xuICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbi1yZXZlcnNlJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXJlY3Rpb249XCJyd28tcmV2ZXJzZVwiYC4gKi9cbiAgICAnZGlyZWN0aW9uLXhzLXJvdy1yZXZlcnNlJzoge1xuICAgICAgZmxleERpcmVjdGlvbjogJ3Jvdy1yZXZlcnNlJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB3cmFwPVwibm93cmFwXCJgLiAqL1xuICAgICd3cmFwLXhzLW5vd3JhcCc6IHtcbiAgICAgIGZsZXhXcmFwOiAnbm93cmFwJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB3cmFwPVwicmV2ZXJzZVwiYC4gKi9cbiAgICAnd3JhcC14cy13cmFwLXJldmVyc2UnOiB7XG4gICAgICBmbGV4V3JhcDogJ3dyYXAtcmV2ZXJzZSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWxpZ25JdGVtcz1cImNlbnRlclwiYC4gKi9cbiAgICAnYWxpZ24taXRlbXMteHMtY2VudGVyJzoge1xuICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcidcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWxpZ25JdGVtcz1cImZsZXgtc3RhcnRcImAuICovXG4gICAgJ2FsaWduLWl0ZW1zLXhzLWZsZXgtc3RhcnQnOiB7XG4gICAgICBhbGlnbkl0ZW1zOiAnZmxleC1zdGFydCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWxpZ25JdGVtcz1cImZsZXgtZW5kXCJgLiAqL1xuICAgICdhbGlnbi1pdGVtcy14cy1mbGV4LWVuZCc6IHtcbiAgICAgIGFsaWduSXRlbXM6ICdmbGV4LWVuZCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWxpZ25JdGVtcz1cImJhc2VsaW5lXCJgLiAqL1xuICAgICdhbGlnbi1pdGVtcy14cy1iYXNlbGluZSc6IHtcbiAgICAgIGFsaWduSXRlbXM6ICdiYXNlbGluZSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWxpZ25Db250ZW50PVwiY2VudGVyXCJgLiAqL1xuICAgICdhbGlnbi1jb250ZW50LXhzLWNlbnRlcic6IHtcbiAgICAgIGFsaWduQ29udGVudDogJ2NlbnRlcidcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWxpZ25Db250ZW50PVwiZmxleC1zdGFydFwiYC4gKi9cbiAgICAnYWxpZ24tY29udGVudC14cy1mbGV4LXN0YXJ0Jzoge1xuICAgICAgYWxpZ25Db250ZW50OiAnZmxleC1zdGFydCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWxpZ25Db250ZW50PVwiZmxleC1lbmRcImAuICovXG4gICAgJ2FsaWduLWNvbnRlbnQteHMtZmxleC1lbmQnOiB7XG4gICAgICBhbGlnbkNvbnRlbnQ6ICdmbGV4LWVuZCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWxpZ25Db250ZW50PVwic3BhY2UtYmV0d2VlblwiYC4gKi9cbiAgICAnYWxpZ24tY29udGVudC14cy1zcGFjZS1iZXR3ZWVuJzoge1xuICAgICAgYWxpZ25Db250ZW50OiAnc3BhY2UtYmV0d2VlbidcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWxpZ25Db250ZW50PVwic3BhY2UtYXJvdW5kXCJgLiAqL1xuICAgICdhbGlnbi1jb250ZW50LXhzLXNwYWNlLWFyb3VuZCc6IHtcbiAgICAgIGFsaWduQ29udGVudDogJ3NwYWNlLWFyb3VuZCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBganVzdGlmeT1cImNlbnRlclwiYC4gKi9cbiAgICAnanVzdGlmeS14cy1jZW50ZXInOiB7XG4gICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcidcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBganVzdGlmeT1cImZsZXgtZW5kXCJgLiAqL1xuICAgICdqdXN0aWZ5LXhzLWZsZXgtZW5kJzoge1xuICAgICAganVzdGlmeUNvbnRlbnQ6ICdmbGV4LWVuZCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBganVzdGlmeT1cInNwYWNlLWJldHdlZW5cImAuICovXG4gICAgJ2p1c3RpZnkteHMtc3BhY2UtYmV0d2Vlbic6IHtcbiAgICAgIGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYmV0d2VlbidcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBganVzdGlmeT1cInNwYWNlLWFyb3VuZFwiYC4gKi9cbiAgICAnanVzdGlmeS14cy1zcGFjZS1hcm91bmQnOiB7XG4gICAgICBqdXN0aWZ5Q29udGVudDogJ3NwYWNlLWFyb3VuZCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBganVzdGlmeT1cInNwYWNlLWV2ZW5seVwiYC4gKi9cbiAgICAnanVzdGlmeS14cy1zcGFjZS1ldmVubHknOiB7XG4gICAgICBqdXN0aWZ5Q29udGVudDogJ3NwYWNlLWV2ZW5seSdcbiAgICB9XG4gIH0sIGdlbmVyYXRlR3V0dGVyKHRoZW1lLCAneHMnKSwge30sIHRoZW1lLmJyZWFrcG9pbnRzLmtleXMucmVkdWNlKGZ1bmN0aW9uIChhY2N1bXVsYXRvciwga2V5KSB7XG4gICAgLy8gVXNlIHNpZGUgZWZmZWN0IG92ZXIgaW1tdXRhYmlsaXR5IGZvciBiZXR0ZXIgcGVyZm9ybWFuY2UuXG4gICAgZ2VuZXJhdGVHcmlkKGFjY3VtdWxhdG9yLCB0aGVtZSwga2V5KTtcbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH0sIHt9KSk7XG59O1xuXG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcblxudmFyIEdyaWQgPSBfcmVhY3QuZGVmYXVsdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChwcm9wcywgcmVmKSB7XG4gIHZhciBfcHJvcHMkYWxpZ25Db250ZW50ID0gcHJvcHMuYWxpZ25Db250ZW50LFxuICAgICAgYWxpZ25Db250ZW50ID0gX3Byb3BzJGFsaWduQ29udGVudCA9PT0gdm9pZCAwID8gJ3N0cmV0Y2gnIDogX3Byb3BzJGFsaWduQ29udGVudCxcbiAgICAgIF9wcm9wcyRhbGlnbkl0ZW1zID0gcHJvcHMuYWxpZ25JdGVtcyxcbiAgICAgIGFsaWduSXRlbXMgPSBfcHJvcHMkYWxpZ25JdGVtcyA9PT0gdm9pZCAwID8gJ3N0cmV0Y2gnIDogX3Byb3BzJGFsaWduSXRlbXMsXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgQ29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2RpdicgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgX3Byb3BzJGNvbnRhaW5lciA9IHByb3BzLmNvbnRhaW5lcixcbiAgICAgIGNvbnRhaW5lciA9IF9wcm9wcyRjb250YWluZXIgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGNvbnRhaW5lcixcbiAgICAgIF9wcm9wcyRkaXJlY3Rpb24gPSBwcm9wcy5kaXJlY3Rpb24sXG4gICAgICBkaXJlY3Rpb24gPSBfcHJvcHMkZGlyZWN0aW9uID09PSB2b2lkIDAgPyAncm93JyA6IF9wcm9wcyRkaXJlY3Rpb24sXG4gICAgICBfcHJvcHMkaXRlbSA9IHByb3BzLml0ZW0sXG4gICAgICBpdGVtID0gX3Byb3BzJGl0ZW0gPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGl0ZW0sXG4gICAgICBfcHJvcHMkanVzdGlmeSA9IHByb3BzLmp1c3RpZnksXG4gICAgICBqdXN0aWZ5ID0gX3Byb3BzJGp1c3RpZnkgPT09IHZvaWQgMCA/ICdmbGV4LXN0YXJ0JyA6IF9wcm9wcyRqdXN0aWZ5LFxuICAgICAgX3Byb3BzJGxnID0gcHJvcHMubGcsXG4gICAgICBsZyA9IF9wcm9wcyRsZyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkbGcsXG4gICAgICBfcHJvcHMkbWQgPSBwcm9wcy5tZCxcbiAgICAgIG1kID0gX3Byb3BzJG1kID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRtZCxcbiAgICAgIF9wcm9wcyRzbSA9IHByb3BzLnNtLFxuICAgICAgc20gPSBfcHJvcHMkc20gPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJHNtLFxuICAgICAgX3Byb3BzJHNwYWNpbmcgPSBwcm9wcy5zcGFjaW5nLFxuICAgICAgc3BhY2luZyA9IF9wcm9wcyRzcGFjaW5nID09PSB2b2lkIDAgPyAwIDogX3Byb3BzJHNwYWNpbmcsXG4gICAgICBfcHJvcHMkd3JhcCA9IHByb3BzLndyYXAsXG4gICAgICB3cmFwID0gX3Byb3BzJHdyYXAgPT09IHZvaWQgMCA/ICd3cmFwJyA6IF9wcm9wcyR3cmFwLFxuICAgICAgX3Byb3BzJHhsID0gcHJvcHMueGwsXG4gICAgICB4bCA9IF9wcm9wcyR4bCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkeGwsXG4gICAgICBfcHJvcHMkeHMgPSBwcm9wcy54cyxcbiAgICAgIHhzID0gX3Byb3BzJHhzID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyR4cyxcbiAgICAgIF9wcm9wcyR6ZXJvTWluV2lkdGggPSBwcm9wcy56ZXJvTWluV2lkdGgsXG4gICAgICB6ZXJvTWluV2lkdGggPSBfcHJvcHMkemVyb01pbldpZHRoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyR6ZXJvTWluV2lkdGgsXG4gICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKHByb3BzLCBbXCJhbGlnbkNvbnRlbnRcIiwgXCJhbGlnbkl0ZW1zXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcImNvbnRhaW5lclwiLCBcImRpcmVjdGlvblwiLCBcIml0ZW1cIiwgXCJqdXN0aWZ5XCIsIFwibGdcIiwgXCJtZFwiLCBcInNtXCIsIFwic3BhY2luZ1wiLCBcIndyYXBcIiwgXCJ4bFwiLCBcInhzXCIsIFwiemVyb01pbldpZHRoXCJdKTtcbiAgdmFyIGNsYXNzTmFtZSA9ICgwLCBfY2xzeC5kZWZhdWx0KShjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZVByb3AsIGNvbnRhaW5lciAmJiBbY2xhc3Nlcy5jb250YWluZXIsIHNwYWNpbmcgIT09IDAgJiYgY2xhc3Nlc1tcInNwYWNpbmcteHMtXCIuY29uY2F0KFN0cmluZyhzcGFjaW5nKSldXSwgaXRlbSAmJiBjbGFzc2VzLml0ZW0sIHplcm9NaW5XaWR0aCAmJiBjbGFzc2VzLnplcm9NaW5XaWR0aCwgZGlyZWN0aW9uICE9PSAncm93JyAmJiBjbGFzc2VzW1wiZGlyZWN0aW9uLXhzLVwiLmNvbmNhdChTdHJpbmcoZGlyZWN0aW9uKSldLCB3cmFwICE9PSAnd3JhcCcgJiYgY2xhc3Nlc1tcIndyYXAteHMtXCIuY29uY2F0KFN0cmluZyh3cmFwKSldLCBhbGlnbkl0ZW1zICE9PSAnc3RyZXRjaCcgJiYgY2xhc3Nlc1tcImFsaWduLWl0ZW1zLXhzLVwiLmNvbmNhdChTdHJpbmcoYWxpZ25JdGVtcykpXSwgYWxpZ25Db250ZW50ICE9PSAnc3RyZXRjaCcgJiYgY2xhc3Nlc1tcImFsaWduLWNvbnRlbnQteHMtXCIuY29uY2F0KFN0cmluZyhhbGlnbkNvbnRlbnQpKV0sIGp1c3RpZnkgIT09ICdmbGV4LXN0YXJ0JyAmJiBjbGFzc2VzW1wianVzdGlmeS14cy1cIi5jb25jYXQoU3RyaW5nKGp1c3RpZnkpKV0sIHhzICE9PSBmYWxzZSAmJiBjbGFzc2VzW1wiZ3JpZC14cy1cIi5jb25jYXQoU3RyaW5nKHhzKSldLCBzbSAhPT0gZmFsc2UgJiYgY2xhc3Nlc1tcImdyaWQtc20tXCIuY29uY2F0KFN0cmluZyhzbSkpXSwgbWQgIT09IGZhbHNlICYmIGNsYXNzZXNbXCJncmlkLW1kLVwiLmNvbmNhdChTdHJpbmcobWQpKV0sIGxnICE9PSBmYWxzZSAmJiBjbGFzc2VzW1wiZ3JpZC1sZy1cIi5jb25jYXQoU3RyaW5nKGxnKSldLCB4bCAhPT0gZmFsc2UgJiYgY2xhc3Nlc1tcImdyaWQteGwtXCIuY29uY2F0KFN0cmluZyh4bCkpXSk7XG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpKTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBjYW4ndCB1c2UgbmFtZWQgZnVuY3Rpb24gZXhwcmVzc2lvbiBzaW5jZSB0aGUgZnVuY3Rpb24gYm9keSByZWZlcmVuY2VzIGBHcmlkYFxuICAvLyB3aGljaCB3b3VsZCBwb2ludCB0byB0aGUgcmVuZGVyIGZ1bmN0aW9uIGluc3RlYWQgb2YgdGhlIGFjdHVhbCBjb21wb25lbnRcbiAgR3JpZC5kaXNwbGF5TmFtZSA9ICdGb3J3YXJkUmVmKEdyaWQpJztcbn1cblxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gR3JpZC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBgYWxpZ24tY29udGVudGAgc3R5bGUgcHJvcGVydHkuXG4gICAqIEl0J3MgYXBwbGllZCBmb3IgYWxsIHNjcmVlbiBzaXplcy5cbiAgICovXG4gIGFsaWduQ29udGVudDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnc3RyZXRjaCcsICdjZW50ZXInLCAnZmxleC1zdGFydCcsICdmbGV4LWVuZCcsICdzcGFjZS1iZXR3ZWVuJywgJ3NwYWNlLWFyb3VuZCddKSxcblxuICAvKipcbiAgICogRGVmaW5lcyB0aGUgYGFsaWduLWl0ZW1zYCBzdHlsZSBwcm9wZXJ0eS5cbiAgICogSXQncyBhcHBsaWVkIGZvciBhbGwgc2NyZWVuIHNpemVzLlxuICAgKi9cbiAgYWxpZ25JdGVtczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnZmxleC1zdGFydCcsICdjZW50ZXInLCAnZmxleC1lbmQnLCAnc3RyZXRjaCcsICdiYXNlbGluZSddKSxcblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IHdpbGwgaGF2ZSB0aGUgZmxleCAqY29udGFpbmVyKiBiZWhhdmlvci5cbiAgICogWW91IHNob3VsZCBiZSB3cmFwcGluZyAqaXRlbXMqIHdpdGggYSAqY29udGFpbmVyKi5cbiAgICovXG4gIGNvbnRhaW5lcjogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIGBmbGV4LWRpcmVjdGlvbmAgc3R5bGUgcHJvcGVydHkuXG4gICAqIEl0IGlzIGFwcGxpZWQgZm9yIGFsbCBzY3JlZW4gc2l6ZXMuXG4gICAqL1xuICBkaXJlY3Rpb246IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ3JvdycsICdyb3ctcmV2ZXJzZScsICdjb2x1bW4nLCAnY29sdW1uLXJldmVyc2UnXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCB3aWxsIGhhdmUgdGhlIGZsZXggKml0ZW0qIGJlaGF2aW9yLlxuICAgKiBZb3Ugc2hvdWxkIGJlIHdyYXBwaW5nICppdGVtcyogd2l0aCBhICpjb250YWluZXIqLlxuICAgKi9cbiAgaXRlbTogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIGBqdXN0aWZ5LWNvbnRlbnRgIHN0eWxlIHByb3BlcnR5LlxuICAgKiBJdCBpcyBhcHBsaWVkIGZvciBhbGwgc2NyZWVuIHNpemVzLlxuICAgKi9cbiAganVzdGlmeTogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnZmxleC1zdGFydCcsICdjZW50ZXInLCAnZmxleC1lbmQnLCAnc3BhY2UtYmV0d2VlbicsICdzcGFjZS1hcm91bmQnLCAnc3BhY2UtZXZlbmx5J10pLFxuXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBudW1iZXIgb2YgZ3JpZHMgdGhlIGNvbXBvbmVudCBpcyBnb2luZyB0byB1c2UuXG4gICAqIEl0J3MgYXBwbGllZCBmb3IgdGhlIGBsZ2AgYnJlYWtwb2ludCBhbmQgd2lkZXIgc2NyZWVucyBpZiBub3Qgb3ZlcnJpZGRlbi5cbiAgICovXG4gIGxnOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoW2ZhbHNlLCAnYXV0bycsIHRydWUsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTJdKSxcblxuICAvKipcbiAgICogRGVmaW5lcyB0aGUgbnVtYmVyIG9mIGdyaWRzIHRoZSBjb21wb25lbnQgaXMgZ29pbmcgdG8gdXNlLlxuICAgKiBJdCdzIGFwcGxpZWQgZm9yIHRoZSBgbWRgIGJyZWFrcG9pbnQgYW5kIHdpZGVyIHNjcmVlbnMgaWYgbm90IG92ZXJyaWRkZW4uXG4gICAqL1xuICBtZDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFtmYWxzZSwgJ2F1dG8nLCB0cnVlLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyXSksXG5cbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIG51bWJlciBvZiBncmlkcyB0aGUgY29tcG9uZW50IGlzIGdvaW5nIHRvIHVzZS5cbiAgICogSXQncyBhcHBsaWVkIGZvciB0aGUgYHNtYCBicmVha3BvaW50IGFuZCB3aWRlciBzY3JlZW5zIGlmIG5vdCBvdmVycmlkZGVuLlxuICAgKi9cbiAgc206IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbZmFsc2UsICdhdXRvJywgdHJ1ZSwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMl0pLFxuXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBzcGFjZSBiZXR3ZWVuIHRoZSB0eXBlIGBpdGVtYCBjb21wb25lbnQuXG4gICAqIEl0IGNhbiBvbmx5IGJlIHVzZWQgb24gYSB0eXBlIGBjb250YWluZXJgIGNvbXBvbmVudC5cbiAgICovXG4gIHNwYWNpbmc6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihTUEFDSU5HUyksXG5cbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIGBmbGV4LXdyYXBgIHN0eWxlIHByb3BlcnR5LlxuICAgKiBJdCdzIGFwcGxpZWQgZm9yIGFsbCBzY3JlZW4gc2l6ZXMuXG4gICAqL1xuICB3cmFwOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydub3dyYXAnLCAnd3JhcCcsICd3cmFwLXJldmVyc2UnXSksXG5cbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIG51bWJlciBvZiBncmlkcyB0aGUgY29tcG9uZW50IGlzIGdvaW5nIHRvIHVzZS5cbiAgICogSXQncyBhcHBsaWVkIGZvciB0aGUgYHhsYCBicmVha3BvaW50IGFuZCB3aWRlciBzY3JlZW5zLlxuICAgKi9cbiAgeGw6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbZmFsc2UsICdhdXRvJywgdHJ1ZSwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMl0pLFxuXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBudW1iZXIgb2YgZ3JpZHMgdGhlIGNvbXBvbmVudCBpcyBnb2luZyB0byB1c2UuXG4gICAqIEl0J3MgYXBwbGllZCBmb3IgYWxsIHRoZSBzY3JlZW4gc2l6ZXMgd2l0aCB0aGUgbG93ZXN0IHByaW9yaXR5LlxuICAgKi9cbiAgeHM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbZmFsc2UsICdhdXRvJywgdHJ1ZSwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMl0pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGl0IHNldHMgYG1pbi13aWR0aDogMGAgb24gdGhlIGl0ZW0uXG4gICAqIFJlZmVyIHRvIHRoZSBsaW1pdGF0aW9ucyBzZWN0aW9uIG9mIHRoZSBkb2N1bWVudGF0aW9uIHRvIGJldHRlciB1bmRlcnN0YW5kIHRoZSB1c2UgY2FzZS5cbiAgICovXG4gIHplcm9NaW5XaWR0aDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2xcbn0gOiB2b2lkIDA7XG52YXIgU3R5bGVkR3JpZCA9ICgwLCBfd2l0aFN0eWxlcy5kZWZhdWx0KShzdHlsZXMsIHtcbiAgbmFtZTogJ011aUdyaWQnXG59KShHcmlkKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIHJlcXVpcmVQcm9wID0gKDAsIF9yZXF1aXJlUHJvcEZhY3RvcnkuZGVmYXVsdCkoJ0dyaWQnKTtcbiAgU3R5bGVkR3JpZC5wcm9wVHlwZXMgPSAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBTdHlsZWRHcmlkLnByb3BUeXBlcywge1xuICAgIGFsaWduQ29udGVudDogcmVxdWlyZVByb3AoJ2NvbnRhaW5lcicpLFxuICAgIGFsaWduSXRlbXM6IHJlcXVpcmVQcm9wKCdjb250YWluZXInKSxcbiAgICBkaXJlY3Rpb246IHJlcXVpcmVQcm9wKCdjb250YWluZXInKSxcbiAgICBqdXN0aWZ5OiByZXF1aXJlUHJvcCgnY29udGFpbmVyJyksXG4gICAgbGc6IHJlcXVpcmVQcm9wKCdpdGVtJyksXG4gICAgbWQ6IHJlcXVpcmVQcm9wKCdpdGVtJyksXG4gICAgc206IHJlcXVpcmVQcm9wKCdpdGVtJyksXG4gICAgc3BhY2luZzogcmVxdWlyZVByb3AoJ2NvbnRhaW5lcicpLFxuICAgIHdyYXA6IHJlcXVpcmVQcm9wKCdjb250YWluZXInKSxcbiAgICB4czogcmVxdWlyZVByb3AoJ2l0ZW0nKSxcbiAgICB6ZXJvTWluV2lkdGg6IHJlcXVpcmVQcm9wKCdpdGVtJylcbiAgfSk7XG59XG5cbnZhciBfZGVmYXVsdCA9IFN0eWxlZEdyaWQ7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE5LCBXU08yIEluYy4gKGh0dHA6Ly93d3cud3NvMi5vcmcpIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogV1NPMiBJbmMuIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLFxuICogVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0XG4gKiBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7XG4gICAgRGlhbG9nLCBEaWFsb2dBY3Rpb25zLCBEaWFsb2dDb250ZW50LCBEaWFsb2dDb250ZW50VGV4dCwgRGlhbG9nVGl0bGUsXG59IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlJztcbmltcG9ydCBCdXR0b24gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvQnV0dG9uJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBGb3JtYXR0ZWRNZXNzYWdlIH0gZnJvbSAncmVhY3QtaW50bCc7XG5cbi8qKlxuICogUmVhY3QgY29tcG9uZW50IGZvciBoYW5kbGluZyBjb25maXJtYXRpb24gZGlhbG9nIGJveFxuICogQGNsYXNzIENvbmZpcm1EaWFsb2dcbiAqIEBleHRlbmRzIHtSZWFjdC5Db21wb25lbnR9XG4gKi9cbmNsYXNzIENvbmZpcm1EaWFsb2cgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICAgIC8qKlxuICAgICAqIElmIHVzZXIgY29uZmlybXMgdGhlIGFjdGlvbiBpbnZva2UgdGhlIGNhbGxiYWNrIHdpdGggdHJ1ZSBlbHNlIGZhbHNlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGFjdGlvbiBPbmUgb2YgQ29uZmlybURpYWxvZy5BY3Rpb24gYWN0aW9uc1xuICAgICAqIEBtZW1iZXJvZiBDb25maXJtRGlhbG9nXG4gICAgICovXG4gICAgaGFuZGxlUmVxdWVzdENsb3NlKGFjdGlvbikge1xuICAgICAgICBjb25zdCB7IGNhbGxiYWNrIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICBpZiAoYWN0aW9uID09PSBDb25maXJtRGlhbG9nLkFjdGlvbi5PSykge1xuICAgICAgICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWxsYmFjayhmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqIEByZXR1cm5zIHtSZWFjdC5Db21wb25lbnR9IENvbmZpcm1hdGlvbiBib3hcbiAgICAgKiBAbWVtYmVyb2YgQ29uZmlybURpYWxvZ1xuICAgICAqL1xuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgdGl0bGUsIG1lc3NhZ2UsIGxhYmVsQ2FuY2VsLCBsYWJlbE9rLCBvcGVuLFxuICAgICAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPERpYWxvZyBvcGVuPXtvcGVufSBvbkNsb3NlPXt0aGlzLmhhbmRsZVJlcXVlc3RDbG9zZX0+XG4gICAgICAgICAgICAgICAgPERpYWxvZ1RpdGxlPnt0aXRsZSB8fCA8Rm9ybWF0dGVkTWVzc2FnZSBpZD0nU2hhcmVkLkNvbmZpcm1EaWFsb2cucGxlYXNlLmNvbmZpcm0nIGRlZmF1bHRNZXNzYWdlPSdQbGVhc2UgQ29uZmlybScgLz59PC9EaWFsb2dUaXRsZT5cbiAgICAgICAgICAgICAgICA8RGlhbG9nQ29udGVudD5cbiAgICAgICAgICAgICAgICAgICAgPERpYWxvZ0NvbnRlbnRUZXh0PnttZXNzYWdlIHx8IDxGb3JtYXR0ZWRNZXNzYWdlIGlkPSdTaGFyZWQuQ29uZmlybURpYWxvZy5wbGVhc2UuY29uZmlybS5zdXJlJyBkZWZhdWx0TWVzc2FnZT0nQXJlIHlvdSBzdXJlPycgLz59PC9EaWFsb2dDb250ZW50VGV4dD5cbiAgICAgICAgICAgICAgICA8L0RpYWxvZ0NvbnRlbnQ+XG4gICAgICAgICAgICAgICAgPERpYWxvZ0FjdGlvbnM+XG4gICAgICAgICAgICAgICAgICAgIDxCdXR0b24gb25DbGljaz17KCkgPT4gdGhpcy5oYW5kbGVSZXF1ZXN0Q2xvc2UoQ29uZmlybURpYWxvZy5BY3Rpb24uQ0FOQ0VMKX0gY29sb3I9J3ByaW1hcnknPlxuICAgICAgICAgICAgICAgICAgICAgICAge2xhYmVsQ2FuY2VsIHx8IDxGb3JtYXR0ZWRNZXNzYWdlIGlkPSdTaGFyZWQuQ29uZmlybURpYWxvZy5jYW5jZWwnIGRlZmF1bHRNZXNzYWdlPSdDYW5jZWwnIC8+fVxuICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBvbkNsaWNrPXsoKSA9PiB0aGlzLmhhbmRsZVJlcXVlc3RDbG9zZShDb25maXJtRGlhbG9nLkFjdGlvbi5PSyl9IGNvbG9yPSdwcmltYXJ5Jz5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtsYWJlbE9rIHx8IDxGb3JtYXR0ZWRNZXNzYWdlIGlkPSdTaGFyZWQuQ29uZmlybURpYWxvZy5vaycgZGVmYXVsdE1lc3NhZ2U9J09LJyAvPn1cbiAgICAgICAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgPC9EaWFsb2dBY3Rpb25zPlxuICAgICAgICAgICAgPC9EaWFsb2c+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5Db25maXJtRGlhbG9nLnByb3BUeXBlcyA9IHtcbiAgICB0aXRsZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIG1lc3NhZ2U6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBsYWJlbENhbmNlbDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIGxhYmVsT2s6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBjYWxsYmFjazogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvcGVuOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxufTtcbkNvbmZpcm1EaWFsb2cuQWN0aW9uID0ge1xuICAgIE9LOiAnb2snLFxuICAgIENBTkNFTDogJ2NhbmNlbCcsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBDb25maXJtRGlhbG9nO1xuIiwiLypcbiAqIENvcHlyaWdodCAoYykgMjAxOSwgV1NPMiBJbmMuIChodHRwOi8vd3d3LndzbzIub3JnKSBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFdTTzIgSW5jLiBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSxcbiAqIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdFxuICogaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgd2l0aFN0eWxlcyB9IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcyc7XG5pbXBvcnQgeyBUZXh0RmllbGQsIEJ1dHRvbiwgVHlwb2dyYXBoeSB9IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlJztcbmltcG9ydCBHcmlkIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0dyaWQnO1xuaW1wb3J0IEZvcm1Db250cm9sIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0Zvcm1Db250cm9sJztcbmltcG9ydCBNZW51SXRlbSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9NZW51SXRlbSc7XG5pbXBvcnQgU2VsZWN0IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL1NlbGVjdCc7XG5pbXBvcnQgeyBGb3JtYXR0ZWRNZXNzYWdlLCBpbmplY3RJbnRsLCB9IGZyb20gJ3JlYWN0LWludGwnO1xuaW1wb3J0IEFsZXJ0IGZyb20gJy4uLy4uLy4uL1NoYXJlZC9BbGVydCc7XG5pbXBvcnQgQVBJIGZyb20gJy4uLy4uLy4uLy4uL2RhdGEvYXBpJztcblxuY29uc3Qgc3R5bGVzID0gdGhlbWUgPT4gKHtcbiAgICBjb21tZW50SWNvbjoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5nZXRDb250cmFzdFRleHQodGhlbWUucGFsZXR0ZS5iYWNrZ3JvdW5kLmRlZmF1bHQpLFxuICAgIH0sXG4gICAgY29udGVudDoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5nZXRDb250cmFzdFRleHQodGhlbWUucGFsZXR0ZS5iYWNrZ3JvdW5kLmRlZmF1bHQpLFxuICAgIH0sXG4gICAgY29udGVudFdyYXBwZXI6IHtcbiAgICAgICAgbWF4V2lkdGg6IHRoZW1lLmN1c3RvbS5jb250ZW50QXJlYVdpZHRoLFxuICAgICAgICBwYWRkaW5nTGVmdDogdGhlbWUuc3BhY2luZy51bml0ICogMixcbiAgICAgICAgcGFkZGluZ1RvcDogdGhlbWUuc3BhY2luZy51bmlnLFxuICAgICAgICBtYXJnaW5Ub3A6IHRoZW1lLnNwYWNpbmcudW5pdCAqIDIsXG4gICAgfSxcbiAgICB0ZXh0RmllbGQ6IHtcbiAgICAgICAgbWFyZ2luVG9wOiAwLFxuICAgICAgICB3aWR0aDogJzg4JScsXG4gICAgfSxcbn0pO1xuXG4vKipcbiAqIERpc3BsYXkgYSBjb21wb25lbnQgdG8gYWRkIGEgbmV3IGNvbW1lbnRcbiAqIEBjbGFzcyBDb21tbWVudEFkZFxuICogQGV4dGVuZHMge1JlYWN0LkNvbXBvbmVudH1cbiAqL1xuY2xhc3MgQ29tbWVudEFkZCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBDb21tZW50QWRkXG4gICAgICogQHBhcmFtIHsqfSBwcm9wcyBwcm9wZXJpZXMgcGFzc2VkIGJ5IHRoZSBwYXJlbnQgZWxlbWVudFxuICAgICAqIEBtZW1iZXJvZiBDb21tZW50QWRkXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgY29udGVudDogJycsXG4gICAgICAgICAgICBjdXJyZW50TGVuZ3RoOiAwLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmlucHV0Q2hhbmdlID0gdGhpcy5pbnB1dENoYW5nZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmhhbmRsZUNsaWNrQWRkQ29tbWVudCA9IHRoaXMuaGFuZGxlQ2xpY2tBZGRDb21tZW50LmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuaGFuZGxlQ2xpY2tDYW5jZWwgPSB0aGlzLmhhbmRsZUNsaWNrQ2FuY2VsLmJpbmQodGhpcyk7XG4gICAgICAgIC8vdGhpcy5oYW5kbGVDYXRlZ29yeUNoYW5nZSA9IHRoaXMuaGFuZGxlQ2F0ZWdvcnlDaGFuZ2UuYmluZCh0aGlzKTtcbiAgICAgICAgLy90aGlzLmZpbHRlckNvbW1lbnRUb0FkZFJlcGx5ID0gdGhpcy5maWx0ZXJDb21tZW50VG9BZGRSZXBseS5iaW5kKHRoaXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZXMgdGhlIGNvbW1lbnQgdGV4dCB3aGVuIGlucHV0IGNoYW5nZXNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0ge3RhcmdldH0gdGFyZ2V0IGVsZW1lbnRcbiAgICAgKiBAbWVtYmVyb2YgQ29tbWVudEFkZFxuICAgICAqL1xuICAgIGlucHV0Q2hhbmdlKHsgdGFyZ2V0IH0pIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGNvbnRlbnQ6IHRhcmdldC52YWx1ZSwgY3VycmVudExlbmd0aDogdGFyZ2V0LnZhbHVlLmxlbmd0aCB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIaWRlcyB0aGUgY29tcG9uZW50IHRvIGFkZCBhIG5ldyBjb21tZW50IHdoZW4gY2FuY2VsbGVkXG4gICAgICogQG1lbWJlcm9mIENvbW1lbnRBZGRcbiAgICAgKi9cbiAgICBoYW5kbGVDbGlja0NhbmNlbCgpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7Y29udGVudDpcIlwifSlcbiAgICAgICAgLy8gY29uc3QgeyB0b2dnbGVTaG93UmVwbHkgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIC8vIHRvZ2dsZVNob3dSZXBseSgpO1xuICAgIH1cblxuICAgIC8vIC8qKlxuICAgIC8vICAqIEZpbHRlcnMgdGhlIGNvbW1lbnQgdG8gYWRkIHRoZSByZXBseVxuICAgIC8vICAqIEBtZW1iZXJvZiBDb21tZW50QWRkXG4gICAgLy8gICovXG4gICAgLy8gZmlsdGVyQ29tbWVudFRvQWRkUmVwbHkoY29tbWVudFRvRmlsdGVyKSB7XG4gICAgLy8gICAgIGNvbnN0IHsgcGFyZW50Q29tbWVudElkIH0gPSB0aGlzLnByb3BzO1xuICAgIC8vICAgICByZXR1cm4gY29tbWVudFRvRmlsdGVyLmNvbW1lbnRJZCA9PT0gcGFyZW50Q29tbWVudElkO1xuICAgIC8vIH1cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZXMgYWRkaW5nIGEgbmV3IGNvbW1lbnRcbiAgICAgKiBAbWVtYmVyb2YgQ29tbWVudEFkZFxuICAgICAqL1xuICAgIGhhbmRsZUNsaWNrQWRkQ29tbWVudCgpIHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgYXBpSWQsIGFsbENvbW1lbnRzLCBjb21tZW50c1VwZGF0ZSwgaW50bCxcbiAgICAgICAgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIGNvbnN0IHsgY29udGVudCB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgY29uc3QgQXBpID0gbmV3IEFQSSgpO1xuICAgICAgICBjb25zdCBjb21tZW50ID0ge1xuICAgICAgICAgICAgY29udGVudDogY29udGVudC50cmltKCksXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gdG8gY2hlY2sgd2hldGhlciBhIHN0cmluZyBkb2VzIG5vdCBjb250YWluIG9ubHkgd2hpdGUgc3BhY2VzXG4gICAgICAgIGlmIChjb21tZW50LmNvbnRlbnQucmVwbGFjZSgvXFxzL2csICcnKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIEFwaS5hZGRDb21tZW50KGFwaUlkLCBjb21tZW50KVxuICAgICAgICAgICAgICAgIC50aGVuKChuZXdDb21tZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBjb250ZW50OiAnJ30pO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhZGRlZENvbW1lbnQgPSBuZXdDb21tZW50LmJvZHk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIChwYXJlbnRDb21tZW50SWQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIGFsbENvbW1lbnRzLnB1c2goYWRkZWRDb21tZW50KTtcbiAgICAgICAgICAgICAgICAgICAgLy8gfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIGNvbnN0IGluZGV4ID0gYWxsQ29tbWVudHMuZmluZEluZGV4KHRoaXMuZmlsdGVyQ29tbWVudFRvQWRkUmVwbHkpO1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgYWxsQ29tbWVudHNbaW5kZXhdLnJlcGxpZXMucHVzaChhZGRlZENvbW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgdG9nZ2xlU2hvd1JlcGx5KCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICAgICAgYWxsQ29tbWVudHMucHVzaChhZGRlZENvbW1lbnQpXG4gICAgICAgICAgICAgICAgICAgIGNvbW1lbnRzVXBkYXRlKGFsbENvbW1lbnRzKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnJvci5yZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgQWxlcnQuZXJyb3IoZXJyb3IucmVzcG9uc2UuYm9keS5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEFsZXJ0LmVycm9yKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGwuZm9ybWF0TWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnU29tZXRoaW5nIHdlbnQgd3Jvbmcgd2hpbGUgYWRkaW5nIHRoZSBjb21tZW50JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6ICdBcGlzLkRldGFpbHMuQ29tbWVudHMuQ29tbWVudEFkZC5zb21ldGhpbmcud2VudC53cm9uZycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBBbGVydC5lcnJvcihcbiAgICAgICAgICAgICAgICBpbnRsLmZvcm1hdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ1lvdSBjYW5ub3QgZW50ZXIgYSBibGFuayBjb21tZW50JyxcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICdBcGlzLkRldGFpbHMuQ29tbWVudHMuQ29tbWVudEFkZC5lcnJvci5ibGFuay5jb21tZW50JyxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGN1cnJlbnRMZW5ndGg6IDAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVuZGVyIG1ldGhvZCBvZiB0aGUgY29tcG9uZW50XG4gICAgICogQHJldHVybnMge1JlYWN0LkNvbXBvbmVudH0gQ29tbWVudCBodG1sIGNvbXBvbmVudFxuICAgICAqIEBtZW1iZXJvZiBDb21tZW50QWRkXG4gICAgICovXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBjbGFzc2VzLCBjYW5jZWxCdXR0b24sIHRoZW1lLCBpbnRsLFxuICAgICAgICB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgY29uc3QgeyBjb250ZW50LCBjdXJyZW50TGVuZ3RoIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPEdyaWQgY29udGFpbmVyIHNwYWNpbmc9ezN9IGNsYXNzTmFtZT17Y2xhc3Nlcy5jb250ZW50V3JhcHBlcn0+XG4gICAgICAgICAgICAgICAgPEdyaWQgaXRlbSB4cyB6ZXJvTWluV2lkdGg+XG4gICAgICAgICAgICAgICAgICAgIDxUZXh0RmllbGRcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkPSdzdGFuZGFyZC1tdWx0aWxpbmUtZmxleGlibGUnXG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRvRm9jdXNcbiAgICAgICAgICAgICAgICAgICAgICAgIG11bHRpbGluZVxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzLnRleHRGaWVsZH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbj0nbm9ybWFsJ1xuICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9e2ludGwuZm9ybWF0TWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdXcml0ZSBhIGNvbW1lbnQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiAnQXBpcy5EZXRhaWxzLkNvbW1lbnRzLkNvbW1lbnRBZGQud3JpdGUuY29tbWVudC5oZWxwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRQcm9wcz17eyBtYXhMZW5ndGg6IHRoZW1lLmN1c3RvbS5tYXhDb21tZW50TGVuZ3RoIH19XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17Y29udGVudH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmlucHV0Q2hhbmdlfVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeSBjbGFzc05hbWU9e2NsYXNzZXMuY29udGVudH0gYWxpZ249J3JpZ2h0Jz5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtjdXJyZW50TGVuZ3RoICsgJy8nICsgdGhlbWUuY3VzdG9tLm1heENvbW1lbnRMZW5ndGh9XG4gICAgICAgICAgICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgICAgICAgICAgPEdyaWQgY29udGFpbmVyIHNwYWNpbmc9ezF9PlxuICAgICAgICAgICAgICAgICAgICAgICAgPEdyaWQgaXRlbT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIHZhcmlhbnQ9J2NvbnRhaW5lZCcgY29sb3I9J3ByaW1hcnknIG9uQ2xpY2s9eygpID0+IHRoaXMuaGFuZGxlQ2xpY2tBZGRDb21tZW50KCl9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Rm9ybWF0dGVkTWVzc2FnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9J0FwaXMuRGV0YWlscy5Db21tZW50cy5Db21tZW50QWRkLmJ0bi5hZGQuY29tbWVudCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlPSdBZGQgQ29tbWVudCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvR3JpZD5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtjYW5jZWxCdXR0b24gJiYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxHcmlkIGl0ZW0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b24gb25DbGljaz17KCkgPT4gdGhpcy5oYW5kbGVDbGlja0NhbmNlbCgpfSBjbGFzc05hbWU9e2NsYXNzZXMuYnV0dG9ufT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxGb3JtYXR0ZWRNZXNzYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9J0FwaXMuRGV0YWlscy5Db21tZW50cy5Db21tZW50QWRkLmJ0bi5jYW5jZWwnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U9J0NhbmNlbCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvR3JpZD5cbiAgICAgICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICAgIDwvR3JpZD5cbiAgICAgICAgICAgICAgICA8L0dyaWQ+XG4gICAgICAgICAgICA8L0dyaWQ+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5Db21tZW50QWRkLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBwYXJlbnRDb21tZW50SWQ6IG51bGwsXG4gICAgdG9nZ2xlU2hvd1JlcGx5OiBudWxsLFxuICAgIGNvbW1lbnRzVXBkYXRlOiBudWxsLFxufTtcblxuQ29tbWVudEFkZC5wcm9wVHlwZXMgPSB7XG4gICAgY2xhc3NlczogUHJvcFR5cGVzLmluc3RhbmNlT2YoT2JqZWN0KS5pc1JlcXVpcmVkLFxuICAgIGNhbmNlbEJ1dHRvbjogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgICBhcGlJZDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIHBhcmVudENvbW1lbnRJZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0b2dnbGVTaG93UmVwbHk6IFByb3BUeXBlcy5mdW5jLFxuICAgIGNvbW1lbnRzVXBkYXRlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBhbGxDb21tZW50czogUHJvcFR5cGVzLmluc3RhbmNlT2YoQXJyYXkpLmlzUmVxdWlyZWQsXG4gICAgaW50bDogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgZm9ybWF0TWVzc2FnZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgfSkuaXNSZXF1aXJlZCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGluamVjdEludGwod2l0aFN0eWxlcyhzdHlsZXMsIHsgd2l0aFRoZW1lOiB0cnVlIH0pKENvbW1lbnRBZGQpKTtcbiIsIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTksIFdTTzIgSW5jLiAoaHR0cDovL3d3dy53c28yLm9yZykgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBXU08yIEluYy4gbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsXG4gKiBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHRcbiAqIGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IHdpdGhTdHlsZXMgfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMnO1xuaW1wb3J0IHsgRm9ybWF0dGVkTWVzc2FnZSwgaW5qZWN0SW50bCwgfSBmcm9tICdyZWFjdC1pbnRsJztcbmltcG9ydCB7IFRleHRGaWVsZCwgQnV0dG9uLCBUeXBvZ3JhcGh5IH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUnO1xuaW1wb3J0IEZvcm1Db250cm9sIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0Zvcm1Db250cm9sJztcbmltcG9ydCBNZW51SXRlbSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9NZW51SXRlbSc7XG5pbXBvcnQgU2VsZWN0IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL1NlbGVjdCc7XG5pbXBvcnQgR3JpZCBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9HcmlkJztcbmltcG9ydCBBbGVydCBmcm9tICcuLi8uLi8uLi9TaGFyZWQvQWxlcnQnO1xuaW1wb3J0IEFQSSBmcm9tICcuLi8uLi8uLi8uLi9kYXRhL2FwaSc7XG5cbmNvbnN0IHN0eWxlcyA9IHRoZW1lID0+ICh7XG4gICAgdGV4dEZpZWxkOiB7XG4gICAgICAgIG1hcmdpblRvcDogMCxcbiAgICAgICAgd2lkdGg6ICc4Ny41JScsXG4gICAgfSxcbiAgICBjb250ZW50V3JhcHBlcjoge1xuICAgICAgICBtYXhXaWR0aDogdGhlbWUuY3VzdG9tLmNvbnRlbnRBcmVhV2lkdGgsXG4gICAgICAgIHBhZGRpbmdMZWZ0OiB0aGVtZS5zcGFjaW5nLnVuaXQgKiAyLFxuICAgICAgICBwYWRkaW5nVG9wOiB0aGVtZS5zcGFjaW5nLnVuaWcsXG4gICAgICAgIG1hcmdpblRvcDogdGhlbWUuc3BhY2luZy51bml0ICogMixcbiAgICB9LFxuICAgIGNhdGVnb3J5OiB7XG4gICAgICAgIHdpZHRoOiAnMTIlJyxcbiAgICAgICAgbWFyZ2luUmlnaHQ6ICcwLjUlJyxcbiAgICB9LFxufSk7XG5cbi8qKlxuICogRGlzcGxheSBhIGNvbXBvbmVudCB0byBlZGl0IGEgY29tbWVudFxuICogQGNsYXNzIENvbW1tZW50RWRpdFxuICogQGV4dGVuZHMge1JlYWN0LkNvbXBvbmVudH1cbiAqL1xuY2xhc3MgQ29tbWVudEVkaXQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgQ29tbWVudEVkaXRcbiAgICAgKiBAcGFyYW0geyp9IHByb3BzIHByb3BlcmllcyBwYXNzZWQgYnkgdGhlIHBhcmVudCBlbGVtZW50XG4gICAgICogQG1lbWJlcm9mIENvbW1lbnRFZGl0XG4gICAgICovXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgY29tbWVudFRleHQ6ICcnLFxuICAgICAgICAgICAgY2F0ZWdvcnk6ICcnLFxuICAgICAgICAgICAgY3VycmVudExlbmd0aDogMCxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5pbnB1dENoYW5nZSA9IHRoaXMuaW5wdXRDaGFuZ2UuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5oYW5kbGVDYXRlZ29yeUNoYW5nZSA9IHRoaXMuaGFuZGxlQ2F0ZWdvcnlDaGFuZ2UuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5oYW5kbGVDbGlja1VwZGF0ZUNvbW1lbnQgPSB0aGlzLmhhbmRsZUNsaWNrVXBkYXRlQ29tbWVudC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmhhbmRsZUNsaWNrQ2FuY2VsID0gdGhpcy5oYW5kbGVDbGlja0NhbmNlbC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmZpbHRlckNvbW1lbnRUb1VwZGF0ZSA9IHRoaXMuZmlsdGVyQ29tbWVudFRvVXBkYXRlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuZmlsdGVyQ29tbWVudFRvVXBkYXRlUmVwbHkgPSB0aGlzLmZpbHRlckNvbW1lbnRUb1VwZGF0ZVJlcGx5LmJpbmQodGhpcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG1lbWJlcm9mIENvbW1lbnRzXG4gICAgICovXG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIGNvbnN0IHsgY29tbWVudCB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBjb21tZW50VGV4dDogY29tbWVudC5jb21tZW50VGV4dCxcbiAgICAgICAgICAgIGNhdGVnb3J5OiBjb21tZW50LmNhdGVnb3J5LFxuICAgICAgICAgICAgY3VycmVudExlbmd0aDogY29tbWVudC5jb21tZW50VGV4dC5sZW5ndGgsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZXMgdGhlIGNvbW1lbnQgdGV4dCB3aGVuIGlucHV0IGNoYW5nZXNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0ge3RhcmdldH0gdGFyZ2V0IGVsZW1lbnRcbiAgICAgKiBAbWVtYmVyb2YgQ29tbWVudEVkaXRcbiAgICAgKi9cbiAgICBpbnB1dENoYW5nZSh7IHRhcmdldCB9KSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBjb21tZW50VGV4dDogdGFyZ2V0LnZhbHVlLCBjdXJyZW50TGVuZ3RoOiB0YXJnZXQudmFsdWUubGVuZ3RoIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhpZGVzIHRoZSBjb21wb25lbnQgdG8gZWRpdCBhIGNvbW1lbnQgd2hlbiBjYW5jZWxsZWRcbiAgICAgKiBAbWVtYmVyb2YgQ29tbWVudEVkaXRcbiAgICAgKi9cbiAgICBoYW5kbGVDbGlja0NhbmNlbCgpIHtcbiAgICAgICAgY29uc3QgeyB0b2dnbGVTaG93RWRpdCwgY29tbWVudHNVcGRhdGUsIGFsbENvbW1lbnRzIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICB0b2dnbGVTaG93RWRpdCgpO1xuICAgICAgICBjb21tZW50c1VwZGF0ZShhbGxDb21tZW50cyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlcyBjYXRlZ29yeSB3aGVuIHRoZSBjYXRlZ29yeSBpcyBjaGFuZ2VkXG4gICAgICogQHBhcmFtIHthbnl9IGV2ZW50IERyb3AgZG93biBzZWxlY3QgZXZlbnRcbiAgICAgKiBAbWVtYmVyb2YgQ29tbWVudEVkaXRcbiAgICAgKi9cbiAgICBoYW5kbGVDYXRlZ29yeUNoYW5nZShldmVudCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgY2F0ZWdvcnk6IGV2ZW50LnRhcmdldC52YWx1ZSB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaWx0ZXJzIHRoZSBjb21tZW50IHRvIHVwZGF0ZVxuICAgICAqIEBtZW1iZXJvZiBDb21tZW50QWRkXG4gICAgICovXG4gICAgZmlsdGVyQ29tbWVudFRvVXBkYXRlKGNvbW1lbnRUb0ZpbHRlcikge1xuICAgICAgICBjb25zdCB7IGNvbW1lbnQgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIHJldHVybiBjb21tZW50VG9GaWx0ZXIuY29tbWVudElkID09PSBjb21tZW50LmNvbW1lbnRJZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaWx0ZXJzIHRoZSBjb21tZW50IHRvIHVwZGF0ZVxuICAgICAqIEBtZW1iZXJvZiBDb21tZW50QWRkXG4gICAgICovXG4gICAgZmlsdGVyQ29tbWVudFRvVXBkYXRlUmVwbHkoY29tbWVudFRvRmlsdGVyKSB7XG4gICAgICAgIGNvbnN0IHsgY29tbWVudCB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgcmV0dXJuIGNvbW1lbnRUb0ZpbHRlci5jb21tZW50SWQgPT09IGNvbW1lbnQucGFyZW50Q29tbWVudElkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZXMgdXBkYXRpbmcgYSBjb21tZW50XG4gICAgICogQG1lbWJlcm9mIENvbW1lbnRFZGl0XG4gICAgICovXG4gICAgaGFuZGxlQ2xpY2tVcGRhdGVDb21tZW50KCkge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBhcGlJZCwgY29tbWVudCwgYWxsQ29tbWVudHMsIHRvZ2dsZVNob3dFZGl0LCBjb21tZW50c1VwZGF0ZSwgaW50bCxcbiAgICAgICAgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIGNvbnN0IHsgY2F0ZWdvcnksIGNvbW1lbnRUZXh0IH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICBjb25zdCBBcGkgPSBuZXcgQVBJKCk7XG4gICAgICAgIGNvbnN0IGNvbW1lbnRUb0VkaXQgPSBjb21tZW50O1xuICAgICAgICBjb21tZW50VG9FZGl0LmNvbW1lbnRUZXh0ID0gY29tbWVudFRleHQudHJpbSgpO1xuICAgICAgICBjb21tZW50VG9FZGl0LmNhdGVnb3J5ID0gY2F0ZWdvcnk7XG5cbiAgICAgICAgLy8gdG8gY2hlY2sgd2hldGhlciBhIHN0cmluZyBkb2VzIG5vdCBjb250YWluIG9ubHkgd2hpdGVoaXMgc3BhY2VzXG4gICAgICAgIGlmIChjb21tZW50LmNvbW1lbnRUZXh0LnJlcGxhY2UoL1xccy9nLCAnJykubGVuZ3RoKSB7XG4gICAgICAgICAgICBBcGkudXBkYXRlQ29tbWVudChhcGlJZCwgY29tbWVudFRvRWRpdC5jb21tZW50SWQsIGNvbW1lbnRUb0VkaXQpXG4gICAgICAgICAgICAgICAgLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB1cGRhdGVkQ29tbWVudCA9IHJlc3VsdC5ib2R5O1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29tbWVudFRvRWRpdC5wYXJlbnRDb21tZW50SWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSBhbGxDb21tZW50cy5maW5kSW5kZXgodGhpcy5maWx0ZXJDb21tZW50VG9VcGRhdGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYWxsQ29tbWVudHNbaW5kZXhdLmNhdGVnb3J5ID0gdXBkYXRlZENvbW1lbnQuY2F0ZWdvcnk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxDb21tZW50c1tpbmRleF0uY29tbWVudFRleHQgPSB1cGRhdGVkQ29tbWVudC5jb21tZW50VGV4dDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gYWxsQ29tbWVudHMuZmluZEluZGV4KHRoaXMuZmlsdGVyQ29tbWVudFRvVXBkYXRlUmVwbHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVwbHlJbmRleCA9IGFsbENvbW1lbnRzW2luZGV4XS5yZXBsaWVzLmZpbmRJbmRleCh0aGlzLmZpbHRlckNvbW1lbnRUb1VwZGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxDb21tZW50c1tpbmRleF0ucmVwbGllc1tyZXBseUluZGV4XSA9IHVwZGF0ZWRDb21tZW50O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRvZ2dsZVNob3dFZGl0KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbW1lbnRzVXBkYXRlKGFsbENvbW1lbnRzKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnJvci5yZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgQWxlcnQuZXJyb3IoZXJyb3IucmVzcG9uc2UuYm9keS5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEFsZXJ0LmVycm9yKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGwuZm9ybWF0TWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnU29tZXRoaW5nIHdlbnQgd3Jvbmcgd2hpbGUgYWRkaW5nIHRoZSBjb21tZW50JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6ICdBcGlzLkRldGFpbHMuQ29tbWVudHMuQ29tbWVudEVkaXQuc29tZXRoaW5nLndlbnQud3JvbmcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgQWxlcnQuZXJyb3IoXG4gICAgICAgICAgICAgICAgaW50bC5mb3JtYXRNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdZb3UgY2Fubm90IGVudGVyIGEgYmxhbmsgY29tbWVudCcsXG4gICAgICAgICAgICAgICAgICAgIGlkOiAnQXBpcy5EZXRhaWxzLkNvbW1lbnRzLkNvbW1lbnRFZGl0LmJsYW5rLmNvbW1lbnQuZXJyb3InLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbmRlciBtZXRob2Qgb2YgdGhlIGNvbXBvbmVudFxuICAgICAqIEByZXR1cm5zIHtSZWFjdC5Db21wb25lbnR9IENvbW1lbnQgaHRtbCBjb21wb25lbnRcbiAgICAgKiBAbWVtYmVyb2YgQ29tbWVudEVkaXRcbiAgICAgKi9cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHsgY2xhc3NlcywgdGhlbWUsIGludGwgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIGNvbnN0IHsgY2F0ZWdvcnksIGNvbW1lbnRUZXh0LCBjdXJyZW50TGVuZ3RoIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8Rm9ybUNvbnRyb2wgY2xhc3NOYW1lPXtjbGFzc2VzLmNhdGVnb3J5fT5cbiAgICAgICAgICAgICAgICAgICAgPFNlbGVjdCB2YWx1ZT17Y2F0ZWdvcnl9IG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNhdGVnb3J5Q2hhbmdlfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxNZW51SXRlbSB2YWx1ZT0nR2VuZXJhbCc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEZvcm1hdHRlZE1lc3NhZ2UgaWQ9J0FwaXMuRGV0YWlscy5Db21tZW50cy5Db21tZW50RWRpdC5nZW5lcmFsJyBkZWZhdWx0TWVzc2FnZT0nR2VuZXJhbCcgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvTWVudUl0ZW0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8TWVudUl0ZW0gdmFsdWU9J0ZlYXR1cmUgUmVxdWVzdCc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEZvcm1hdHRlZE1lc3NhZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9J0FwaXMuRGV0YWlscy5Db21tZW50cy5Db21tZW50RWRpdC5mZWF0dXJlLnJlcXVlc3QnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlPSdGZWF0dXJlIFJlcXVlc3QnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvTWVudUl0ZW0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8TWVudUl0ZW0gdmFsdWU9J0J1ZyBSZXBvcnQnPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxGb3JtYXR0ZWRNZXNzYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSdBcGlzLkRldGFpbHMuQ29tbWVudHMuQ29tbWVudEVkaXQuYnVnLnJlcG9ydCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U9J0J1ZyBSZXBvcnQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvTWVudUl0ZW0+XG4gICAgICAgICAgICAgICAgICAgIDwvU2VsZWN0PlxuICAgICAgICAgICAgICAgIDwvRm9ybUNvbnRyb2w+XG4gICAgICAgICAgICAgICAgPFRleHRGaWVsZFxuICAgICAgICAgICAgICAgICAgICBpZD0nbXVsdGlsaW5lLXN0YXRpYydcbiAgICAgICAgICAgICAgICAgICAgYXV0b0ZvY3VzXG4gICAgICAgICAgICAgICAgICAgIG11bHRpbGluZVxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzZXMudGV4dEZpZWxkfVxuICAgICAgICAgICAgICAgICAgICBtYXJnaW49J25vcm1hbCdcbiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9e2ludGwuZm9ybWF0TWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ1dyaXRlIGEgY29tbWVudCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogJ0FwaXMuRGV0YWlscy5Db21tZW50cy5Db21tZW50RWRpdC53cml0ZS5hLmNvbW1lbnQnLFxuICAgICAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAgICAgICAgaW5wdXRQcm9wcz17eyBtYXhMZW5ndGg6IHRoZW1lLmN1c3RvbS5tYXhDb21tZW50TGVuZ3RoIH19XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlPXtjb21tZW50VGV4dH1cbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaW5wdXRDaGFuZ2V9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeSBjbGFzc05hbWU9e2NsYXNzZXMuY29tbWVudFRleHR9IGFsaWduPSdyaWdodCc+XG4gICAgICAgICAgICAgICAgICAgIHtjdXJyZW50TGVuZ3RoICsgJy8nICsgdGhlbWUuY3VzdG9tLm1heENvbW1lbnRMZW5ndGh9XG4gICAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICAgIDxHcmlkIGNvbnRhaW5lciBzcGFjaW5nPXsxfT5cbiAgICAgICAgICAgICAgICAgICAgPEdyaWQgaXRlbT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b24gdmFyaWFudD0nY29udGFpbmVkJyBjb2xvcj0ncHJpbWFyeScgb25DbGljaz17KCkgPT4gdGhpcy5oYW5kbGVDbGlja1VwZGF0ZUNvbW1lbnQoKX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEZvcm1hdHRlZE1lc3NhZ2UgaWQ9J0FwaXMuRGV0YWlscy5Db21tZW50cy5Db21tZW50RWRpdC5idG4uc2F2ZScgZGVmYXVsdE1lc3NhZ2U9J1NhdmUnIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPC9HcmlkPlxuICAgICAgICAgICAgICAgICAgICA8R3JpZCBpdGVtPlxuICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBvbkNsaWNrPXsoKSA9PiB0aGlzLmhhbmRsZUNsaWNrQ2FuY2VsKCl9IGNsYXNzTmFtZT17Y2xhc3Nlcy5idXR0b259PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxGb3JtYXR0ZWRNZXNzYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSdBcGlzLkRldGFpbHMuQ29tbWVudHMuQ29tbWVudEVkaXQuYnRuLmNhbmNlbCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U9J0NhbmNlbCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDwvR3JpZD5cbiAgICAgICAgICAgICAgICA8L0dyaWQ+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cbkNvbW1lbnRFZGl0LnByb3BUeXBlcyA9IHtcbiAgICBjbGFzc2VzOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihPYmplY3QpLmlzUmVxdWlyZWQsXG4gICAgYXBpSWQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBhbGxDb21tZW50czogUHJvcFR5cGVzLmluc3RhbmNlT2YoQXJyYXkpLmlzUmVxdWlyZWQsXG4gICAgY29tbWVudHNVcGRhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdG9nZ2xlU2hvd0VkaXQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgY29tbWVudDogUHJvcFR5cGVzLmluc3RhbmNlT2YoT2JqZWN0KS5pc1JlcXVpcmVkLFxuICAgIGludGw6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICAgIGZvcm1hdE1lc3NhZ2U6IFByb3BUeXBlcy5mdW5jLFxuICAgIH0pLmlzUmVxdWlyZWQsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBpbmplY3RJbnRsKHdpdGhTdHlsZXMoc3R5bGVzLCB7IHdpdGhUaGVtZTogdHJ1ZSB9KShDb21tZW50RWRpdCkpO1xuIiwiLypcbiAqIENvcHlyaWdodCAoYykgMjAxOSwgV1NPMiBJbmMuIChodHRwOi8vd3d3LndzbzIub3JnKSBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFdTTzIgSW5jLiBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSxcbiAqIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdFxuICogaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEdyaWQgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvR3JpZC9HcmlkJztcbmltcG9ydCB7IFR5cG9ncmFwaHkgfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZSc7XG5pbXBvcnQgeyB3aXRoU3R5bGVzIH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzJztcbmltcG9ydCB7IEZvcm1hdHRlZE1lc3NhZ2UgfSBmcm9tICdyZWFjdC1pbnRsJztcbmltcG9ydCBWZXJ0aWNhbERpdmlkZXIgZnJvbSAnLi4vLi4vLi4vU2hhcmVkL1ZlcnRpY2FsRGl2aWRlcic7XG5pbXBvcnQgQXV0aE1hbmFnZXIgZnJvbSAnLi4vLi4vLi4vLi4vZGF0YS9BdXRoTWFuYWdlcic7XG5cbmNvbnN0IHN0eWxlcyA9IHRoZW1lID0+ICh7XG4gICAgbGluazoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5nZXRDb250cmFzdFRleHQodGhlbWUucGFsZXR0ZS5iYWNrZ3JvdW5kLmRlZmF1bHQpLFxuICAgICAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICB9LFxuICAgIHRpbWU6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuZ2V0Q29udHJhc3RUZXh0KHRoZW1lLnBhbGV0dGUuYmFja2dyb3VuZC5kZWZhdWx0KSxcbiAgICAgICAgbWFyZ2luVG9wOiB0aGVtZS5zcGFjaW5nLnVuaXQgKiAwLjMsXG4gICAgfSxcbiAgICB2ZXJ0aWNhbFNwYWNlOiB7XG4gICAgICAgIG1hcmdpblRvcDogdGhlbWUuc3BhY2luZy51bml0ICogMC4yLFxuICAgIH0sXG4gICAgZGlzYWJsZToge1xuICAgICAgICBjb2xvcjogdGhlbWUuY3VzdG9tLmRpc2FibGVDb2xvcixcbiAgICB9LFxuICAgIGNvbW1lbnRJY29uOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmdldENvbnRyYXN0VGV4dCh0aGVtZS5wYWxldHRlLmJhY2tncm91bmQuZGVmYXVsdCksXG4gICAgfSxcbiAgICBjb21tZW50VGV4dDoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5nZXRDb250cmFzdFRleHQodGhlbWUucGFsZXR0ZS5iYWNrZ3JvdW5kLmRlZmF1bHQpLFxuICAgICAgICBtYXJnaW5Ub3A6IHRoZW1lLnNwYWNpbmcudW5pZyxcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgd2hpdGVTcGFjZTogJ3ByZS13cmFwJyxcbiAgICAgICAgb3ZlcmZsb3dXcmFwOiAnYnJlYWstd29yZCcsXG4gICAgfSxcbiAgICByb290OiB7XG4gICAgICAgIG1hcmdpblRvcDogdGhlbWUuc3BhY2luZy51bml0ICogMi41LFxuICAgIH0sXG4gICAgY29udGVudFdyYXBwZXI6IHtcbiAgICAgICAgbWF4V2lkdGg6IHRoZW1lLmN1c3RvbS5jb250ZW50QXJlYVdpZHRoLFxuICAgICAgICBwYWRkaW5nTGVmdDogdGhlbWUuc3BhY2luZy51bml0ICogMixcbiAgICAgICAgcGFkZGluZ1RvcDogdGhlbWUuc3BhY2luZy51bmlnLFxuICAgIH0sXG59KTtcblxuLyoqXG4gKiBDb21wb25lbnQgdG8gZGlzcGxheSBvcHRpb25zIG9mIHRoZSBjb21tZW50XG4gKiBAY2xhc3MgQ29tbWVudE9wdGlvbnNcbiAqIEBleHRlbmRzIHtSZWFjdC5Db21wb25lbnR9XG4gKi9cbmNsYXNzIENvbW1lbnRPcHRpb25zIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIENvbW1lbnRBZGRcbiAgICAgKiBAcGFyYW0geyp9IHByb3BzIHByb3BlcmllcyBwYXNzZWQgYnkgdGhlIHBhcmVudCBlbGVtZW50XG4gICAgICogQG1lbWJlcm9mIENvbW1lbnRBZGRcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7fTtcbiAgICAgICAgdGhpcy5zaG93QWRkQ29tbWVudCA9IHRoaXMuc2hvd0FkZENvbW1lbnQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5zaG93RWRpdENvbW1lbnQgPSB0aGlzLnNob3dFZGl0Q29tbWVudC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmhhbmRsZUNsaWNrT3BlbiA9IHRoaXMuaGFuZGxlQ2xpY2tPcGVuLmJpbmQodGhpcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2hvd3MgdGhlIGNvbXBvbmVudCB0byBhZGQgYSBuZXcgY29tbWVudFxuICAgICAqIEBwYXJhbSB7YW55fSBpbmRleCBJbmRleCBvZiBjb21tZW50IGluIHRoZSBhcnJheVxuICAgICAqIEBtZW1iZXJvZiBDb21tZW50T3B0aW9uc1xuICAgICAqL1xuICAgIHNob3dBZGRDb21tZW50KGluZGV4KSB7XG4gICAgICAgIGNvbnN0IHsgZWRpdEluZGV4LCBzaG93QWRkQ29tbWVudCB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgaWYgKGVkaXRJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIHNob3dBZGRDb21tZW50KGluZGV4KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNob3dzIHRoZSBjb21wb25lbnQgdG8gZWRpdCBhIGNvbW1lbnRcbiAgICAgKiBAcGFyYW0ge2FueX0gaW5kZXggSW5kZXggb2YgY29tbWVudCBpbiB0aGUgYXJyYXlcbiAgICAgKiBAbWVtYmVyb2YgQ29tbWVudFxuICAgICAqL1xuICAgIHNob3dFZGl0Q29tbWVudChpbmRleCkge1xuICAgICAgICBjb25zdCB7IGVkaXRJbmRleCwgc2hvd0VkaXRDb21tZW50IH0gPSB0aGlzLnByb3BzO1xuICAgICAgICBpZiAoZWRpdEluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgc2hvd0VkaXRDb21tZW50KGluZGV4KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNob3dzIHRoZSBjb25maW1hdGlvbiBkaWFsb2cgdG8gZGVsZXRlIGEgY29tbWVudFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb21tZW50IENvbW1lbnQgdGhhdCBoYXMgdG8gYmUgZGVsZXRlZFxuICAgICAqIEBtZW1iZXJvZiBDb21tZW50XG4gICAgICovXG4gICAgaGFuZGxlQ2xpY2tPcGVuKGNvbW1lbnQpIHtcbiAgICAgICAgY29uc3QgeyBlZGl0SW5kZXgsIGhhbmRsZUNsaWNrT3BlbiB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgaWYgKGVkaXRJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIGhhbmRsZUNsaWNrT3Blbihjb21tZW50KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGRhdGUgYW5kIHRpbWUgaW4gYSBwYXJ0aWN1bGFyIGZvcm1hdFxuICAgICAqIEBwYXJhbSB7YW55fSB0aW1lc3RhbXAgVGltZXN0YW1wIHRoYXQgaGFzIHRvIGJlIGZvcm1hdHRlZFxuICAgICAqIEBtZW1iZXJvZiBDb21tZW50T3B0aW9uc1xuICAgICAqL1xuICAgIGRpc3BsYXlEYXRlKHRpbWVzdGFtcCkge1xuICAgICAgICBjb25zdCBsb2NhbERhdGUgPSBuZXcgRGF0ZSh0aW1lc3RhbXApO1xuICAgICAgICBjb25zdCBsb2NhbERhdGVTdHJpbmcgPSBsb2NhbERhdGUudG9Mb2NhbGVEYXRlU3RyaW5nKHVuZGVmaW5lZCwge1xuICAgICAgICAgICAgZGF5OiAnbnVtZXJpYycsXG4gICAgICAgICAgICBtb250aDogJ3Nob3J0JyxcbiAgICAgICAgICAgIHllYXI6ICdudW1lcmljJyxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGxvY2FsVGltZVN0cmluZyA9IGxvY2FsRGF0ZS50b0xvY2FsZVRpbWVTdHJpbmcodW5kZWZpbmVkLCB7XG4gICAgICAgICAgICBob3VyOiAnMi1kaWdpdCcsXG4gICAgICAgICAgICBtaW51dGU6ICcyLWRpZ2l0JyxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBsb2NhbERhdGVTdHJpbmcgKyAnICcgKyBsb2NhbFRpbWVTdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVuZGVyIG1ldGhvZCBvZiB0aGUgY29tcG9uZW50XG4gICAgICogQHJldHVybnMge1JlYWN0LkNvbXBvbmVudH0gQ29tbWVudCBodG1sIGNvbXBvbmVudFxuICAgICAqIEBtZW1iZXJvZiBDb21tZW50T3B0aW9uc1xuICAgICAqL1xuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgY2xhc3NlcywgY29tbWVudCwgZWRpdEluZGV4LCBpbmRleCwgdGhlbWUsXG4gICAgICAgIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPEdyaWQgY29udGFpbmVyIHNwYWNpbmc9ezF9IGNsYXNzTmFtZT17Y2xhc3Nlcy52ZXJ0aWNhbFNwYWNlfSBrZXk9e2NvbW1lbnQuY29tbWVudElkfT5cbiAgICAgICAgICAgICAgICB7Lyogb25seSB0aGUgY29tbWVudCBvd25lciBvciBhZG1pbiBjYW4gZGVsZXRlIGEgY29tbWVudCAqL31cbiAgICAgICAgICAgICAgICB7KGNvbW1lbnQuY3JlYXRlZEJ5ID09PSBBdXRoTWFuYWdlci5nZXRVc2VyKCkubmFtZVxuICAgICAgICAgICAgICAgICAgICB8fCBBdXRoTWFuYWdlci5nZXRVc2VyKCkubmFtZSA9PT0gdGhlbWUuY3VzdG9tLmFkbWluUm9sZSkgJiYgW1xuICAgICAgICAgICAgICAgICAgICAgICAgPEdyaWQgaXRlbSBrZXk9J2tleS1kZWxldGUnPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudD0nYSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtlZGl0SW5kZXggPT09IC0xID8gY2xhc3Nlcy5saW5rIDogY2xhc3Nlcy5kaXNhYmxlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB0aGlzLmhhbmRsZUNsaWNrT3Blbihjb21tZW50KX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxGb3JtYXR0ZWRNZXNzYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0nQXBpcy5EZXRhaWxzLkNvbW1lbnRzLkNvbW1lbnRPcHRpb25zLmRlbGV0ZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlPSdEZWxldGUnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9HcmlkPixcbiAgICAgICAgICAgICAgICAgICAgICAgIDxHcmlkIGl0ZW0ga2V5PSdrZXktZGVsZXRlLXZlcnRpY2FsLWRpdmlkZXInPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxWZXJ0aWNhbERpdmlkZXIgaGVpZ2h0PXsxNX0gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvR3JpZD4sXG4gICAgICAgICAgICAgICAgICAgIF19XG5cbiAgICAgICAgICAgICAgICB7Lyoge2NvbW1lbnQucGFyZW50Q29tbWVudElkID09IG51bGwgJiYgW1xuICAgICAgICAgICAgICAgICAgICA8R3JpZCBpdGVtIGtleT0na2V5LXJlcGx5Jz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50PSdhJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17ZWRpdEluZGV4ID09PSAtMSA/IGNsYXNzZXMubGluayA6IGNsYXNzZXMuZGlzYWJsZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB0aGlzLnNob3dBZGRDb21tZW50KGluZGV4KX1cbiAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Rm9ybWF0dGVkTWVzc2FnZSBpZD0nQXBpcy5EZXRhaWxzLkNvbW1lbnRzLkNvbW1lbnRPcHRpb25zLnJlcGx5JyBkZWZhdWx0TWVzc2FnZT0nUmVwbHknIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICAgICAgICAgIDwvR3JpZD4sXG4gICAgICAgICAgICAgICAgICAgIDxHcmlkIGl0ZW0ga2V5PSdrZXktcmVwbHktdmVydGljYWwtZGl2aWRlcic+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VmVydGljYWxEaXZpZGVyIGhlaWdodD17MTV9IC8+XG4gICAgICAgICAgICAgICAgICAgIDwvR3JpZD4sXG4gICAgICAgICAgICAgICAgXX0gKi99XG5cblxuXG4gICAgICAgICAgICAgICAgey8qIG9ubHkgdGhlIGNvbW1lbnQgb3duZXIgY2FuIG1vZGlmeSB0aGUgY29tbWVudCBmcm9tIHRoZSBleGFjdCBlbnRyeSBwb2ludCAqL31cbiAgICAgICAgICAgICAgICB7Y29tbWVudC5jcmVhdGVkQnkgPT09IEF1dGhNYW5hZ2VyLmdldFVzZXIoKS5uYW1lXG4gICAgICAgICAgICAgICAgICAgICYmIGNvbW1lbnQuZW50cnlQb2ludCA9PT0gJ0FQSVN0b3JlJyAmJiBbXG4gICAgICAgICAgICAgICAgICAgICAgICA8R3JpZCBpdGVtIGtleT0na2V5LWVkaXQnPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudD0nYSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtlZGl0SW5kZXggPT09IC0xID8gY2xhc3Nlcy5saW5rIDogY2xhc3Nlcy5kaXNhYmxlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB0aGlzLnNob3dFZGl0Q29tbWVudChpbmRleCl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Rm9ybWF0dGVkTWVzc2FnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9J0FwaXMuRGV0YWlscy5Db21tZW50cy5Db21tZW50T3B0aW9ucy5lZGl0J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U9J0VkaXQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9HcmlkPixcbiAgICAgICAgICAgICAgICAgICAgICAgIDxHcmlkIGl0ZW0ga2V5PSdrZXktZWRpdC12ZXJpY2FsLWRpdmlkZXInPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxWZXJ0aWNhbERpdmlkZXIgaGVpZ2h0PXsxNX0gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvR3JpZD4sXG4gICAgICAgICAgICAgICAgICAgIF19XG4gICAgICAgICAgICAgICAgPEdyaWQgaXRlbSBjbGFzc05hbWU9e2NsYXNzZXMudGltZX0+XG4gICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IGNvbXBvbmVudD0nYScgdmFyaWFudD0nY2FwdGlvbic+XG4gICAgICAgICAgICAgICAgICAgICAgICB7dGhpcy5kaXNwbGF5RGF0ZShjb21tZW50LmNyZWF0ZWRUaW1lKX1cbiAgICAgICAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICAgIDwvR3JpZD5cblxuICAgICAgICAgICAgICAgIHtlZGl0SW5kZXggPT09IGluZGV4XG4gICAgICAgICAgICAgICAgICAgID8gbnVsbFxuICAgICAgICAgICAgICAgICAgICA6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIDxHcmlkIGl0ZW0ga2V5PSdrZXktY2F0ZWdvcnktdmVydGljYWwtZGl2aWRlcic+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFZlcnRpY2FsRGl2aWRlciBoZWlnaHQ9ezE1fSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9HcmlkPixcbiAgICAgICAgICAgICAgICAgICAgICAgIDxHcmlkIGl0ZW0gY2xhc3NOYW1lPXtjbGFzc2VzLnRpbWV9IGtleT0na2V5LWNhdGVnb3J5Jz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeSBjb21wb25lbnQ9J2EnIHZhcmlhbnQ9J2NhcHRpb24nPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Y29tbWVudC5jYXRlZ29yeX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0dyaWQ+LFxuICAgICAgICAgICAgICAgICAgICBdfVxuICAgICAgICAgICAgPC9HcmlkPlxuICAgICAgICApO1xuICAgIH1cbn1cblxuQ29tbWVudE9wdGlvbnMuZGVmYXVsdFByb3BzID0ge1xuICAgIHNob3dBZGRDb21tZW50OiBudWxsLFxufTtcblxuQ29tbWVudE9wdGlvbnMucHJvcFR5cGVzID0ge1xuICAgIGNsYXNzZXM6IFByb3BUeXBlcy5pbnN0YW5jZU9mKE9iamVjdCkuaXNSZXF1aXJlZCxcbiAgICBlZGl0SW5kZXg6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgICBpbmRleDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICAgIGNvbW1lbnQ6IFByb3BUeXBlcy5pbnN0YW5jZU9mKE9iamVjdCkuaXNSZXF1aXJlZCxcbiAgICBoYW5kbGVDbGlja09wZW46IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgc2hvd0VkaXRDb21tZW50OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHNob3dBZGRDb21tZW50OiBQcm9wVHlwZXMuZnVuYyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7IHdpdGhUaGVtZTogdHJ1ZSB9KShDb21tZW50T3B0aW9ucyk7XG4iLCIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE5LCBXU08yIEluYy4gKGh0dHA6Ly93d3cud3NvMi5vcmcpIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogV1NPMiBJbmMuIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLFxuICogVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0XG4gKiBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBUeXBvZ3JhcGh5IH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvJztcbmltcG9ydCB7IHdpdGhTdHlsZXMgfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMnO1xuaW1wb3J0IEljb24gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvSWNvbic7XG5pbXBvcnQgR3JpZCBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9HcmlkJztcbmltcG9ydCB7IGluamVjdEludGwsIH0gZnJvbSAncmVhY3QtaW50bCc7XG5pbXBvcnQgQWxlcnQgZnJvbSAnLi4vLi4vLi4vU2hhcmVkL0FsZXJ0JztcbmltcG9ydCBDb25maXJtRGlhbG9nIGZyb20gJy4uLy4uLy4uL1NoYXJlZC9Db25maXJtRGlhbG9nJztcbmltcG9ydCBDb21tZW50RWRpdCBmcm9tICcuL0NvbW1lbnRFZGl0JztcbmltcG9ydCBDb21tZW50T3B0aW9ucyBmcm9tICcuL0NvbW1lbnRPcHRpb25zJztcbmltcG9ydCBBUEkgZnJvbSAnLi4vLi4vLi4vLi4vZGF0YS9hcGknO1xuXG5jb25zdCBzdHlsZXMgPSB0aGVtZSA9PiAoe1xuICAgIGxpbms6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuZ2V0Q29udHJhc3RUZXh0KHRoZW1lLnBhbGV0dGUuYmFja2dyb3VuZC5kZWZhdWx0KSxcbiAgICAgICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgfSxcbiAgICBjb21tZW50SWNvbjoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5nZXRDb250cmFzdFRleHQodGhlbWUucGFsZXR0ZS5iYWNrZ3JvdW5kLmRlZmF1bHQpLFxuICAgIH0sXG4gICAgY29tbWVudFRleHQ6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuZ2V0Q29udHJhc3RUZXh0KHRoZW1lLnBhbGV0dGUuYmFja2dyb3VuZC5kZWZhdWx0KSxcbiAgICAgICAgbWFyZ2luVG9wOiB0aGVtZS5zcGFjaW5nLnVuaWcsXG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIHdoaXRlU3BhY2U6ICdwcmUtd3JhcCcsXG4gICAgICAgIG92ZXJmbG93V3JhcDogJ2JyZWFrLXdvcmQnLFxuICAgIH0sXG4gICAgcm9vdDoge1xuICAgICAgICBtYXJnaW5Ub3A6IHRoZW1lLnNwYWNpbmcudW5pdCAqIDIuNSxcbiAgICB9LFxuICAgIGNvbnRlbnRXcmFwcGVyOiB7XG4gICAgICAgIG1heFdpZHRoOiB0aGVtZS5jdXN0b20uY29udGVudEFyZWFXaWR0aCxcbiAgICAgICAgcGFkZGluZ0xlZnQ6IHRoZW1lLnNwYWNpbmcudW5pdCAqIDIsXG4gICAgICAgIHBhZGRpbmdUb3A6IHRoZW1lLnNwYWNpbmcudW5pZyxcbiAgICB9LFxufSk7XG5cbi8qKlxuICogRGlzcGxheSBhIHBhcnRpY3VsYXIgY29tbWVudCBhbmQgZGV0YWlsc1xuICogQGNsYXNzIENvbW1lbnRSZXBseVxuICogQGV4dGVuZHMge1JlYWN0LkNvbXBvbmVudH1cbiAqL1xuY2xhc3MgQ29tbWVudFJlcGx5IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIENvbW1lbnRcbiAgICAgKiBAcGFyYW0geyp9IHByb3BzIHByb3BlcmllcyBwYXNzZWQgYnkgdGhlIHBhcmVudCBlbGVtZW50XG4gICAgICogQG1lbWJlcm9mIENvbW1lbnRSZXBseVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIG9wZW5EaWFsb2c6IGZhbHNlLFxuICAgICAgICAgICAgZWRpdEluZGV4OiAtMSxcbiAgICAgICAgICAgIGRlbGV0ZUNvbW1lbnQ6IG51bGwsXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaGFuZGxlQ2xpY2tEZWxldGVDb21tZW50ID0gdGhpcy5oYW5kbGVDbGlja0RlbGV0ZUNvbW1lbnQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5oYW5kbGVTaG93RWRpdCA9IHRoaXMuaGFuZGxlU2hvd0VkaXQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5oYW5kbGVDbGlja09wZW4gPSB0aGlzLmhhbmRsZUNsaWNrT3Blbi5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnNob3dFZGl0Q29tbWVudCA9IHRoaXMuc2hvd0VkaXRDb21tZW50LmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuaGFuZGxlQ29uZmlybURpYWxvZyA9IHRoaXMuaGFuZGxlQ29uZmlybURpYWxvZy5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmhhbmRsZUNsb3NlID0gdGhpcy5oYW5kbGVDbG9zZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmZpbHRlclJlbWFpbmluZ0NvbW1lbnRzID0gdGhpcy5maWx0ZXJSZW1haW5pbmdDb21tZW50cy5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmZpbHRlckNvbW1lbnRUb0RlbGV0ZSA9IHRoaXMuZmlsdGVyQ29tbWVudFRvRGVsZXRlLmJpbmQodGhpcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmlsdGVycyB0aGUgY29tbWVudHMgdG8gYmUgcmVtYWluZWRcbiAgICAgKiBAbWVtYmVyb2YgQ29tbWVudFJlcGx5XG4gICAgICovXG4gICAgZmlsdGVyUmVtYWluaW5nQ29tbWVudHMoY29tbWVudFRvRmlsdGVyKSB7XG4gICAgICAgIGNvbnN0IHsgZGVsZXRlQ29tbWVudCB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgcmV0dXJuIGNvbW1lbnRUb0ZpbHRlci5jb21tZW50SWQgIT09IGRlbGV0ZUNvbW1lbnQuY29tbWVudElkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpbHRlcnMgdGhlIGNvbW1lbnRzIHRvIGJlIGRlbGV0ZWRcbiAgICAgKiBAbWVtYmVyb2YgQ29tbWVudFJlcGx5XG4gICAgICovXG4gICAgZmlsdGVyQ29tbWVudFRvRGVsZXRlKGNvbW1lbnRUb0ZpbHRlcikge1xuICAgICAgICBjb25zdCB7IGRlbGV0ZUNvbW1lbnQgfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgIHJldHVybiBjb21tZW50VG9GaWx0ZXIuY29tbWVudElkID09PSBkZWxldGVDb21tZW50LnBhcmVudENvbW1lbnRJZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTaG93cyB0aGUgY29tcG9uZW50IHRvIGVkaXQgYSBjb21tZW50XG4gICAgICogQHBhcmFtIHthbnl9IGluZGV4IEluZGV4IG9mIGNvbW1lbnQgaW4gdGhlIGFycmF5XG4gICAgICogQG1lbWJlcm9mIENvbW1lbnRSZXBseVxuICAgICAqL1xuICAgIHNob3dFZGl0Q29tbWVudChpbmRleCkge1xuICAgICAgICBjb25zdCB7IGVkaXRJbmRleCB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgaWYgKGVkaXRJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBlZGl0SW5kZXg6IGluZGV4IH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGlkZXMgdGhlIGNvbXBvbmVudCB0byBlZGl0IGEgY29tbWVudFxuICAgICAqIEBwYXJhbSB7YW55fSBpbmRleCBJbmRleCBvZiBjb21tZW50IGluIHRoZSBhcnJheVxuICAgICAqIEBtZW1iZXJvZiBDb21tZW50UmVwbHlcbiAgICAgKi9cbiAgICBoYW5kbGVTaG93RWRpdCgpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGVkaXRJbmRleDogLTEgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2hvd3MgdGhlIGNvbmZpbWF0aW9uIGRpYWxvZyB0byBkZWxldGUgYSBjb21tZW50XG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNvbW1lbnQgQ29tbWVudCB0aGF0IGhhcyB0byBiZSBkZWxldGVkXG4gICAgICogQG1lbWJlcm9mIENvbW1lbnRSZXBseVxuICAgICAqL1xuICAgIGhhbmRsZUNsaWNrT3Blbihjb21tZW50KSB7XG4gICAgICAgIGNvbnN0IHsgZWRpdEluZGV4IH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICBpZiAoZWRpdEluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGRlbGV0ZUNvbW1lbnQ6IGNvbW1lbnQsIG9wZW5EaWFsb2c6IHRydWUgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIaWRlcyB0aGUgY29uZmltYXRpb24gZGlhbG9nIHRvIGRlbGV0ZSBhIGNvbW1lbnRcbiAgICAgKiBAbWVtYmVyb2YgQ29tbWVudFJlcGx5XG4gICAgICovXG4gICAgaGFuZGxlQ2xvc2UoKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBvcGVuRGlhbG9nOiBmYWxzZSB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIHRoZSBDb25maXJtIERpYWxvZ1xuICAgICAqIEBwYXJhbSB7Kn0gYm9vbCBwcm9wZXJpZXMgcGFzc2VkIGJ5IHRoZSBDb25maXJtIERpYWxvZ1xuICAgICAqIEBtZW1iZXJvZiBDb21tZW50UmVwbHlcbiAgICAgKi9cbiAgICBoYW5kbGVDb25maXJtRGlhbG9nKG1lc3NhZ2UpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UpIHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlQ2xpY2tEZWxldGVDb21tZW50KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZUNsb3NlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIGRlbGV0aW5nIGEgY29tbWVudFxuICAgICAqIEBtZW1iZXJvZiBDb21tZW50UmVwbHlcbiAgICAgKi9cbiAgICBoYW5kbGVDbGlja0RlbGV0ZUNvbW1lbnQoKSB7XG4gICAgICAgIGNvbnN0IEFwaSA9IG5ldyBBUEkoKTtcbiAgICAgICAgY29uc3QgeyBkZWxldGVDb21tZW50IH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBhcGlJZCwgYWxsQ29tbWVudHMsIGNvbW1lbnRzVXBkYXRlLCBpbnRsLFxuICAgICAgICB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgY29uc3QgY29tbWVudElkT2ZDb21tZW50VG9EZWxldGUgPSBkZWxldGVDb21tZW50LmNvbW1lbnRJZDtcbiAgICAgICAgY29uc3QgcGFyZW50Q29tbWVudElkT2ZDb21tZW50VG9EZWxldGUgPSBkZWxldGVDb21tZW50LnBhcmVudENvbW1lbnRJZDtcbiAgICAgICAgdGhpcy5oYW5kbGVDbG9zZSgpO1xuXG4gICAgICAgIEFwaS5kZWxldGVDb21tZW50KGFwaUlkLCBjb21tZW50SWRPZkNvbW1lbnRUb0RlbGV0ZSlcbiAgICAgICAgICAgIC50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocGFyZW50Q29tbWVudElkT2ZDb21tZW50VG9EZWxldGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZW1haW5pbmdDb21tZW50cyA9IGFsbENvbW1lbnRzLmZpbHRlcih0aGlzLmZpbHRlclJlbWFpbmluZ0NvbW1lbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgY29tbWVudHNVcGRhdGUocmVtYWluaW5nQ29tbWVudHMpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gYWxsQ29tbWVudHMuZmluZEluZGV4KHRoaXMuZmlsdGVyQ29tbWVudFRvRGVsZXRlKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVtYWluaW5nUmVwbGllcyA9IGFsbENvbW1lbnRzW2luZGV4XS5yZXBsaWVzLmZpbHRlcih0aGlzLmZpbHRlclJlbWFpbmluZ0NvbW1lbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgYWxsQ29tbWVudHNbaW5kZXhdLnJlcGxpZXMgPSByZW1haW5pbmdSZXBsaWVzO1xuICAgICAgICAgICAgICAgICAgICBjb21tZW50c1VwZGF0ZShhbGxDb21tZW50cyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IucmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgQWxlcnQuZXJyb3IoZXJyb3IucmVzcG9uc2UuYm9keS5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBBbGVydC5lcnJvcihcbiAgICAgICAgICAgICAgICAgICAgICAgIGludGwuZm9ybWF0TWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdTb21ldGhpbmcgd2VudCB3cm9uZyB3aGlsZSBkZWxldGluZyBjb21tZW50JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogJ0FwaXMuRGV0YWlscy5Db21tZW50cy5Db21tZW50UmVwbHkuc29tZXRoaW5nLndlbnQud3JvbmcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArICcgLSAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBjb21tZW50SWRPZkNvbW1lbnRUb0RlbGV0ZSxcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW5kZXIgbWV0aG9kIG9mIHRoZSBjb21wb25lbnRcbiAgICAgKiBAcmV0dXJucyB7UmVhY3QuQ29tcG9uZW50fSBDb21tZW50IGh0bWwgY29tcG9uZW50XG4gICAgICogQG1lbWJlcm9mIENvbW1lbnRSZXBseVxuICAgICAqL1xuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgY2xhc3NlcywgY29tbWVudHMsIGFwaUlkLCBhbGxDb21tZW50cywgY29tbWVudHNVcGRhdGUsIGludGwsXG4gICAgICAgIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICBjb25zdCB7IGVkaXRJbmRleCwgb3BlbkRpYWxvZyB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIGNvbW1lbnRzXG4gICAgICAgICAgICAgICAgJiYgY29tbWVudHMubWFwKChjb21tZW50LCBpbmRleCkgPT4gKFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGtleT17Y29tbWVudC5jb21tZW50SWQgKyAnLScgKyBpbmRleH0gY2xhc3NOYW1lPXtjbGFzc2VzLmNvbnRlbnRXcmFwcGVyfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxHcmlkIGNvbnRhaW5lciBzcGFjaW5nPXsxfSBjbGFzc05hbWU9e2NsYXNzZXMucm9vdH0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEdyaWQgaXRlbT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEljb24gY2xhc3NOYW1lPXtjbGFzc2VzLmNvbW1lbnRJY29ufT5hY2NvdW50X2JveDwvSWNvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0dyaWQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEdyaWQgaXRlbSB4cyB6ZXJvTWluV2lkdGg+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IG5vV3JhcCBjbGFzc05hbWU9e2NsYXNzZXMuY29tbWVudFRleHR9IHZhcmlhbnQ9J2JvZHkxJz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjb21tZW50LmNyZWF0ZWRCeX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtpbmRleCAhPT0gZWRpdEluZGV4ICYmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IGNsYXNzTmFtZT17Y2xhc3Nlcy5jb21tZW50VGV4dH0+e2NvbW1lbnQuY29tbWVudFRleHR9PC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtlZGl0SW5kZXggPT09IGluZGV4ICYmIG51bGx9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2luZGV4ID09PSBlZGl0SW5kZXggJiYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPENvbW1lbnRFZGl0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBpSWQ9e2FwaUlkfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbENvbW1lbnRzPXthbGxDb21tZW50c31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21tZW50c1VwZGF0ZT17Y29tbWVudHNVcGRhdGV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbWVudD17Y29tbWVudH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2dnbGVTaG93RWRpdD17dGhpcy5oYW5kbGVTaG93RWRpdH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxDb21tZW50T3B0aW9uc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3Nlcz17Y2xhc3Nlc31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1lbnQ9e2NvbW1lbnR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZGl0SW5kZXg9e2VkaXRJbmRleH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4PXtpbmRleH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dBZGRDb21tZW50PXt0aGlzLnNob3dBZGRDb21tZW50fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlQ2xpY2tPcGVuPXt0aGlzLmhhbmRsZUNsaWNrT3Blbn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dFZGl0Q29tbWVudD17dGhpcy5zaG93RWRpdENvbW1lbnR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9HcmlkPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9HcmlkPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgIDxDb25maXJtRGlhbG9nXG4gICAgICAgICAgICAgICAga2V5PSdrZXktZGlhbG9nJ1xuICAgICAgICAgICAgICAgIGxhYmVsQ2FuY2VsPSdDYW5jZWwnXG4gICAgICAgICAgICAgICAgdGl0bGU9J0NvbmZpcm0gRGVsZXRlJ1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U9e2ludGwuZm9ybWF0TWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGRlbGV0ZSB0aGlzIGNvbW1lbnQ/JyxcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICdBcGlzLkRldGFpbHMuQ29tbWVudHMuQ29tbWVudFJlcGx5LmFyZS55b3Uuc3VyZScsXG4gICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgICAgbGFiZWxPaz0nWWVzJ1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrPXt0aGlzLmhhbmRsZUNvbmZpcm1EaWFsb2d9XG4gICAgICAgICAgICAgICAgb3Blbj17b3BlbkRpYWxvZ31cbiAgICAgICAgICAgIC8+LFxuICAgICAgICBdO1xuICAgIH1cbn1cblxuQ29tbWVudFJlcGx5LmRlZmF1bHRQcm9wcyA9IHtcbiAgICBhcGk6IG51bGwsXG59O1xuXG5Db21tZW50UmVwbHkucHJvcFR5cGVzID0ge1xuICAgIGNsYXNzZXM6IFByb3BUeXBlcy5pbnN0YW5jZU9mKE9iamVjdCkuaXNSZXF1aXJlZCxcbiAgICBhcGlJZDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIGFsbENvbW1lbnRzOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihBcnJheSkuaXNSZXF1aXJlZCxcbiAgICBjb21tZW50c1VwZGF0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBjb21tZW50czogUHJvcFR5cGVzLmluc3RhbmNlT2YoQXJyYXkpLmlzUmVxdWlyZWQsXG4gICAgaW50bDogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgZm9ybWF0TWVzc2FnZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgfSkuaXNSZXF1aXJlZCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGluamVjdEludGwod2l0aFN0eWxlcyhzdHlsZXMpKENvbW1lbnRSZXBseSkpO1xuIiwiLypcbiAqIENvcHlyaWdodCAoYykgMjAxOSwgV1NPMiBJbmMuIChodHRwOi8vd3d3LndzbzIub3JnKSBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFdTTzIgSW5jLiBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSxcbiAqIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdFxuICogaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgVHlwb2dyYXBoeSB9IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlLyc7XG5pbXBvcnQgeyB3aXRoU3R5bGVzIH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzJztcbmltcG9ydCBJY29uIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0ljb24nO1xuaW1wb3J0IEdyaWQgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvR3JpZCc7XG5pbXBvcnQgeyBpbmplY3RJbnRsIH0gZnJvbSAncmVhY3QtaW50bCc7XG5pbXBvcnQgQWxlcnQgZnJvbSAnLi4vLi4vLi4vU2hhcmVkL0FsZXJ0JztcbmltcG9ydCBDb25maXJtRGlhbG9nIGZyb20gJy4uLy4uLy4uL1NoYXJlZC9Db25maXJtRGlhbG9nJztcbmltcG9ydCBDb21tZW50QWRkIGZyb20gJy4vQ29tbWVudEFkZCc7XG5pbXBvcnQgQ29tbWVudEVkaXQgZnJvbSAnLi9Db21tZW50RWRpdCc7XG5pbXBvcnQgQ29tbWVudE9wdGlvbnMgZnJvbSAnLi9Db21tZW50T3B0aW9ucyc7XG5pbXBvcnQgQ29tbWVudFJlcGx5IGZyb20gJy4vQ29tbWVudFJlcGx5JztcbmltcG9ydCBBUEkgZnJvbSAnLi4vLi4vLi4vLi4vZGF0YS9hcGknO1xuXG5jb25zdCBzdHlsZXMgPSB0aGVtZSA9PiAoe1xuICAgIGxpbms6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuZ2V0Q29udHJhc3RUZXh0KHRoZW1lLnBhbGV0dGUuYmFja2dyb3VuZC5kZWZhdWx0KSxcbiAgICAgICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgfSxcbiAgICBjb21tZW50SWNvbjoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5nZXRDb250cmFzdFRleHQodGhlbWUucGFsZXR0ZS5iYWNrZ3JvdW5kLmRlZmF1bHQpLFxuICAgIH0sXG4gICAgY29tbWVudFRleHQ6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuZ2V0Q29udHJhc3RUZXh0KHRoZW1lLnBhbGV0dGUuYmFja2dyb3VuZC5kZWZhdWx0KSxcbiAgICAgICAgbWFyZ2luVG9wOiB0aGVtZS5zcGFjaW5nLnVuaXQgKiAwLjgsXG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIHdoaXRlU3BhY2U6ICdwcmUtd3JhcCcsXG4gICAgICAgIG92ZXJmbG93V3JhcDogJ2JyZWFrLXdvcmQnLFxuICAgIH0sXG4gICAgcm9vdDoge1xuICAgICAgICBtYXJnaW5Ub3A6IHRoZW1lLnNwYWNpbmcudW5pdCAqIDIuNSxcbiAgICB9LFxuICAgIGNvbnRlbnRXcmFwcGVyOiB7XG4gICAgICAgIG1heFdpZHRoOiB0aGVtZS5jdXN0b20uY29udGVudEFyZWFXaWR0aCxcbiAgICAgICAgcGFkZGluZ0xlZnQ6IHRoZW1lLnNwYWNpbmcudW5pdCAqIDIsXG4gICAgICAgIHBhZGRpbmdUb3A6IHRoZW1lLnNwYWNpbmcudW5pZyxcbiAgICB9LFxufSk7XG5cbi8qKlxuICogRGlzcGxheSBhIHBhcnRpY3VsYXIgY29tbWVudCBhbmQgZGV0YWlsc1xuICogQGNsYXNzIENvbW1lbnRcbiAqIEBleHRlbmRzIHtSZWFjdC5Db21wb25lbnR9XG4gKi9cbmNsYXNzIENvbW1lbnQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgQ29tbWVudFxuICAgICAqIEBwYXJhbSB7Kn0gcHJvcHMgcHJvcGVyaWVzIHBhc3NlZCBieSB0aGUgcGFyZW50IGVsZW1lbnRcbiAgICAgKiBAbWVtYmVyb2YgQ29tbWVudFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIG9wZW5EaWFsb2c6IGZhbHNlLFxuICAgICAgICAgICAgcmVwbHlJbmRleDogLTEsXG4gICAgICAgICAgICBlZGl0SW5kZXg6IC0xLFxuICAgICAgICAgICAgZGVsZXRlQ29tbWVudDogbnVsbCxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5oYW5kbGVDbGlja0RlbGV0ZUNvbW1lbnQgPSB0aGlzLmhhbmRsZUNsaWNrRGVsZXRlQ29tbWVudC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmhhbmRsZVNob3dFZGl0ID0gdGhpcy5oYW5kbGVTaG93RWRpdC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmhhbmRsZVNob3dSZXBseSA9IHRoaXMuaGFuZGxlU2hvd1JlcGx5LmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuaGFuZGxlQ2xpY2tPcGVuID0gdGhpcy5oYW5kbGVDbGlja09wZW4uYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5zaG93QWRkQ29tbWVudCA9IHRoaXMuc2hvd0FkZENvbW1lbnQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5zaG93RWRpdENvbW1lbnQgPSB0aGlzLnNob3dFZGl0Q29tbWVudC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmhhbmRsZUNvbmZpcm1EaWFsb2cgPSB0aGlzLmhhbmRsZUNvbmZpcm1EaWFsb2cuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5oYW5kbGVDbG9zZSA9IHRoaXMuaGFuZGxlQ2xvc2UuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5maWx0ZXJSZW1haW5pbmdDb21tZW50cyA9IHRoaXMuZmlsdGVyUmVtYWluaW5nQ29tbWVudHMuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5maWx0ZXJDb21tZW50VG9EZWxldGUgPSB0aGlzLmZpbHRlckNvbW1lbnRUb0RlbGV0ZS5iaW5kKHRoaXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpbHRlcnMgdGhlIGNvbW1lbnRzIHRvIGJlIHJlbWFpbmVkXG4gICAgICogQG1lbWJlcm9mIENvbW1lbnRcbiAgICAgKi9cbiAgICBmaWx0ZXJSZW1haW5pbmdDb21tZW50cyhjb21tZW50VG9GaWx0ZXIpIHtcbiAgICAgICAgY29uc3QgeyBkZWxldGVDb21tZW50IH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICByZXR1cm4gY29tbWVudFRvRmlsdGVyLmlkICE9PSBkZWxldGVDb21tZW50LmlkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpbHRlcnMgdGhlIGNvbW1lbnRzIHRvIGJlIGRlbGV0ZWRcbiAgICAgKiBAbWVtYmVyb2YgQ29tbWVudFxuICAgICAqL1xuICAgIGZpbHRlckNvbW1lbnRUb0RlbGV0ZShjb21tZW50VG9GaWx0ZXIpIHtcbiAgICAgICAgY29uc3QgeyBkZWxldGVDb21tZW50IH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICAvLyByZXR1cm4gY29tbWVudFRvRmlsdGVyLmlkID09PSBkZWxldGVDb21tZW50LnBhcmVudENvbW1lbnRJZDtcbiAgICAgICAgcmV0dXJuIGNvbW1lbnRUb0ZpbHRlci5pZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTaG93cyB0aGUgY29tcG9uZW50IHRvIGFkZCBhIG5ldyBjb21tZW50XG4gICAgICogQHBhcmFtIHthbnl9IGluZGV4IEluZGV4IG9mIGNvbW1lbnQgaW4gdGhlIGFycmF5XG4gICAgICogQG1lbWJlcm9mIENvbW1lbnRcbiAgICAgKi9cbiAgICBzaG93QWRkQ29tbWVudChpbmRleCkge1xuICAgICAgICBjb25zdCB7IGVkaXRJbmRleCB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgaWYgKGVkaXRJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyByZXBseUluZGV4OiBpbmRleCB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNob3dzIHRoZSBjb21wb25lbnQgdG8gZWRpdCBhIGNvbW1lbnRcbiAgICAgKiBAcGFyYW0ge2FueX0gaW5kZXggSW5kZXggb2YgY29tbWVudCBpbiB0aGUgYXJyYXlcbiAgICAgKiBAbWVtYmVyb2YgQ29tbWVudFxuICAgICAqL1xuICAgIHNob3dFZGl0Q29tbWVudChpbmRleCkge1xuICAgICAgICBjb25zdCB7IGVkaXRJbmRleCB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgaWYgKGVkaXRJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBlZGl0SW5kZXg6IGluZGV4IH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGlkZXMgdGhlIGNvbXBvbmVudCB0byBlZGl0IGEgY29tbWVudFxuICAgICAqIEBwYXJhbSB7YW55fSBpbmRleCBJbmRleCBvZiBjb21tZW50IGluIHRoZSBhcnJheVxuICAgICAqIEBtZW1iZXJvZiBDb21tZW50XG4gICAgICovXG4gICAgaGFuZGxlU2hvd0VkaXQoKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBlZGl0SW5kZXg6IC0xIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhpZGVzIHRoZSBjb21wb25lbnQgdG8gYWRkIGEgbmV3IGNvbW1lbnRcbiAgICAgKiBAcGFyYW0ge2FueX0gaW5kZXggSW5kZXggb2YgY29tbWVudCBpbiB0aGUgYXJyYXlcbiAgICAgKiBAbWVtYmVyb2YgQ29tbWVudFxuICAgICAqL1xuICAgIGhhbmRsZVNob3dSZXBseSgpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHJlcGx5SW5kZXg6IC0xIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNob3dzIHRoZSBjb25maW1hdGlvbiBkaWFsb2cgdG8gZGVsZXRlIGEgY29tbWVudFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb21tZW50IENvbW1lbnQgdGhhdCBoYXMgdG8gYmUgZGVsZXRlZFxuICAgICAqIEBtZW1iZXJvZiBDb21tZW50XG4gICAgICovXG4gICAgaGFuZGxlQ2xpY2tPcGVuKGNvbW1lbnQpIHtcbiAgICAgICAgY29uc3QgeyBlZGl0SW5kZXggfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgIGlmIChlZGl0SW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgZGVsZXRlQ29tbWVudDogY29tbWVudCwgb3BlbkRpYWxvZzogdHJ1ZSB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhpZGVzIHRoZSBjb25maW1hdGlvbiBkaWFsb2cgdG8gZGVsZXRlIGEgY29tbWVudFxuICAgICAqIEBtZW1iZXJvZiBDb21tZW50XG4gICAgICovXG4gICAgaGFuZGxlQ2xvc2UoKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBvcGVuRGlhbG9nOiBmYWxzZSB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIHRoZSBDb25maXJtIERpYWxvZ1xuICAgICAqIEBwYXJhbSB7Kn0gYm9vbCBwcm9wZXJpZXMgcGFzc2VkIGJ5IHRoZSBDb25maXJtIERpYWxvZ1xuICAgICAqIEBtZW1iZXJvZiBDb21tZW50XG4gICAgICovXG4gICAgaGFuZGxlQ29uZmlybURpYWxvZyhtZXNzYWdlKSB7XG4gICAgICAgIGlmIChtZXNzYWdlKSB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZUNsaWNrRGVsZXRlQ29tbWVudCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVDbG9zZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlcyBkZWxldGluZyBhIGNvbW1lbnRcbiAgICAgKiBAbWVtYmVyb2YgQ29tbWVudFxuICAgICAqL1xuICAgIGhhbmRsZUNsaWNrRGVsZXRlQ29tbWVudCgpIHtcbiAgICAgICAgY29uc3QgYXBpQ2xpZW50ID0gbmV3IEFQSSgpO1xuXG4gICAgICAgIGNvbnN0IHsgZGVsZXRlQ29tbWVudCB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgYXBpSWQsIGFsbENvbW1lbnRzLCBjb21tZW50c1VwZGF0ZSwgaW50bCxcbiAgICAgICAgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIGNvbnN0IGNvbW1lbnRJZE9mQ29tbWVudFRvRGVsZXRlID0gZGVsZXRlQ29tbWVudC5pZDtcbiAgICAgICAgLy8gY29uc3QgcGFyZW50Q29tbWVudElkT2ZDb21tZW50VG9EZWxldGUgPSBkZWxldGVDb21tZW50LnBhcmVudENvbW1lbnRJZDtcbiAgICAgICAgdGhpcy5oYW5kbGVDbG9zZSgpO1xuXG4gICAgICAgIGFwaUNsaWVudC5kZWxldGVDb21tZW50KGFwaUlkLCBjb21tZW50SWRPZkNvbW1lbnRUb0RlbGV0ZSlcbiAgICAgICAgICAgIC50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBpZiAocGFyZW50Q29tbWVudElkT2ZDb21tZW50VG9EZWxldGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlbWFpbmluZ0NvbW1lbnRzID0gYWxsQ29tbWVudHMuZmlsdGVyKHRoaXMuZmlsdGVyUmVtYWluaW5nQ29tbWVudHMpO1xuICAgICAgICAgICAgICAgIGNvbW1lbnRzVXBkYXRlKHJlbWFpbmluZ0NvbW1lbnRzKTtcbiAgICAgICAgICAgICAgICBBbGVydC5tZXNzYWdlKFwiQ29tbWVudFwiICsgY29tbWVudElkT2ZDb21tZW50VG9EZWxldGUgKyBcImhhcyBiZWVuIHN1Y2Nlc3NmdWxseSBkZWxldGVkXCIpO1xuICAgICAgICAgICAgICAgIC8vIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gICAgIGNvbnN0IGluZGV4ID0gYWxsQ29tbWVudHMuZmluZEluZGV4KHRoaXMuZmlsdGVyQ29tbWVudFRvRGVsZXRlKTtcbiAgICAgICAgICAgICAgICAvLyAgICAgY29uc3QgcmVtYWluaW5nUmVwbGllcyA9IGFsbENvbW1lbnRzW2luZGV4XS5yZXBsaWVzLmZpbHRlcih0aGlzLmZpbHRlclJlbWFpbmluZ0NvbW1lbnRzKTtcbiAgICAgICAgICAgICAgICAvLyAgICAgYWxsQ29tbWVudHNbaW5kZXhdLnJlcGxpZXMgPSByZW1haW5pbmdSZXBsaWVzO1xuICAgICAgICAgICAgICAgIC8vICAgICBjb21tZW50c1VwZGF0ZShhbGxDb21tZW50cyk7XG4gICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IucmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgQWxlcnQuZXJyb3IoZXJyb3IucmVzcG9uc2UuYm9keS5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy9lbHNlIHtcbiAgICAgICAgICAgICAgICAvLyAgICAgQWxlcnQuZXJyb3IoXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICBpbnRsLmZvcm1hdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnU29tZXRoaW5nIHdlbnQgd3Jvbmcgd2hpbGUgZGVsZXRpbmcgY29tbWVudCcsXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgaWQ6ICdBcGlzLkRldGFpbHMuQ29tbWVudHMuQ29tbWVudC5zb21ldGhpbmcud2VudC53cm9uZycsXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgKyAnIC0gJ1xuICAgICAgICAgICAgICAgIC8vICAgICAgICAgKyBjb21tZW50SWRPZkNvbW1lbnRUb0RlbGV0ZSxcbiAgICAgICAgICAgICAgICAvLyAgICAgKTtcbiAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW5kZXIgbWV0aG9kIG9mIHRoZSBjb21wb25lbnRcbiAgICAgKiBAcmV0dXJucyB7UmVhY3QuQ29tcG9uZW50fSBDb21tZW50IGh0bWwgY29tcG9uZW50XG4gICAgICogQG1lbWJlcm9mIENvbW1lbnRcbiAgICAgKi9cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGNsYXNzZXMsIGNvbW1lbnRzLCBhcGlJZCwgYWxsQ29tbWVudHMsIGNvbW1lbnRzVXBkYXRlLFxuICAgICAgICB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgY29uc3QgeyBlZGl0SW5kZXgsIHJlcGx5SW5kZXgsIG9wZW5EaWFsb2cgfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBjb21tZW50c1xuICAgICAgICAgICAgJiYgY29tbWVudHNcbiAgICAgICAgICAgICAgICAuc2xpY2UoMClcbiAgICAgICAgICAgICAgICAucmV2ZXJzZSgpXG4gICAgICAgICAgICAgICAgLm1hcCgoY29tbWVudCwgaW5kZXgpID0+IChcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBrZXk9e2NvbW1lbnQuY29tbWVudElkICsgJy0nICsgaW5kZXh9IGNsYXNzTmFtZT17Y2xhc3Nlcy5jb250ZW50V3JhcHBlcn0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8R3JpZCBjb250YWluZXIgc3BhY2luZz17MX0gY2xhc3NOYW1lPXtjbGFzc2VzLnJvb3R9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxHcmlkIGl0ZW0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxJY29uIGNsYXNzTmFtZT17Y2xhc3Nlcy5jb21tZW50SWNvbn0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2NvdW50X2JveFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9JY29uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvR3JpZD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8R3JpZCBpdGVtIHhzIHplcm9NaW5XaWR0aD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgbm9XcmFwIGNsYXNzTmFtZT17Y2xhc3Nlcy5jb21tZW50VGV4dH0gPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2NvbW1lbnQuY3JlYXRlZEJ5fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1R5cG9ncmFwaHk+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2luZGV4ICE9PSBlZGl0SW5kZXggJiYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgY2xhc3NOYW1lPXtjbGFzc2VzLmNvbW1lbnRUZXh0fT57Y29tbWVudC5jb250ZW50fTwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKX1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7aW5kZXggPT09IGVkaXRJbmRleCAmJiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Q29tbWVudEVkaXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcGlJZD17YXBpSWR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsQ29tbWVudHM9e2FsbENvbW1lbnRzfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1lbnRzVXBkYXRlPXtjb21tZW50c1VwZGF0ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21tZW50PXtjb21tZW50fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZVNob3dFZGl0PXt0aGlzLmhhbmRsZVNob3dFZGl0fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKX1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Q29tbWVudE9wdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzZXM9e2NsYXNzZXN9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21tZW50PXtjb21tZW50fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWRpdEluZGV4PXtlZGl0SW5kZXh9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleD17aW5kZXh9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93QWRkQ29tbWVudD17dGhpcy5zaG93QWRkQ29tbWVudH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZUNsaWNrT3Blbj17dGhpcy5oYW5kbGVDbGlja09wZW59XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93RWRpdENvbW1lbnQ9e3RoaXMuc2hvd0VkaXRDb21tZW50fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsvKiB7aW5kZXggPT09IHJlcGx5SW5kZXggJiYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxDb21tZW50QWRkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwaUlkPXthcGlJZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9wYXJlbnRDb21tZW50SWQ9e2NvbW1lbnQuY29tbWVudElkfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxDb21tZW50cz17YWxsQ29tbWVudHN9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1lbnRzVXBkYXRlPXtjb21tZW50c1VwZGF0ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FuY2VsQnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Y29tbWVudC5yZXBsaWVzICE9PSAwICYmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Q29tbWVudFJlcGx5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzZXM9e2NsYXNzZXN9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwaUlkPXthcGlJZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbWVudHM9e2NvbW1lbnQucmVwbGllc31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbWVudHNVcGRhdGU9e2NvbW1lbnRzVXBkYXRlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxDb21tZW50cz17YWxsQ29tbWVudHN9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICl9ICovfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvR3JpZD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvR3JpZD5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICA8Q29uZmlybURpYWxvZ1xuICAgICAgICAgICAgICAgIGtleT0na2V5LWRpYWxvZydcbiAgICAgICAgICAgICAgICBsYWJlbENhbmNlbD0nQ2FuY2VsJ1xuICAgICAgICAgICAgICAgIHRpdGxlPSdDb25maXJtIERlbGV0ZSdcbiAgICAgICAgICAgICAgICBtZXNzYWdlPSdBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlIHRoaXMgY29tbWVudD8nXG4gICAgICAgICAgICAgICAgbGFiZWxPaz0nWWVzJ1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrPXt0aGlzLmhhbmRsZUNvbmZpcm1EaWFsb2d9XG4gICAgICAgICAgICAgICAgb3Blbj17b3BlbkRpYWxvZ31cbiAgICAgICAgICAgIC8+LFxuICAgICAgICBdO1xuICAgIH1cbn1cblxuQ29tbWVudC5wcm9wVHlwZXMgPSB7XG4gICAgY2xhc3NlczogUHJvcFR5cGVzLmluc3RhbmNlT2YoT2JqZWN0KS5pc1JlcXVpcmVkLFxuICAgIGFwaUlkOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgYWxsQ29tbWVudHM6IFByb3BUeXBlcy5pbnN0YW5jZU9mKEFycmF5KS5pc1JlcXVpcmVkLFxuICAgIGNvbW1lbnRzVXBkYXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGNvbW1lbnRzOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihBcnJheSkuaXNSZXF1aXJlZCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGluamVjdEludGwod2l0aFN0eWxlcyhzdHlsZXMpKENvbW1lbnQpKTtcbiIsIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTksIFdTTzIgSW5jLiAoaHR0cDovL3d3dy53c28yLm9yZykgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBXU08yIEluYy4gbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsXG4gKiBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHRcbiAqIGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IHdpdGhTdHlsZXMgfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMnO1xuaW1wb3J0IEljb24gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvSWNvbic7XG5pbXBvcnQgeyBUeXBvZ3JhcGh5IH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUnO1xuaW1wb3J0IEdyaWQgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvR3JpZC9HcmlkJztcbmltcG9ydCB7IEZvcm1hdHRlZE1lc3NhZ2UsIGluamVjdEludGwgfSBmcm9tICdyZWFjdC1pbnRsJztcbmltcG9ydCBDT05TVFMgZnJvbSAnQXBwRGF0YS9Db25zdGFudHMnO1xuaW1wb3J0IEF1dGhNYW5hZ2VyIGZyb20gJ0FwcERhdGEvQXV0aE1hbmFnZXInO1xuaW1wb3J0IENvbW1lbnQgZnJvbSAnLi9Db21tZW50JztcbmltcG9ydCBDb21tZW50QWRkIGZyb20gJy4vQ29tbWVudEFkZCc7XG5pbXBvcnQgQVBJIGZyb20gJy4uLy4uLy4uLy4uL2RhdGEvYXBpJztcbmltcG9ydCB7IEFwaUNvbnRleHQgfSBmcm9tICcuLi9BcGlDb250ZXh0JztcblxuY29uc3Qgc3R5bGVzID0gdGhlbWUgPT4gKHtcbiAgICByb290OiB7XG4gICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgIHBhZGRpbmdUb3A6IHRoZW1lLnNwYWNpbmcudW5pdCAqIDIsXG4gICAgICAgIHBhZGRpbmdCb3R0b206IHRoZW1lLnNwYWNpbmcudW5pdCAqIDIsXG4gICAgfSxcbiAgICBjb250ZW50V3JhcHBlcjoge1xuICAgICAgICBtYXhXaWR0aDogdGhlbWUuY3VzdG9tLmNvbnRlbnRBcmVhV2lkdGgsXG4gICAgICAgIHBhZGRpbmdMZWZ0OiB0aGVtZS5zcGFjaW5nLnVuaXQgKiAyLFxuICAgICAgICBwYWRkaW5nVG9wOiB0aGVtZS5zcGFjaW5nLnVuaWcsXG4gICAgfSxcbiAgICB0aXRsZVN1Yjoge1xuICAgICAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICB9LFxuICAgIGxpbms6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuZ2V0Q29udHJhc3RUZXh0KHRoZW1lLnBhbGV0dGUuYmFja2dyb3VuZC5kZWZhdWx0KSxcbiAgICAgICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgfSxcbiAgICB2ZXJ0aWNhbFNwYWNlOiB7XG4gICAgICAgIG1hcmdpblRvcDogdGhlbWUuc3BhY2luZy51bml0ICogMC4yLFxuICAgIH0sXG4gICAgbG9hZE1vcmVMaW5rOiB7XG4gICAgICAgIHRleHREZWNvcmF0aW9uOiAndW5kZXJsaW5lJyxcbiAgICB9LFxufSk7XG5cbi8qKlxuICogRGlzcGxheSBhIGNvbW1lbnQgbGlzdFxuICogQGNsYXNzIENvbW1lbnRzXG4gKiBAZXh0ZW5kcyB7UmVhY3QuQ29tcG9uZW50fVxuICovXG5jbGFzcyBDb21tZW50cyBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgc3RhdGljIGNvbnRleHRUeXBlID0gQXBpQ29udGV4dDtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgQ29tbWVudHNcbiAgICAgKiBAcGFyYW0geyp9IHByb3BzIHByb3BlcmllcyBwYXNzZWQgYnkgdGhlIHBhcmVudCBlbGVtZW50XG4gICAgICogQG1lbWJlcm9mIENvbW1lbnRzXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgZXhwYW5kZWQ6IHRydWUsXG4gICAgICAgICAgICBhbGxDb21tZW50czogW10sXG4gICAgICAgICAgICBjb21tZW50czogW10sXG4gICAgICAgICAgICB0b3RhbENvbW1lbnRzOiAwLFxuICAgICAgICAgICAgc3RhcnRDb21tZW50c1RvRGlzcGxheTogMCxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy51cGRhdGVDb21tZW50TGlzdCA9IHRoaXMudXBkYXRlQ29tbWVudExpc3QuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5oYW5kbGVFeHBhbmRDbGljayA9IHRoaXMuaGFuZGxlRXhwYW5kQ2xpY2suYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5oYW5kbGVMb2FkTW9yZUNvbW1lbnRzID0gdGhpcy5oYW5kbGVMb2FkTW9yZUNvbW1lbnRzLmJpbmQodGhpcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbGwgdGhlIGNvbW1lbnRzIGZvciBhIHBhcnRpY3VsYXIgQVBJLCB3aGVuIGNvbXBvbmVudCBtb3VudHNcbiAgICAgKiBAbWVtYmVyb2YgQ29tbWVudHNcbiAgICAgKi9cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgbGV0IHtcbiAgICAgICAgICAgIGFwaUlkLCB0aGVtZSwgbWF0Y2gsIGludGwsIGlzT3ZlcnZpZXcsIHNldENvdW50LFxuICAgICAgICB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgaWYgKG1hdGNoKSBhcGlJZCA9IG1hdGNoLnBhcmFtcy5hcGlVdWlkO1xuXG4gICAgICAgIGNvbnN0IHJlc3RBcGkgPSBuZXcgQVBJKCk7XG5cbiAgICAgICAgY29uc3QgdXNlciA9IEF1dGhNYW5hZ2VyLmdldFVzZXIoKTtcbiAgICAgICAgaWYgKHVzZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmVzdEFwaVxuICAgICAgICAgICAgICAgIC5nZXRBbGxDb21tZW50cyhhcGlJZClcbiAgICAgICAgICAgICAgICAudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjb21tZW50TGlzdCA9IHJlc3VsdC5ib2R5Lmxpc3Q7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc092ZXJ2aWV3KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRDb3VudChjb21tZW50TGlzdC5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbW1lbnRMaXN0Lmxlbmd0aCA+IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21tZW50TGlzdCA9IGNvbW1lbnRMaXN0LnNsaWNlKGNvbW1lbnRMaXN0Lmxlbmd0aCAtIDMsIGNvbW1lbnRMaXN0Lmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGFsbENvbW1lbnRzOiBjb21tZW50TGlzdCwgdG90YWxDb21tZW50czogY29tbWVudExpc3QubGVuZ3RoIH0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29tbWVudExpc3QubGVuZ3RoIDwgdGhlbWUuY3VzdG9tLmNvbW1lbnRzTGltaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBzdGFydENvbW1lbnRzVG9EaXNwbGF5OiAwLCBjb21tZW50czogY29tbWVudExpc3Quc2xpY2UoMCwgY29tbWVudExpc3QubGVuZ3RoKSB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0Q29tbWVudHNUb0Rpc3BsYXk6IGNvbW1lbnRMaXN0Lmxlbmd0aCAtIHRoZW1lLmN1c3RvbS5jb21tZW50c0xpbWl0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1lbnRzOiBjb21tZW50TGlzdC5zbGljZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbWVudExpc3QubGVuZ3RoIC0gdGhlbWUuY3VzdG9tLmNvbW1lbnRzTGltaXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1lbnRMaXN0Lmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlcyBsb2FkaW5nIHRoZSBwcmV2aW91cyBjb21tZW50c1xuICAgICAqIEBtZW1iZXJvZiBDb21tZW50c1xuICAgICAqL1xuICAgIGhhbmRsZUxvYWRNb3JlQ29tbWVudHMoKSB7XG4gICAgICAgIGNvbnN0IHsgdG90YWxDb21tZW50cywgc3RhcnRDb21tZW50c1RvRGlzcGxheSwgYWxsQ29tbWVudHMgfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgIGNvbnN0IHsgdGhlbWUgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIGlmIChzdGFydENvbW1lbnRzVG9EaXNwbGF5IC0gdGhlbWUuY3VzdG9tLmNvbW1lbnRzTGltaXQgPD0gMCkge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHN0YXJ0Q29tbWVudHNUb0Rpc3BsYXk6IDAsIGNvbW1lbnRzOiBhbGxDb21tZW50cy5zbGljZSgwLCB0b3RhbENvbW1lbnRzKSB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIHN0YXJ0Q29tbWVudHNUb0Rpc3BsYXk6IHN0YXJ0Q29tbWVudHNUb0Rpc3BsYXkgLSB0aGVtZS5jdXN0b20uY29tbWVudHNMaW1pdCxcbiAgICAgICAgICAgICAgICBjb21tZW50czogYWxsQ29tbWVudHMuc2xpY2Uoc3RhcnRDb21tZW50c1RvRGlzcGxheSAtIHRoZW1lLmN1c3RvbS5jb21tZW50c0xpbWl0LCB0b3RhbENvbW1lbnRzKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlcyBleHBhbmRpbmcgdGhlIGNvbW1lbnQgc2VjdGlvblxuICAgICAqIEBtZW1iZXJvZiBDb21tZW50c1xuICAgICAqL1xuICAgIGhhbmRsZUV4cGFuZENsaWNrKCkge1xuICAgICAgICBjb25zdCB7IGV4cGFuZGVkIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgZXhwYW5kZWQ6ICFleHBhbmRlZCB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBjb21tZW50IGxpc3QsIFRoaXMgaXMgcGFzc2VkIHRocm91Z2ggcHJvcHMgdG8gY2hpbGQgY29tcG9uZW50XG4gICAgICogQHBhcmFtIHthbnl9IGNvbW1lbnRzIFVwZGF0ZWQgY29tbWVudCBsaXN0XG4gICAgICogQG1lbWJlcm9mIENvbW1lbnRzXG4gICAgICovXG4gICAgdXBkYXRlQ29tbWVudExpc3QoY29tbWVudHMpIHtcbiAgICAgICAgY29uc3QgeyBzdGFydENvbW1lbnRzVG9EaXNwbGF5LCB0b3RhbENvbW1lbnRzIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICBjb25zdCB7IHRoZW1lIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICBsZXQgbmV3U3RhcnQ7XG4gICAgICAgIGxldCBkaWZmZXJlbmNlO1xuICAgICAgICBsZXQgbmV3VG90YWw7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBhbGxDb21tZW50czogY29tbWVudHMgfSk7XG4gICAgICAgIGlmICh0b3RhbENvbW1lbnRzIDwgdGhlbWUuY3VzdG9tLmNvbW1lbnRzTGltaXQpIHtcbiAgICAgICAgICAgIG5ld1RvdGFsID0gY29tbWVudHMubGVuZ3RoO1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHN0YXJ0Q29tbWVudHNUb0Rpc3BsYXk6IDAsIHRvdGFsQ29tbWVudHM6IG5ld1RvdGFsLCBjb21tZW50cyB9KTtcbiAgICAgICAgfSBlbHNlIGlmICh0b3RhbENvbW1lbnRzIDw9IGNvbW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgZGlmZmVyZW5jZSA9IGNvbW1lbnRzLmxlbmd0aCAtIHRvdGFsQ29tbWVudHM7XG4gICAgICAgICAgICBuZXdTdGFydCA9IHN0YXJ0Q29tbWVudHNUb0Rpc3BsYXkgKyBkaWZmZXJlbmNlO1xuICAgICAgICAgICAgbmV3VG90YWwgPSBjb21tZW50cy5sZW5ndGg7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBzdGFydENvbW1lbnRzVG9EaXNwbGF5OiBuZXdTdGFydCxcbiAgICAgICAgICAgICAgICB0b3RhbENvbW1lbnRzOiBuZXdUb3RhbCxcbiAgICAgICAgICAgICAgICBjb21tZW50czogY29tbWVudHMuc2xpY2UobmV3U3RhcnQsIG5ld1RvdGFsKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGlmZmVyZW5jZSA9IHRvdGFsQ29tbWVudHMgLSBjb21tZW50cy5sZW5ndGg7XG4gICAgICAgICAgICBpZiAoc3RhcnRDb21tZW50c1RvRGlzcGxheSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIG5ld1N0YXJ0ID0gc3RhcnRDb21tZW50c1RvRGlzcGxheTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbmV3U3RhcnQgPSBzdGFydENvbW1lbnRzVG9EaXNwbGF5IC0gZGlmZmVyZW5jZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5ld1RvdGFsID0gY29tbWVudHMubGVuZ3RoO1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgc3RhcnRDb21tZW50c1RvRGlzcGxheTogbmV3U3RhcnQsXG4gICAgICAgICAgICAgICAgdG90YWxDb21tZW50czogbmV3VG90YWwsXG4gICAgICAgICAgICAgICAgY29tbWVudHM6IGNvbW1lbnRzLnNsaWNlKG5ld1N0YXJ0LCBuZXdUb3RhbCksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbmRlciBtZXRob2Qgb2YgdGhlIGNvbXBvbmVudFxuICAgICAqIEByZXR1cm5zIHtSZWFjdC5Db21wb25lbnR9IENvbW1lbnQgaHRtbCBjb21wb25lbnRcbiAgICAgKiBAbWVtYmVyb2YgQ29tbWVudHNcbiAgICAgKi9cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHsgY2xhc3Nlcywgc2hvd0xhdGVzdCB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgY29tbWVudHMsIGV4cGFuZGVkLCBhbGxDb21tZW50cywgc3RhcnRDb21tZW50c1RvRGlzcGxheSwgdG90YWxDb21tZW50cywgY29tbWVudHNVcGRhdGUsXG4gICAgICAgIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPEFwaUNvbnRleHQuQ29uc3VtZXI+XG4gICAgICAgICAgICAgICAgeyh7IGFwaSB9KSA9PiAoXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzLmNvbnRlbnRXcmFwcGVyfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIHshc2hvd0xhdGVzdCAmJiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXMucm9vdH0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxJY29uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZUV4cGFuZENsaWNrfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD17ZXhwYW5kZWR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycm93X2Ryb3BfZG93bl9jaXJjbGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9JY29uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5oYW5kbGVFeHBhbmRDbGlja31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9J2g0J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzLnRpdGxlU3VifVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Rm9ybWF0dGVkTWVzc2FnZSBpZD0nQXBpcy5EZXRhaWxzLkNvbW1lbnRzLnRpdGxlJyBkZWZhdWx0TWVzc2FnZT0nQ29tbWVudHMnIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICAgICAgICA8Q29tbWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1lbnRzPXtjb21tZW50c31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcGlJZD17YXBpLmlkfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1lbnRzVXBkYXRlPXt0aGlzLnVwZGF0ZUNvbW1lbnRMaXN0fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbENvbW1lbnRzPXthbGxDb21tZW50c31cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICB7IXNob3dMYXRlc3QgJiYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxDb21tZW50QWRkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwaUlkPXthcGkuaWR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1lbnRzVXBkYXRlPXt0aGlzLnVwZGF0ZUNvbW1lbnRMaXN0fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxDb21tZW50cz17YWxsQ29tbWVudHN9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudENvbW1lbnRJZD17bnVsbH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FuY2VsQnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICl9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtzdGFydENvbW1lbnRzVG9EaXNwbGF5ICE9PSAwICYmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlcy5jb250ZW50V3JhcHBlcn0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxHcmlkIGNvbnRhaW5lciBzcGFjaW5nPXs0fSBjbGFzc05hbWU9e2NsYXNzZXMucm9vdH0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8R3JpZCBpdGVtPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IGNsYXNzTmFtZT17Y2xhc3Nlcy52ZXJ0aWNhbFNwYWNlfSB2YXJpYW50PSdib2R5MSc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzZXMubGluayArICcgJyArIGNsYXNzZXMubG9hZE1vcmVMaW5rfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5oYW5kbGVMb2FkTW9yZUNvbW1lbnRzfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Rm9ybWF0dGVkTWVzc2FnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSdBcGlzLkRldGFpbHMuQ29tbWVudHMubG9hZC5wcmV2aW91cy5jb21tZW50cydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0TWVzc2FnZT0nTG9hZCBQcmV2aW91cyBDb21tZW50cydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0dyaWQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8R3JpZD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SWNvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZUxvYWRNb3JlQ29tbWVudHN9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3Nlcy5saW5rICsgJyAnICsgY2xhc3Nlcy52ZXJ0aWNhbFNwYWNlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyb3dfZHJvcF9kb3duXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9JY29uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9HcmlkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEdyaWQgaXRlbT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeSBjbGFzc05hbWU9e2NsYXNzZXMudmVydGljYWxTcGFjZX0gdmFyaWFudD0nYm9keTEnPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Rm9ybWF0dGVkTWVzc2FnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9J0FwaXMuRGV0YWlscy5Db21tZW50cy5zaG93aW5nLmNvbW1lbnRzJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U9J1Nob3dpbmcgY29tbWVudHMgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt0b3RhbENvbW1lbnRzIC0gc3RhcnRDb21tZW50c1RvRGlzcGxheSArICcgb2YgJyArIHRvdGFsQ29tbWVudHN9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9HcmlkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0dyaWQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC9BcGlDb250ZXh0LkNvbnN1bWVyPlxuICAgICAgICApO1xuICAgIH1cbn1cblxuXG5Db21tZW50cy5wcm9wVHlwZXMgPSB7XG4gICAgY2xhc3NlczogUHJvcFR5cGVzLmluc3RhbmNlT2YoT2JqZWN0KS5pc1JlcXVpcmVkLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgaW5qZWN0SW50bCh3aXRoU3R5bGVzKHN0eWxlcywgeyB3aXRoVGhlbWU6IHRydWUgfSkoQ29tbWVudHMpKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG5mdW5jdGlvbiByZXF1aXJlUHJvcEZhY3RvcnkoY29tcG9uZW50TmFtZUluRXJyb3IpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgfVxuXG4gIHZhciByZXF1aXJlUHJvcCA9IGZ1bmN0aW9uIHJlcXVpcmVQcm9wKHJlcXVpcmVkUHJvcCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICB2YXIgcHJvcEZ1bGxOYW1lU2FmZSA9IHByb3BGdWxsTmFtZSB8fCBwcm9wTmFtZTtcblxuICAgICAgaWYgKHR5cGVvZiBwcm9wc1twcm9wTmFtZV0gIT09ICd1bmRlZmluZWQnICYmICFwcm9wc1tyZXF1aXJlZFByb3BdKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoXCJUaGUgcHJvcCBgXCIuY29uY2F0KHByb3BGdWxsTmFtZVNhZmUsIFwiYCBvZiBcIikgKyBcImBcIi5jb25jYXQoY29tcG9uZW50TmFtZUluRXJyb3IsIFwiYCBtdXN0IGJlIHVzZWQgb24gYFwiKS5jb25jYXQocmVxdWlyZWRQcm9wLCBcImAuXCIpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgfTtcblxuICByZXR1cm4gcmVxdWlyZVByb3A7XG59XG5cbnZhciBfZGVmYXVsdCA9IHJlcXVpcmVQcm9wRmFjdG9yeTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyJdLCJzb3VyY2VSb290IjoiIn0=