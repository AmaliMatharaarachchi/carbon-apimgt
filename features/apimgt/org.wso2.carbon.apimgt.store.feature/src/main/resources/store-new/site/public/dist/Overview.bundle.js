(window.webpackJsonp=window.webpackJsonp||[]).push([[4,6],{1658:function(e,t,a){"use strict";a.r(t);var n=a(0),r=a.n(n),i=a(2),o=a.n(i),s=a(209),l=a(642),c=a(5),u=a(1209),p=a(866),m=a(867),d=a(45),f=a(833),h=a(865),g=a(646),y=a(11),b=a(667),v=a(662),E=a(842),w=a(1208),S=a(113),O=a(215);function k(e){return(k="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function x(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function C(e,t){return!t||"object"!==k(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function A(e){return(A=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function j(e,t){return(j=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function N(e){var t=e.theme,a=e.method,n=t.custom.resourceChipColors?t.custom.resourceChipColors[a]:null,i="#000000";return n?i=t.palette.getContrastText(t.custom.resourceChipColors[a]):(console.log("Check the theme settings. The resourceChipColors is not populated properly"),n="#cccccc"),r.a.createElement(w.a,{label:a,style:{backgroundColor:n,color:i,height:20}})}N.propTypes={classes:o.a.object.isRequired};var T=Object(E.a)(N),D=function(e){function t(e){var a;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(a=C(this,A(t).call(this,e))).state={paths:null,swagger:{}},a.api=new O.a,a}var a,n,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&j(e,t)}(t,r.a.Component),a=t,(n=[{key:"componentDidMount",value:function(){var e=this,t=this.props.api;(new O.a).getSwaggerByAPIId(t.id).then(function(t){void 0!==t.obj.paths&&e.setState({paths:t.obj.paths})}).catch(function(t){var a=t.status;if(404===a)e.setState({notFound:!0});else if(401===a){e.setState({isAuthorize:!1});var n=qs.stringify({reference:e.props.location.pathname});e.props.history.push({pathname:"/login",search:n})}})}},{key:"render",value:function(){var e=this.state.paths;if(this.state.notFound)return r.a.createElement("div",null,"resource not found...");if(!e)return r.a.createElement("div",null,"loading...");var t=this.props.classes;return r.a.createElement("div",{className:t.root},r.a.createElement("div",{className:t.contentWrapper},Object.keys(e).map(function(a){var n=e[a];return r.a.createElement("div",{className:t.root},r.a.createElement(s.a,{className:t.heading,variant:"body1"},a),Object.keys(n).map(function(e){return S.a.HTTP_METHODS.includes(e)?r.a.createElement(T,{method:e}):null}))})))}}])&&x(a.prototype,n),i&&x(a,i),t}();D.contextType=v.a,D.propTypes={classes:o.a.object.isRequired,intl:o.a.shape({formatMessage:o.a.func}).isRequired};var P=Object(y.e)(Object(c.a)({root:{display:"flex",flexDirection:"row",alignItems:"center",marginBottom:10},heading:{marginRight:20}})(D)),M=a(843),_=a(847),I=a(848);function R(e){return(R="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function L(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function B(e,t){return!t||"object"!==R(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function F(e){return(F=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function q(e,t){return(q=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function z(e){var t=e.theme,a=e.method,n=t.custom.operationChipColor?t.custom.operationChipColor[a]:null,i="#000000";return n?i=t.palette.getContrastText(t.custom.operationChipColor[a]):(console.log("Check the theme settings. The resourceChipColors is not populated properlly"),n="#cccccc"),r.a.createElement(w.a,{label:a,style:{backgroundColor:n,color:i,height:20}})}z.propTypes={theme:o.a.object.isRequired,method:o.a.object.isRequired};var W=Object(E.a)(z),U=function(e){function t(e){var a;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(a=B(this,F(t).call(this,e))).state={operations:null},a.api=new O.a,a}var a,n,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&q(e,t)}(t,r.a.Component),a=t,(n=[{key:"componentDidMount",value:function(){var e=this.props.api;this.setState({operations:e.operations})}},{key:"render",value:function(){var e=this.state.operations;if(!e)return r.a.createElement("div",null,r.a.createElement(y.a,{id:"Apis.Details.Operations.notFound",defaultMessage:"operations Not found"}));var t=this.props.classes;return r.a.createElement(M.a,null,e&&0!==e.length&&e.map(function(e){return r.a.createElement(I.a,{style:{borderStyle:"hidden"}},r.a.createElement(_.a,null,r.a.createElement(s.a,{className:t.heading,component:"p",variant:"body1"},e.target)),r.a.createElement(_.a,null,r.a.createElement(W,{method:e.verb.toLowerCase()})))}))}}])&&L(a.prototype,n),i&&L(a,i),t}();U.propTypes={classes:o.a.object.isRequired,intl:o.a.shape({formatMessage:o.a.func}).isRequired};var H=Object(y.e)(Object(c.a)({root:{display:"flex",flexDirection:"row",alignItems:"center",marginBottom:10},heading:{marginRight:20}})(U)),G=a(1202),K=a(822);function J(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var a=[],n=!0,r=!1,i=void 0;try{for(var o,s=e[Symbol.iterator]();!(n=(o=s.next()).done)&&(a.push(o.value),!t||a.length!==t);n=!0);}catch(e){r=!0,i=e}finally{try{n||null==s.return||s.return()}finally{if(r)throw i}}return a}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function Q(e){var t=J(Object(n.useState)([]),2),a=t[0],i=t[1];Object(n.useEffect)(function(){var t=new O.a,a=e.apiId;t.getDocumentsByAPIId(a).then(function(e){e.obj.list.length>0&&i(e.obj.list)}).catch(function(e){404===e.status&&Alert.error("Error occured")})},[]);var o=e.classes,c=e.apiId;return r.a.createElement(r.a.Fragment,null," ",r.a.createElement(l.a,{item:!0,xs:12},r.a.createElement("div",{className:o.subscriptionTop},r.a.createElement("div",{className:o.boxBadge},a.length),r.a.createElement(d.a,{to:"/apis/"+c+"/documents",className:o.linkStyle},r.a.createElement(y.a,{id:"Apis.Details.Overview.documents.count.sufix",defaultMessage:"Documents"})))),r.a.createElement(l.a,{item:!0,xs:12},r.a.createElement(s.a,{variant:"subtitle2"},r.a.createElement(y.a,{id:"Apis.Details.Overview.documents.last.updated",defaultMessage:"Last Updated"})),a.length>0&&r.a.createElement("div",{className:o.subscriptionBox},r.a.createElement(d.a,{to:"/apis/"+c+"/documents",className:o.linkStyle},a[0].name),r.a.createElement(s.a,{variant:"caption"},r.a.createElement(y.a,{id:"Apis.Details.Overview.documents.last.updated",defaultMessage:"Last Updated"}),"21 minutes ago"))))}Q.propTypes={classes:o.a.object.isRequired,theme:o.a.object.isRequired};var $=Object(c.a)(function(e){return{root:{padding:3*e.spacing.unit,width:e.custom.contentAreaWidth},iconClass:{marginRight:10,color:e.palette.secondary.main},boxBadge:{background:e.palette.grey.A400,color:e.palette.getContrastText(e.palette.grey.A400),fontSize:e.typography.h5.fontSize,padding:e.spacing.unit,width:30,height:30,marginRight:20,textAlign:"center"},subscriptionBox:{paddingLeft:2*e.spacing.unit},linkStyle:{color:e.palette.getContrastText(e.palette.background.default),fontSize:e.typography.fontSize},subscriptionTop:{display:"flex",flexDirection:"row",alignItems:"center"},resourceWrapper:{height:192,overflow:"auto"},actionPanel:{justifyContent:"flex-start"},linkToTest:{textDecoration:"none"}}},{withTheme:!0})(Q);function V(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var a=[],n=!0,r=!1,i=void 0;try{for(var o,s=e[Symbol.iterator]();!(n=(o=s.next()).done)&&(a.push(o.value),!t||a.length!==t);n=!0);}catch(e){r=!0,i=e}finally{try{n||null==s.return||s.return()}finally{if(r)throw i}}return a}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var X=Object(c.a)({root:{borderBottom:"1px solid rgba(0,0,0,.125)",marginBottom:-1,minHeight:56,"&$expanded":{minHeight:56}},content:{"&$expanded":{margin:"12px 0"},alignItems:"center"},expanded:{}})(function(e){return r.a.createElement(m.a,e)});function Y(e){var t=e.classes,a=e.theme,i=V(Object(n.useState)(0),2),o=i[0],c=i[1];return r.a.createElement(v.a.Consumer,null,function(e){var n=e.api,i=e.applicationsAvailable,m=e.subscribedApplications;return r.a.createElement(l.a,{container:!0,className:t.root,spacing:2},!n.advertiseInfo.advertised&&r.a.createElement(l.a,{item:!0,xs:12,lg:6},r.a.createElement(u.a,{defaultExpanded:!0},r.a.createElement(X,null,r.a.createElement(b.a,{strokeColor:a.palette.secondary.main,className:t.iconClass,width:24,height:24,icon:"credentials"}),r.a.createElement(s.a,{className:t.heading,variant:"h6"},r.a.createElement(y.a,{id:"Apis.Details.Overview.api.credentials",defaultMessage:"API Credentials"}))),r.a.createElement(p.a,null,r.a.createElement(l.a,{container:!0,className:t.root,spacing:2},r.a.createElement(l.a,{item:!0,xs:12},r.a.createElement("div",{className:t.subscriptionTop},r.a.createElement("div",{className:t.boxBadge},m.length),r.a.createElement(d.a,{to:"/apis/"+n.id+"/credentials",className:t.linkStyle},r.a.createElement(y.a,{id:"Apis.Details.Overview.subscriptions",defaultMessage:"Subscriptions"})))),r.a.createElement(l.a,{item:!0,xs:12},r.a.createElement(s.a,{variant:"subtitle2"},r.a.createElement(y.a,{id:"Apis.Details.Overview.subscribe.to.application",defaultMessage:"Subscribe to an Application"})),r.a.createElement("div",{className:t.subscriptionBox},i.length>0&&r.a.createElement(r.a.Fragment,null,r.a.createElement(d.a,{to:"/apis/"+n.id+"/credentials",className:t.linkStyle},r.a.createElement(y.a,{id:"Apis.Details.Overview.with.an.existing",defaultMessage:"With an Existing Application"})),r.a.createElement(s.a,{variant:"caption"},i.length," ",r.a.createElement(y.a,{id:"Apis.Details.Overview.subscribe.to.an.application",defaultMessage:"Applications Available"}))),r.a.createElement(d.a,{to:{pathname:"/apis/"+n.id+"/credentials",state:{openWizard:!0}},className:t.linkStyle},r.a.createElement(y.a,{id:"Apis.Details.Overview.with.a.new.application",defaultMessage:"With a New Application"})))),r.a.createElement(l.a,{item:!0,xs:12},r.a.createElement(s.a,null,r.a.createElement(y.a,{id:"Apis.Details.Overview.with.a.new.application.help",defaultMessage:"API Credentials are grouped in to applications. An application is primarily used to decouple the consumer from the APIs. It allows you to Generate and use a single key for multiple APIs and subscribe multiple times to a single API with different SLA levels."}))))))),r.a.createElement(l.a,{item:!0,xs:12,lg:6},r.a.createElement(u.a,{defaultExpanded:!0},r.a.createElement(X,null,r.a.createElement(b.a,{strokeColor:a.palette.secondary.main,className:t.iconClass,width:24,height:24,icon:"credentials"}),function(e){switch(e){case"GRAPHQL":return r.a.createElement(y.a,{id:"Apis.Details.Overview.operations.title",defaultMessage:"Operations"});default:return r.a.createElement(y.a,{id:"Apis.Details.Overview.resources.title",defaultMessage:"Resources"})}}(n.type),r.a.createElement(s.a,{className:t.heading,variant:"h6"})),r.a.createElement(p.a,{className:t.resourceWrapper},function(e,t){switch(e){case"GRAPHQL":return r.a.createElement(H,{api:t});default:return r.a.createElement(P,{api:t})}}(n.type,n)),!n.advertiseInfo.advertised&&r.a.createElement(r.a.Fragment,null,r.a.createElement(f.a,null),r.a.createElement(h.a,{className:t.actionPanel},r.a.createElement(d.a,{to:"/apis/"+n.id+"/test",className:t.linkToTest},r.a.createElement(g.a,{size:"small",color:"primary"},r.a.createElement(y.a,{id:"Apis.Details.Overview.resources.show.more",defaultMessage:"Test >>"}))))))),!n.advertiseInfo.advertised&&r.a.createElement(r.a.Fragment,null,r.a.createElement(l.a,{item:!0,xs:12,lg:6},r.a.createElement(u.a,{defaultExpanded:!0},r.a.createElement(X,null,r.a.createElement(b.a,{strokeColor:a.palette.secondary.main,className:t.iconClass,width:24,height:24,icon:"comments"}),r.a.createElement(s.a,{className:t.heading,variant:"h6"},r.a.createElement(y.a,{id:"Apis.Details.Overview.comments.title",defaultMessage:"Comments"})),r.a.createElement(s.a,{className:t.subheading}," "+(o>3?3:o)+" of "+o)),r.a.createElement(p.a,{className:t.resourceWrapper},n&&r.a.createElement(G.default,{apiId:n.id,showLatest:!0,isOverview:!0,setCount:c})),r.a.createElement(f.a,null),r.a.createElement(h.a,{className:t.actionPanel},r.a.createElement(d.a,{to:"/apis/"+n.id+"/comments",className:t.button},r.a.createElement(g.a,{size:"small",color:"primary"},r.a.createElement(y.a,{id:"Apis.Details.Overview.comments.show.more",defaultMessage:"Show More >>"})))))),r.a.createElement(l.a,{item:!0,xs:6},r.a.createElement(u.a,{defaultExpanded:!0},r.a.createElement(X,null,r.a.createElement(b.a,{strokeColor:a.palette.secondary.main,className:t.iconClass,width:24,height:24,icon:"sdk"}),r.a.createElement(s.a,{className:t.heading,variant:"h6"},r.a.createElement(y.a,{id:"Apis.Details.Overview.sdk.generation.title",defaultMessage:"SDK Generation"}))),r.a.createElement(p.a,{className:t.resourceWrapper},r.a.createElement(l.a,{container:!0,className:t.root,spacing:2},n&&r.a.createElement(K.default,{apiId:n.id,onlyIcons:!0}),r.a.createElement(l.a,{item:!0,xs:12},r.a.createElement(s.a,null,r.a.createElement(y.a,{id:"Apis.Details.Overview.sdk.generation.description",defaultMessage:"If you wants to create a software application to consume the subscribed APIs, you can generate client side SDK for a supported language/framework and use it as a start point to write the software application."}))))),r.a.createElement(f.a,null),r.a.createElement(h.a,{className:t.actionPanel},r.a.createElement(d.a,{to:"/apis/"+n.id+"/sdk",className:t.linkToTest},r.a.createElement(g.a,{size:"small",color:"primary"},r.a.createElement(y.a,{id:"Apis.Details.Overview.sdk.generation.show.more",defaultMessage:"Show More >>"}))))))),r.a.createElement(l.a,{item:!0,xs:12,lg:6},r.a.createElement(u.a,{defaultExpanded:!0},r.a.createElement(X,null,r.a.createElement(b.a,{strokeColor:a.palette.secondary.main,className:t.iconClass,width:24,height:24,icon:"docs"}),r.a.createElement(s.a,{className:t.heading,variant:"h6"},r.a.createElement(y.a,{id:"Apis.Details.Overview.documents.title",defaultMessage:"Documents"}))),r.a.createElement(p.a,{className:t.resourceWrapper},r.a.createElement(l.a,{container:!0,className:t.root,spacing:2},r.a.createElement($,{apiId:n.id}))))))})}X.muiName="ExpansionPanelSummary",Y.propTypes={classes:o.a.instanceOf(Object).isRequired,theme:o.a.instanceOf(Object).isRequired};t.default=Object(c.a)(function(e){return{root:{padding:3*e.spacing.unit},iconClass:{marginRight:10,color:e.palette.secondary.main},boxBadge:{background:e.palette.grey.A400,color:e.palette.getContrastText(e.palette.grey.A400),fontSize:e.typography.h5.fontSize,padding:e.spacing.unit,width:30,height:30,marginRight:20,textAlign:"center"},subscriptionBox:{paddingLeft:2*e.spacing.unit},linkStyle:{color:e.palette.getContrastText(e.palette.background.default),fontSize:e.typography.fontSize},subscriptionTop:{display:"flex",flexDirection:"row",alignItems:"center"},resourceWrapper:{height:192,overflow:"auto"},actionPanel:{justifyContent:"flex-start"},linkToTest:{textDecoration:"none"},button:{textDecoration:"none"},verticalSpace:{marginLeft:60*e.spacing.unit},subheading:{marginLeft:2*e.spacing.unit}}},{withTheme:!0})(Y)},735:function(e,t){e.exports=function(e,t,a,n){var r=new Blob(void 0!==n?[n,e]:[e],{type:a||"application/octet-stream"});if(void 0!==window.navigator.msSaveBlob)window.navigator.msSaveBlob(r,t);else{var i=window.URL.createObjectURL(r),o=document.createElement("a");o.style.display="none",o.href=i,o.setAttribute("download",t),void 0===o.download&&o.setAttribute("target","_blank"),document.body.appendChild(o),o.click(),document.body.removeChild(o),window.URL.revokeObjectURL(i)}}},822:function(e,t,a){"use strict";a.r(t);var n=a(0),r=a.n(n),i=a(646),o=a(855),s=a(856),l=a(858),c=a(648),u=a(833),p=a(642),m=a(735),d=a.n(m),f=a(287),h=a(645),g=a(209),y=a(11),b=a(12),v=a(215);function E(e){return(E="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function w(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function S(e){return(S=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function O(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function k(e,t){return(k=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function x(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var C=function(e){function t(e){var a,n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=this,r=S(t).call(this,e),a=!r||"object"!==E(r)&&"function"!=typeof r?O(n):r,x(O(a),"handleClick",function(e,t){var n=a.api_uuid,r=t;a.getSdkForApi(n,r)}),x(O(a),"handleChange",function(e){var t=a.state.sdkLanguages;t=t.filter(function(t){return-1!==t.toLowerCase().search(e.target.value.toLowerCase())}),a.setState({items:t})}),a.state={sdkLanguages:null,items:null};var i=a.props,o=i.match,s=i.apiId;return a.api_uuid=o?o.params.apiUuid:s,a.filter_threshold=5,a.getSdkForApi=a.getSdkForApi.bind(O(a)),a.handleClick=a.handleClick.bind(O(a)),a.handleChange=a.handleChange.bind(O(a)),a}var a,n,m;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&k(e,t)}(t,r.a.Component),a=t,(n=[{key:"componentDidMount",value:function(){var e=this,t=new v.a;null!=b.a.getUser()&&t.getSdkLanguages().then(function(t){0!==t.obj.length?(e.setState({sdkLanguages:t.obj}),e.setState({items:t.obj})):e.setState({sdkLanguages:!1})}).catch(function(t){404===t.status&&e.setState({notFound:!0})})}},{key:"getSdkForApi",value:function(e,t){var a=this;(new v.a).getSdk(e,t).then(function(e){var t=e.headers["content-disposition"].match(/filename="(.+)"/)[1],a=e.data;d()(a,t)}).catch(function(e){var t=e.status;404===t?a.setState({notFound:!0}):400===t?a.setState({badRequest:!0}):500===t&&a.setState({serverError:!0})})}},{key:"render",value:function(){var e=this,t=this.state.items,a=this.props,n=a.onlyIcons,m=a.intl;return n?t&&r.a.createElement(r.a.Fragment,null,t.map(function(t,a){return a<3&&r.a.createElement(p.a,{item:!0,xs:4},r.a.createElement("a",{onClick:function(a){return e.handleClick(a,t)},style:{cursor:"pointer"}},r.a.createElement("img",{alt:t,src:"/store-new/site/public/images/sdks/"+new String(t)+".svg",style:{width:80,height:80,margin:15}})))})):t?r.a.createElement(p.a,{container:!0,className:"tab-grid",spacing:0},r.a.createElement(p.a,{item:!0,xs:12,sm:6,md:9,lg:9,xl:10},this.state.sdkLanguages.length>=this.filter_threshold&&r.a.createElement(p.a,{item:!0,style:{textAlign:"center"}},r.a.createElement(h.a,{id:"search",label:m.formatMessage({defaultMessage:"Search SDK",id:"Apis.Details.Sdk.search.sdk"}),type:"text",margin:"normal",name:"searchSdk",onChange:this.handleChange})),r.a.createElement(p.a,{container:!0,justify:"flex-start",spacing:Number(24)},t.map(function(t,a){return r.a.createElement(p.a,{key:a,item:!0},r.a.createElement("div",{style:{width:"auto",textAlign:"center"}},r.a.createElement(o.a,null,r.a.createElement("div",null,t.toString().toUpperCase()),r.a.createElement(u.a,null),r.a.createElement(l.a,{title:t.toString().toUpperCase(),src:"/store-new/site/public/images/sdks/"+new String(t)+".svg"},r.a.createElement("img",{alt:t,src:"/store-new/site/public/images/sdks/"+new String(t)+".svg",style:{width:"100px",height:"100px",margin:"15px"}})),r.a.createElement(s.a,null,r.a.createElement(p.a,{container:!0,justify:"center"},r.a.createElement(i.a,{color:"secondary",onClick:function(a){return e.handleClick(a,t)}},r.a.createElement(c.a,null,"arrow_downward"),"Download"))))))})))):r.a.createElement(f.a,null,r.a.createElement(p.a,{container:!0,style:{marginLeft:"10%",marginRight:"10%",width:"100%"},align:"center"},r.a.createElement(p.a,{item:!0,xs:12,sm:6,md:9,lg:9,xl:10},r.a.createElement(f.a,null,r.a.createElement(g.a,null,r.a.createElement(c.a,null,"info"),r.a.createElement(y.a,{id:"Apis.Details.Sdk.no.lanuages",defaultMessage:"No languages are configured."}))))))}}])&&w(a.prototype,n),m&&w(a,m),t}();t.default=Object(y.e)(C)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,