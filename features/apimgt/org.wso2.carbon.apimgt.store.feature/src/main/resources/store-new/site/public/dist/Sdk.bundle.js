(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{735:function(e,t){e.exports=function(e,t,n,a){var r=new Blob(void 0!==a?[a,e]:[e],{type:n||"application/octet-stream"});if(void 0!==window.navigator.msSaveBlob)window.navigator.msSaveBlob(r,t);else{var o=window.URL.createObjectURL(r),i=document.createElement("a");i.style.display="none",i.href=o,i.setAttribute("download",t),void 0===i.download&&i.setAttribute("target","_blank"),document.body.appendChild(i),i.click(),document.body.removeChild(i),window.URL.revokeObjectURL(o)}}},822:function(e,t,n){"use strict";n.r(t);var a=n(0),r=n.n(a),o=n(646),i=n(855),l=n(856),s=n(858),c=n(648),u=n(833),d=n(642),m=n(735),f=n.n(m),p=n(287),g=n(645),h=n(209),b=n(11),y=n(12),w=n(215);function v(e){return(v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function k(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function E(e){return(E=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function S(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function C(e,t){return(C=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function j(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var x=function(e){function t(e){var n,a,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),a=this,r=E(t).call(this,e),n=!r||"object"!==v(r)&&"function"!=typeof r?S(a):r,j(S(n),"handleClick",function(e,t){var a=n.api_uuid,r=t;n.getSdkForApi(a,r)}),j(S(n),"handleChange",function(e){var t=n.state.sdkLanguages;t=t.filter(function(t){return-1!==t.toLowerCase().search(e.target.value.toLowerCase())}),n.setState({items:t})}),n.state={sdkLanguages:null,items:null};var o=n.props,i=o.match,l=o.apiId;return n.api_uuid=i?i.params.apiUuid:l,n.filter_threshold=5,n.getSdkForApi=n.getSdkForApi.bind(S(n)),n.handleClick=n.handleClick.bind(S(n)),n.handleChange=n.handleChange.bind(S(n)),n}var n,a,m;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&C(e,t)}(t,r.a.Component),n=t,(a=[{key:"componentDidMount",value:function(){var e=this,t=new w.a;null!=y.a.getUser()&&t.getSdkLanguages().then(function(t){0!==t.obj.length?(e.setState({sdkLanguages:t.obj}),e.setState({items:t.obj})):e.setState({sdkLanguages:!1})}).catch(function(t){404===t.status&&e.setState({notFound:!0})})}},{key:"getSdkForApi",value:function(e,t){var n=this;(new w.a).getSdk(e,t).then(function(e){var t=e.headers["content-disposition"].match(/filename="(.+)"/)[1],n=e.data;f()(n,t)}).catch(function(e){var t=e.status;404===t?n.setState({notFound:!0}):400===t?n.setState({badRequest:!0}):500===t&&n.setState({serverError:!0})})}},{key:"render",value:function(){var e=this,t=this.state.items,n=this.props,a=n.onlyIcons,m=n.intl;return a?t&&r.a.createElement(r.a.Fragment,null,t.map(function(t,n){return n<3&&r.a.createElement(d.a,{item:!0,xs:4},r.a.createElement("a",{onClick:function(n){return e.handleClick(n,t)},style:{cursor:"pointer"}},r.a.createElement("img",{alt:t,src:"/store-new/site/public/images/sdks/"+new String(t)+".svg",style:{width:80,height:80,margin:15}})))})):t?r.a.createElement(d.a,{container:!0,className:"tab-grid",spacing:0},r.a.createElement(d.a,{item:!0,xs:12,sm:6,md:9,lg:9,xl:10},this.state.sdkLanguages.length>=this.filter_threshold&&r.a.createElement(d.a,{item:!0,style:{textAlign:"center"}},r.a.createElement(g.a,{id:"search",label:m.formatMessage({defaultMessage:"Search SDK",id:"Apis.Details.Sdk.search.sdk"}),type:"text",margin:"normal",name:"searchSdk",onChange:this.handleChange})),r.a.createElement(d.a,{container:!0,justify:"flex-start",spacing:Number(24)},t.map(function(t,n){return r.a.createElement(d.a,{key:n,item:!0},r.a.createElement("div",{style:{width:"auto",textAlign:"center"}},r.a.createElement(i.a,null,r.a.createElement("div",null,t.toString().toUpperCase()),r.a.createElement(u.a,null),r.a.createElement(s.a,{title:t.toString().toUpperCase(),src:"/store-new/site/public/images/sdks/"+new String(t)+".svg"},r.a.createElement("img",{alt:t,src:"/store-new/site/public/images/sdks/"+new String(t)+".svg",style:{width:"100px",height:"100px",margin:"15px"}})),r.a.createElement(l.a,null,r.a.createElement(d.a,{container:!0,justify:"center"},r.a.createElement(o.a,{color:"secondary",onClick:function(n){return e.handleClick(n,t)}},r.a.createElement(c.a,null,"arrow_downward"),"Download"))))))})))):r.a.createElement(p.a,null,r.a.createElement(d.a,{container:!0,style:{marginLeft:"10%",marginRight:"10%",width:"100%"},align:"center"},r.a.createElement(d.a,{item:!0,xs:12,sm:6,md:9,lg:9,xl:10},r.a.createElement(p.a,null,r.a.createElement(h.a,null,r.a.createElement(c.a,null,"info"),r.a.createElement(b.a,{id:"Apis.Details.Sdk.no.lanuages",defaultMessage:"No languages are configured."}))))))}}])&&k(n.prototype,a),m&&k(n,m),t}();t.default=Object(b.e)(x)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,