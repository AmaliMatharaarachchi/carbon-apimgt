(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{1194:function(t,e,n){(function(t){function n(t,e){for(var n=0,r=t.length-1;r>=0;r--){var i=t[r];"."===i?t.splice(r,1):".."===i?(t.splice(r,1),n++):n&&(t.splice(r,1),n--)}if(e)for(;n--;n)t.unshift("..");return t}var r=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/,i=function(t){return r.exec(t).slice(1)};function o(t,e){if(t.filter)return t.filter(e);for(var n=[],r=0;r<t.length;r++)e(t[r],r,t)&&n.push(t[r]);return n}e.resolve=function(){for(var e="",r=!1,i=arguments.length-1;i>=-1&&!r;i--){var a=i>=0?arguments[i]:t.cwd();if("string"!=typeof a)throw new TypeError("Arguments to path.resolve must be strings");a&&(e=a+"/"+e,r="/"===a.charAt(0))}return(r?"/":"")+(e=n(o(e.split("/"),function(t){return!!t}),!r).join("/"))||"."},e.normalize=function(t){var r=e.isAbsolute(t),i="/"===a(t,-1);return(t=n(o(t.split("/"),function(t){return!!t}),!r).join("/"))||r||(t="."),t&&i&&(t+="/"),(r?"/":"")+t},e.isAbsolute=function(t){return"/"===t.charAt(0)},e.join=function(){var t=Array.prototype.slice.call(arguments,0);return e.normalize(o(t,function(t,e){if("string"!=typeof t)throw new TypeError("Arguments to path.join must be strings");return t}).join("/"))},e.relative=function(t,n){function r(t){for(var e=0;e<t.length&&""===t[e];e++);for(var n=t.length-1;n>=0&&""===t[n];n--);return e>n?[]:t.slice(e,n-e+1)}t=e.resolve(t).substr(1),n=e.resolve(n).substr(1);for(var i=r(t.split("/")),o=r(n.split("/")),a=Math.min(i.length,o.length),c=a,s=0;s<a;s++)if(i[s]!==o[s]){c=s;break}var u=[];for(s=c;s<i.length;s++)u.push("..");return(u=u.concat(o.slice(c))).join("/")},e.sep="/",e.delimiter=":",e.dirname=function(t){var e=i(t),n=e[0],r=e[1];return n||r?(r&&(r=r.substr(0,r.length-1)),n+r):"."},e.basename=function(t,e){var n=i(t)[2];return e&&n.substr(-1*e.length)===e&&(n=n.substr(0,n.length-e.length)),n},e.extname=function(t){return i(t)[3]};var a="b"==="ab".substr(-1)?function(t,e,n){return t.substr(e,n)}:function(t,e,n){return e<0&&(e=t.length+e),t.substr(e,n)}}).call(this,n(310))},1195:function(t,e,n){"use strict";t.exports=function(t){var e="string"==typeof t?t.charCodeAt(0):t;return e>=97&&e<=122||e>=65&&e<=90}},1196:function(t,e,n){"use strict";t.exports={position:!0,gfm:!0,commonmark:!1,footnotes:!1,pedantic:!1,blocks:n(1605)}},1197:function(t,e,n){"use strict";t.exports=function(t){var e,n=0,i=0,o=t.charAt(n),a={};for(;o in r;)e=r[o],i+=e,e>1&&(i=Math.floor(i/e)*e),a[i]=n,o=t.charAt(++n);return{indent:i,stops:a}};var r={" ":1,"\t":4}},1198:function(t,e,n){"use strict";var r="<[A-Za-z][A-Za-z0-9\\-]*(?:\\s+[a-zA-Z_:][a-zA-Z0-9:._-]*(?:\\s*=\\s*(?:[^\"'=<>`\\u0000-\\u0020]+|'[^']*'|\"[^\"]*\"))?)*\\s*\\/?>",i="<\\/[A-Za-z][A-Za-z0-9\\-]*\\s*>";e.openCloseTag=new RegExp("^(?:"+r+"|"+i+")"),e.tag=new RegExp("^(?:"+r+"|"+i+"|\x3c!----\x3e|\x3c!--(?:-?[^>-])(?:-?[^-])*--\x3e|<[?].*?[?]>|<![A-Za-z]+\\s+[^>]*>|<!\\[CDATA\\[[\\s\\S]*?\\]\\]>)")},1199:function(t,e,n){"use strict";t.exports=function(t,e){return t.indexOf("<",e)}},1200:function(t,e,n){"use strict";t.exports=function(t,e){var n=t.indexOf("[",e),r=t.indexOf("![",e);if(-1===r)return n;return n<r?n:r}},1577:function(t,e,n){"use strict";function r(t){return function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var i=n(680),o=n(1578),a=n(1590),c=n(2),s=n(1645),u=n(1647),l=n(1648),f=n(1649),h=n(1650),p=n(1651),d=n(1652),g=n(1653),m=n(1654),v=Object.keys(g),y=function(t){var e=t.source||t.children||"",n=t.parserOptions;if(t.allowedTypes&&t.disallowedTypes)throw new Error("Only one of `allowedTypes` and `disallowedTypes` should be defined");var r=i(g,t.renderers),c=[[a,n]].concat(t.plugins||[]).reduce(A,o()).parse(e),d=i(t,{renderers:r,definitions:p(c)}),y=function(t){var e=[h,s()],n=t.disallowedTypes;t.allowedTypes&&(n=v.filter(function(e){return"root"!==e&&-1===t.allowedTypes.indexOf(e)}));var r=t.unwrapDisallowed?"unwrap":"remove";n&&n.length>0&&e.push(l.ofType(n,r));t.allowNode&&e.push(l.ifNotMatch(t.allowNode,r));var i=!t.escapeHtml&&!t.skipHtml,o=(t.astPlugins||[]).some(function(t){var e=Array.isArray(t)?t[0]:t;return e.identity===m.HtmlParser});i&&!o&&e.push(u);return t.astPlugins?e.concat(t.astPlugins):e}(t).reduce(function(t,e){return e(t,d)},c);return f(y,d)};function A(t,e){return Array.isArray(e)?t.use.apply(t,r(e)):t.use(e)}y.defaultProps={renderers:{},escapeHtml:!0,skipHtml:!1,sourcePos:!1,rawSourcePos:!1,transformLinkUri:d,astPlugins:[],plugins:[],parserOptions:{}},y.propTypes={className:c.string,source:c.string,children:c.string,sourcePos:c.bool,rawSourcePos:c.bool,escapeHtml:c.bool,skipHtml:c.bool,allowNode:c.func,allowedTypes:c.arrayOf(c.oneOf(v)),disallowedTypes:c.arrayOf(c.oneOf(v)),transformLinkUri:c.oneOfType([c.func,c.bool]),linkTarget:c.oneOfType([c.func,c.string]),transformImageUri:c.func,astPlugins:c.arrayOf(c.func),unwrapDisallowed:c.bool,renderers:c.object,plugins:c.array,parserOptions:c.object},y.types=v,y.renderers=g,y.uriTransformer=d,t.exports=y},1578:function(t,e,n){"use strict";var r=n(1579),i=n(1580),o=n(1581),a=n(1586),c=n(1588),s=n(1589);t.exports=function t(){var e=[];var n=a();var y={};var A=!1;var b=-1;k.data=function(t,e){if(c(t))return 2===arguments.length?(g("data",A),y[t]=e,k):l.call(y,t)&&y[t]||null;if(t)return g("data",A),y=t,k;return y};k.freeze=x;k.attachers=e;k.use=function(t){var n;if(g("use",A),null==t);else if("function"==typeof t)c.apply(null,arguments);else{if("object"!=typeof t)throw new Error("Expected usable value, not `"+t+"`");"length"in t?a(t):i(t)}n&&(y.settings=r(y.settings||{},n));return k;function i(t){a(t.plugins),t.settings&&(n=r(n||{},t.settings))}function o(t){if("function"==typeof t)c(t);else{if("object"!=typeof t)throw new Error("Expected usable value, not `"+t+"`");"length"in t?c.apply(null,t):i(t)}}function a(t){var e,n;if(null==t);else{if(!("object"==typeof t&&"length"in t))throw new Error("Expected a list of plugins, not `"+t+"`");for(e=t.length,n=-1;++n<e;)o(t[n])}}function c(t,n){var i=function(t){var n,r=e.length,i=-1;for(;++i<r;)if((n=e[i])[0]===t)return n}(t);i?(s(i[1])&&s(n)&&(n=r(i[1],n)),i[1]=n):e.push(u.call(arguments))}};k.parse=function(t){var e,n=o(t);if(x(),p("parse",e=k.Parser),h(e))return new e(String(n),n).parse();return e(String(n),n)};k.stringify=function(t,e){var n,r=o(e);if(x(),d("stringify",n=k.Compiler),m(t),h(n))return new n(t,r).compile();return n(t,r)};k.run=w;k.runSync=function(t,e){var n,r=!1;return w(t,e,function(t,e){r=!0,i(t),n=e}),v("runSync","run",r),n};k.process=O;k.processSync=function(t){var e,n=!1;return x(),p("processSync",k.Parser),d("processSync",k.Compiler),O(e=o(t),function(t){n=!0,i(t)}),v("processSync","process",n),e};return k;function k(){for(var n=t(),i=e.length,o=-1;++o<i;)n.use.apply(null,e[o]);return n.data(r(!0,{},y)),n}function x(){var t,r,i,o;if(A)return k;for(;++b<e.length;)t=e[b],r=t[0],i=t[1],o=null,!1!==i&&(!0===i&&(t[1]=void 0),"function"==typeof(o=r.apply(k,t.slice(1)))&&n.use(o));return A=!0,b=1/0,k}function w(t,e,r){if(m(t),x(),r||"function"!=typeof e||(r=e,e=null),!r)return new Promise(i);function i(i,a){n.run(t,o(e),function(e,n,o){n=n||t,e?a(e):i?i(n):r(null,n,o)})}i(null,r)}function O(t,e){if(x(),p("process",k.Parser),d("process",k.Compiler),!e)return new Promise(n);function n(n,r){var i=o(t);f.run(k,{file:i},function(t){t?r(t):n?n(i):e(null,i)})}n(null,e)}}().freeze();var u=[].slice,l={}.hasOwnProperty,f=a().use(function(t,e){e.tree=t.parse(e.file)}).use(function(t,e,n){t.run(e.tree,e.file,function(t,r,i){t?n(t):(e.tree=r,e.file=i,n())})}).use(function(t,e){e.file.contents=t.stringify(e.tree,e.file)});function h(t){return"function"==typeof t&&function(t){var e;for(e in t)return!0;return!1}(t.prototype)}function p(t,e){if("function"!=typeof e)throw new Error("Cannot `"+t+"` without `Parser`")}function d(t,e){if("function"!=typeof e)throw new Error("Cannot `"+t+"` without `Compiler`")}function g(t,e){if(e)throw new Error(["Cannot invoke `"+t+"` on a frozen processor.\nCreate a new ","processor first, by invoking it: use `processor()` instead of ","`processor`."].join(""))}function m(t){if(!t||!c(t.type))throw new Error("Expected node, got `"+t+"`")}function v(t,e,n){if(!n)throw new Error("`"+t+"` finished async. Use `"+e+"` instead")}},1579:function(t,e,n){"use strict";var r=Object.prototype.hasOwnProperty,i=Object.prototype.toString,o=Object.defineProperty,a=Object.getOwnPropertyDescriptor,c=function(t){return"function"==typeof Array.isArray?Array.isArray(t):"[object Array]"===i.call(t)},s=function(t){if(!t||"[object Object]"!==i.call(t))return!1;var e,n=r.call(t,"constructor"),o=t.constructor&&t.constructor.prototype&&r.call(t.constructor.prototype,"isPrototypeOf");if(t.constructor&&!n&&!o)return!1;for(e in t);return void 0===e||r.call(t,e)},u=function(t,e){o&&"__proto__"===e.name?o(t,e.name,{enumerable:!0,configurable:!0,value:e.newValue,writable:!0}):t[e.name]=e.newValue},l=function(t,e){if("__proto__"===e){if(!r.call(t,e))return;if(a)return a(t,e).value}return t[e]};t.exports=function t(){var e,n,r,i,o,a,f=arguments[0],h=1,p=arguments.length,d=!1;for("boolean"==typeof f&&(d=f,f=arguments[1]||{},h=2),(null==f||"object"!=typeof f&&"function"!=typeof f)&&(f={});h<p;++h)if(null!=(e=arguments[h]))for(n in e)r=l(f,n),f!==(i=l(e,n))&&(d&&i&&(s(i)||(o=c(i)))?(o?(o=!1,a=r&&c(r)?r:[]):a=r&&s(r)?r:{},u(f,{name:n,newValue:t(d,a,i)})):void 0!==i&&u(f,{name:n,newValue:i}));return f}},1580:function(t,e,n){"use strict";t.exports=function(t){if(t)throw t}},1581:function(t,e,n){"use strict";var r=n(1582),i=n(1584);t.exports=i;var o=i.prototype;function a(t,e,n){var i=this.path,o=new r(t,e,n);return i&&(o.name=i+":"+o.name,o.file=i),o.fatal=!1,this.messages.push(o),o}o.message=a,o.info=function(){var t=this.message.apply(this,arguments);return t.fatal=null,t},o.fail=function(){var t=this.message.apply(this,arguments);throw t.fatal=!0,t},o.warn=a},1582:function(t,e,n){"use strict";var r=n(1583);function i(){}t.exports=a,i.prototype=Error.prototype,a.prototype=new i;var o=a.prototype;function a(t,e,n){var i,o,a;"string"==typeof e&&(n=e,e=null),i=function(t){var e,n=[null,null];"string"==typeof t&&(-1===(e=t.indexOf(":"))?n[1]=t:(n[0]=t.slice(0,e),n[1]=t.slice(e+1)));return n}(n),o=r(e)||"1:1",a={start:{line:null,column:null},end:{line:null,column:null}},e&&e.position&&(e=e.position),e&&(e.start?(a=e,e=e.start):a.start=e),t.stack&&(this.stack=t.stack,t=t.message),this.message=t,this.name=o,this.reason=t,this.line=e?e.line:null,this.column=e?e.column:null,this.location=a,this.source=i[0],this.ruleId=i[1]}o.file="",o.name="",o.reason="",o.message="",o.stack="",o.fatal=null,o.column=null,o.line=null},1583:function(t,e,n){"use strict";var r={}.hasOwnProperty;function i(t){return t&&"object"==typeof t||(t={}),a(t.line)+":"+a(t.column)}function o(t){return t&&"object"==typeof t||(t={}),i(t.start)+"-"+i(t.end)}function a(t){return t&&"number"==typeof t?t:1}t.exports=function(t){if(!t||"object"!=typeof t)return null;if(r.call(t,"position")||r.call(t,"type"))return o(t.position);if(r.call(t,"start")||r.call(t,"end"))return o(t);if(r.call(t,"line")||r.call(t,"column"))return i(t);return null}},1584:function(t,e,n){"use strict";(function(e){var r=n(1194),i=n(1585),o=n(321);t.exports=u;var a={}.hasOwnProperty,c=u.prototype;c.toString=function(t){var e=this.contents||"";return o(e)?e.toString(t):String(e)};var s=["history","path","basename","stem","extname","dirname"];function u(t){var n,r,i;if(t){if("string"==typeof t||o(t))t={contents:t};else if("message"in t&&"messages"in t)return t}else t={};if(!(this instanceof u))return new u(t);for(this.data={},this.messages=[],this.history=[],this.cwd=e.cwd(),r=-1,i=s.length;++r<i;)n=s[r],a.call(t,n)&&(this[n]=t[n]);for(n in t)-1===s.indexOf(n)&&(this[n]=t[n])}function l(t,e){if(-1!==t.indexOf(r.sep))throw new Error("`"+e+"` cannot be a path: did not expect `"+r.sep+"`")}function f(t,e){if(!t)throw new Error("`"+e+"` cannot be empty")}function h(t,e){if(!t)throw new Error("Setting `"+e+"` requires `path` to be set too")}Object.defineProperty(c,"path",{get:function(){return this.history[this.history.length-1]},set:function(t){f(t,"path"),t!==this.path&&this.history.push(t)}}),Object.defineProperty(c,"dirname",{get:function(){return"string"==typeof this.path?r.dirname(this.path):void 0},set:function(t){h(this.path,"dirname"),this.path=r.join(t||"",this.basename)}}),Object.defineProperty(c,"basename",{get:function(){return"string"==typeof this.path?r.basename(this.path):void 0},set:function(t){f(t,"basename"),l(t,"basename"),this.path=r.join(this.dirname||"",t)}}),Object.defineProperty(c,"extname",{get:function(){return"string"==typeof this.path?r.extname(this.path):void 0},set:function(t){var e=t||"";if(l(e,"extname"),h(this.path,"extname"),e){if("."!==e.charAt(0))throw new Error("`extname` must start with `.`");if(-1!==e.indexOf(".",1))throw new Error("`extname` cannot contain multiple dots")}this.path=i(this.path,e)}}),Object.defineProperty(c,"stem",{get:function(){return"string"==typeof this.path?r.basename(this.path,this.extname):void 0},set:function(t){f(t,"stem"),l(t,"stem"),this.path=r.join(this.dirname||"",t+(this.extname||""))}})}).call(this,n(310))},1585:function(t,e,n){"use strict";var r=n(1194);t.exports=function(t,e){if("string"!=typeof t)return t;if(0===t.length)return t;var n=r.basename(t,r.extname(t))+e;return r.join(r.dirname(t),n)}},1586:function(t,e,n){"use strict";var r=n(1587);t.exports=o,o.wrap=r;var i=[].slice;function o(){var t=[],e={run:function(){var e=-1,n=i.call(arguments,0,-1),o=arguments[arguments.length-1];if("function"!=typeof o)throw new Error("Expected function as last argument, not "+o);(function a(c){var s=t[++e];var u=i.call(arguments,0);var l=u.slice(1);var f=n.length;var h=-1;if(c)return void o(c);for(;++h<f;)null!==l[h]&&void 0!==l[h]||(l[h]=n[h]);n=l;s?r(s,a).apply(null,n):o.apply(null,[null].concat(n))}).apply(null,[null].concat(n))},use:function(n){if("function"!=typeof n)throw new Error("Expected `fn` to be a function, not "+n);return t.push(n),e}};return e}},1587:function(t,e,n){"use strict";var r=[].slice;t.exports=function(t,e){var n;return function(){var e,a=r.call(arguments,0),c=t.length>a.length;c&&a.push(i);try{e=t.apply(null,a)}catch(t){if(c&&n)throw t;return i(t)}c||(e&&"function"==typeof e.then?e.then(o,i):e instanceof Error?i(e):o(e))};function i(){n||(n=!0,e.apply(null,arguments))}function o(t){i(null,t)}}},1588:function(t,e){var n=Object.prototype.toString;t.exports=function(t){return"[object String]"===n.call(t)}},1589:function(t,e,n){"use strict";var r=Object.prototype.toString;t.exports=function(t){var e;return"[object Object]"===r.call(t)&&(null===(e=Object.getPrototypeOf(t))||e===Object.getPrototypeOf({}))}},1590:function(t,e,n){"use strict";var r=n(1591),i=n(680),o=n(1592);function a(t){var e=r(o);e.prototype.options=i(e.prototype.options,this.data("settings"),t),this.Parser=e}t.exports=a,a.Parser=o},1591:function(t,e,n){"use strict";var r=n(680),i=n(669);t.exports=function(t){var e,n,o;for(n in i(c,t),i(a,c),e=c.prototype)(o=e[n])&&"object"==typeof o&&(e[n]="concat"in o?o.concat():r(o));return c;function a(e){return t.apply(this,e)}function c(){return this instanceof c?t.apply(this,arguments):new a(arguments)}}},1592:function(t,e,n){"use strict";var r=n(680),i=n(1593),o=n(1594),a=n(1595),c=n(1596),s=n(1602);function u(t,e){this.file=e,this.offset={},this.options=r(this.options),this.setOptions({}),this.inList=!1,this.inBlock=!1,this.inLink=!1,this.atStart=!0,this.toOffset=o(e).toOffset,this.unescape=a(this,"escape"),this.decode=c(this)}t.exports=u;var l=u.prototype;function f(t){var e,n=[];for(e in t)n.push(e);return n}l.setOptions=n(1603),l.parse=n(1606),l.options=n(1196),l.exitStart=i("atStart",!0),l.enterList=i("inList",!1),l.enterLink=i("inLink",!1),l.enterBlock=i("inBlock",!1),l.interruptParagraph=[["thematicBreak"],["atxHeading"],["fencedCode"],["blockquote"],["html"],["setextHeading",{commonmark:!1}],["definition",{commonmark:!1}],["footnote",{commonmark:!1}]],l.interruptList=[["atxHeading",{pedantic:!1}],["fencedCode",{pedantic:!1}],["thematicBreak",{pedantic:!1}],["definition",{commonmark:!1}],["footnote",{commonmark:!1}]],l.interruptBlockquote=[["indentedCode",{commonmark:!0}],["fencedCode",{commonmark:!0}],["atxHeading",{commonmark:!0}],["setextHeading",{commonmark:!0}],["thematicBreak",{commonmark:!0}],["html",{commonmark:!0}],["list",{commonmark:!0}],["definition",{commonmark:!1}],["footnote",{commonmark:!1}]],l.blockTokenizers={newline:n(1610),indentedCode:n(1611),fencedCode:n(1612),blockquote:n(1613),atxHeading:n(1614),thematicBreak:n(1615),list:n(1616),setextHeading:n(1618),html:n(1619),footnote:n(1620),definition:n(1622),table:n(1623),paragraph:n(1624)},l.inlineTokenizers={escape:n(1625),autoLink:n(1627),url:n(1628),html:n(1630),link:n(1631),reference:n(1632),strong:n(1633),emphasis:n(1635),deletion:n(1638),code:n(1640),break:n(1642),text:n(1644)},l.blockMethods=f(l.blockTokenizers),l.inlineMethods=f(l.inlineTokenizers),l.tokenizeBlock=s("block"),l.tokenizeInline=s("inline"),l.tokenizeFactory=s},1593:function(t,e,n){"use strict";t.exports=function(t,e,n){return function(){var r=n||this,i=r[t];return r[t]=!e,function(){r[t]=i}}}},1594:function(t,e,n){"use strict";function r(t){return function(e){var n=-1,r=t.length;if(e<0)return{};for(;++n<r;)if(t[n]>e)return{line:n+1,column:e-(t[n-1]||0)+1,offset:e};return{}}}function i(t){return function(e){var n=e&&e.line,r=e&&e.column;if(!isNaN(n)&&!isNaN(r)&&n-1 in t)return(t[n-2]||0)+r-1||0;return-1}}t.exports=function(t){var e=function(t){var e=[],n=t.indexOf("\n");for(;-1!==n;)e.push(n+1),n=t.indexOf("\n",n+1);return e.push(t.length+1),e}(String(t));return{toPosition:r(e),toOffset:i(e)}}},1595:function(t,e,n){"use strict";t.exports=function(t,e){return function(n){var r,i=0,o=n.indexOf("\\"),a=t[e],c=[];for(;-1!==o;)c.push(n.slice(i,o)),i=o+1,(r=n.charAt(i))&&-1!==a.indexOf(r)||c.push("\\"),o=n.indexOf("\\",i);return c.push(n.slice(i)),c.join("")}}},1596:function(t,e,n){"use strict";var r=n(680),i=n(823);t.exports=function(t){return o.raw=function(t,o,a){return i(t,r(a,{position:e(o),warning:n}))},o;function e(e){for(var n=t.offset,r=e.line,i=[];++r&&r in n;)i.push((n[r]||0)+1);return{start:e,indent:i}}function n(e,n,r){3!==r&&t.file.message(e,n)}function o(r,o,a){i(r,{position:e(o),warning:n,text:a,reference:a,textContext:t,referenceContext:t})}}},1597:function(t){t.exports={AElig:"Æ",AMP:"&",Aacute:"Á",Acirc:"Â",Agrave:"À",Aring:"Å",Atilde:"Ã",Auml:"Ä",COPY:"©",Ccedil:"Ç",ETH:"Ð",Eacute:"É",Ecirc:"Ê",Egrave:"È",Euml:"Ë",GT:">",Iacute:"Í",Icirc:"Î",Igrave:"Ì",Iuml:"Ï",LT:"<",Ntilde:"Ñ",Oacute:"Ó",Ocirc:"Ô",Ograve:"Ò",Oslash:"Ø",Otilde:"Õ",Ouml:"Ö",QUOT:'"',REG:"®",THORN:"Þ",Uacute:"Ú",Ucirc:"Û",Ugrave:"Ù",Uuml:"Ü",Yacute:"Ý",aacute:"á",acirc:"â",acute:"´",aelig:"æ",agrave:"à",amp:"&",aring:"å",atilde:"ã",auml:"ä",brvbar:"¦",ccedil:"ç",cedil:"¸",cent:"¢",copy:"©",curren:"¤",deg:"°",divide:"÷",eacute:"é",ecirc:"ê",egrave:"è",eth:"ð",euml:"ë",frac12:"½",frac14:"¼",frac34:"¾",gt:">",iacute:"í",icirc:"î",iexcl:"¡",igrave:"ì",iquest:"¿",iuml:"ï",laquo:"«",lt:"<",macr:"¯",micro:"µ",middot:"·",nbsp:" ",not:"¬",ntilde:"ñ",oacute:"ó",ocirc:"ô",ograve:"ò",ordf:"ª",ordm:"º",oslash:"ø",otilde:"õ",ouml:"ö",para:"¶",plusmn:"±",pound:"£",quot:'"',raquo:"»",reg:"®",sect:"§",shy:"­",sup1:"¹",sup2:"²",sup3:"³",szlig:"ß",thorn:"þ",times:"×",uacute:"ú",ucirc:"û",ugrave:"ù",uml:"¨",uuml:"ü",yacute:"ý",yen:"¥",yuml:"ÿ"}},1598:function(t){t.exports={0:"�",128:"€",130:"‚",131:"ƒ",132:"„",133:"…",134:"†",135:"‡",136:"ˆ",137:"‰",138:"Š",139:"‹",140:"Œ",142:"Ž",145:"‘",146:"’",147:"“",148:"”",149:"•",150:"–",151:"—",152:"˜",153:"™",154:"š",155:"›",156:"œ",158:"ž",159:"Ÿ"}},1599:function(t,e,n){"use strict";t.exports=function(t){var e="string"==typeof t?t.charCodeAt(0):t;return e>=97&&e<=102||e>=65&&e<=70||e>=48&&e<=57}},1600:function(t,e,n){"use strict";var r=n(1195),i=n(769);t.exports=function(t){return r(t)||i(t)}},1601:function(t,e,n){"use strict";var r,i=59;t.exports=function(t){var e,n="&"+t+";";if((r=r||document.createElement("i")).innerHTML=n,(e=r.textContent).charCodeAt(e.length-1)===i&&"semi"!==t)return!1;return e!==n&&e}},1602:function(t,e,n){"use strict";t.exports=function(t){return function(e,n){var o,a,c,s,u,l,f=this,h=f.offset,p=[],d=f[t+"Methods"],g=f[t+"Tokenizers"],m=n.line,v=n.column;if(!e)return p;k.now=A,k.file=f.file,y("");for(;e;){for(o=-1,a=d.length,u=!1;++o<a&&(s=d[o],!(c=g[s])||c.onlyAtStart&&!f.atStart||c.notInList&&f.inList||c.notInBlock&&f.inBlock||c.notInLink&&f.inLink||(l=e.length,c.apply(f,[k,e]),!(u=l!==e.length))););u||f.file.fail(new Error("Infinite loop"),k.now())}return f.eof=A(),p;function y(t){for(var e=-1,n=t.indexOf("\n");-1!==n;)m++,e=n,n=t.indexOf("\n",n+1);-1===e?v+=t.length:v=t.length-e,m in h&&(-1!==e?v+=h[m]:v<=h[m]&&(v=h[m]+1))}function A(){var t={line:m,column:v};return t.offset=f.toOffset(t),t}function b(t){this.start=t,this.end=A()}function k(t){var n=function(){var t=[],e=m+1;return function(){for(var n=m+1;e<n;)t.push((h[e]||0)+1),e++;return t}}(),o=function(){var t=A();return function(e,n){var r=e.position,i=r?r.start:t,o=[],a=r&&r.end.line,c=t.line;if(e.position=new b(i),r&&n&&r.indent){if(o=r.indent,a<c){for(;++a<c;)o.push((h[a]||0)+1);o.push(t.column)}n=o.concat(n)}return e.position.indent=n||[],e}}(),a=A();return function(t){e.substring(0,t.length)!==t&&f.file.fail(new Error("Incorrectly eaten value: please report this warning on http://git.io/vg5Ft"),A())}(t),c.reset=s,s.test=u,c.test=u,e=e.substring(t.length),y(t),n=n(),c;function c(t,e){return o(function(t,e){var n=e?e.children:p,o=n[n.length-1];o&&t.type===o.type&&t.type in r&&i(o)&&i(t)&&(t=r[t.type].call(f,o,t));t!==o&&n.push(t);f.atStart&&0!==p.length&&f.exitStart();return t}(o(t),e),n)}function s(){var n=c.apply(null,arguments);return m=a.line,v=a.column,e=t+e,n}function u(){var n=o({});return m=a.line,v=a.column,e=t+e,n.position}}}};var r={text:function(t,e){return t.value+=e.value,t},blockquote:function(t,e){if(this.options.commonmark)return e;return t.children=t.children.concat(e.children),t}};function i(t){var e,n;return"text"!==t.type||!t.position||(e=t.position.start,n=t.position.end,e.line!==n.line||n.column-e.column===t.value.length)}},1603:function(t,e,n){"use strict";var r=n(680),i=n(1604),o=n(1196);t.exports=function(t){var e,n,a=this.options;if(null==t)t={};else{if("object"!=typeof t)throw new Error("Invalid value `"+t+"` for setting `options`");t=r(t)}for(e in o){if(null==(n=t[e])&&(n=a[e]),"blocks"!==e&&"boolean"!=typeof n||"blocks"===e&&"object"!=typeof n)throw new Error("Invalid value `"+n+"` for setting `options."+e+"`");t[e]=n}return this.options=t,this.escape=i(t),this}},1604:function(t,e,n){"use strict";t.exports=a;var r=["\\","`","*","{","}","[","]","(",")","#","+","-",".","!","_",">"],i=r.concat(["~","|"]),o=i.concat(["\n",'"',"$","%","&","'",",","/",":",";","<","=","?","@","^"]);function a(t){var e=t||{};return e.commonmark?o:e.gfm?i:r}a.default=r,a.gfm=i,a.commonmark=o},1605:function(t){t.exports=["address","article","aside","base","basefont","blockquote","body","caption","center","col","colgroup","dd","details","dialog","dir","div","dl","dt","fieldset","figcaption","figure","footer","form","frame","frameset","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","iframe","legend","li","link","main","menu","menuitem","meta","nav","noframes","ol","optgroup","option","p","param","pre","section","source","title","summary","table","tbody","td","tfoot","th","thead","title","tr","track","ul"]},1606:function(t,e,n){"use strict";var r=n(680),i=n(1607);t.exports=function(){var t,e=String(this.file),n={line:1,column:1,offset:0},c=r(n);65279===(e=e.replace(a,o)).charCodeAt(0)&&(e=e.slice(1),c.column++,c.offset++);t={type:"root",children:this.tokenizeBlock(e,c),position:{start:n,end:this.eof||r(n)}},this.options.position||i(t,!0);return t};var o="\n",a=/\r\n|\r/g},1607:function(t,e,n){"use strict";var r=n(770);function i(t){delete t.position}function o(t){t.position=void 0}t.exports=function(t,e){return r(t,e?i:o),t}},1608:function(t,e,n){"use strict";t.exports=c;var r=n(1609),i=!0,o="skip",a=!1;function c(t,e,n,i){var c;function u(t,r,l){var f,h=[];return(e&&!c(t,r,l[l.length-1]||null)||(h=s(n(t,l)))[0]!==a)&&t.children&&h[0]!==o&&(f=s(function(t,e){var n,r=i?-1:1,o=(i?t.length:-1)+r;for(;o>-1&&o<t.length;){if((n=u(t[o],o,e))[0]===a)return n;o="number"==typeof n[1]?n[1]:o+r}}(t.children,l.concat(t))))[0]===a?f:h}"function"==typeof e&&"function"!=typeof n&&(i=n,n=e,e=null),c=r(e),u(t,null,[])}function s(t){return null!==t&&"object"==typeof t&&"length"in t?t:"number"==typeof t?[i,t]:[t]}c.CONTINUE=i,c.SKIP=o,c.EXIT=a},1609:function(t,e,n){"use strict";function r(t){if("string"==typeof t)return function(t){return function(e){return Boolean(e&&e.type===t)}}(t);if(null==t)return i;if("object"==typeof t)return("length"in t?function(t){var e=function(t){var e=[],n=t.length,i=-1;for(;++i<n;)e[i]=r(t[i]);return e}(t),n=e.length;return function(){var t=-1;for(;++t<n;)if(e[t].apply(this,arguments))return!0;return!1}}:function(t){return function(e){var n;for(n in t)if(e[n]!==t[n])return!1;return!0}})(t);if("function"==typeof t)return t;throw new Error("Expected function, string, or object as test")}function i(){return!0}t.exports=r},1610:function(t,e,n){"use strict";var r=n(666);t.exports=function(t,e,n){var i,o,a,c,s=e.charAt(0);if("\n"!==s)return;if(n)return!0;c=1,i=e.length,o=s,a="";for(;c<i&&(s=e.charAt(c),r(s));)a+=s,"\n"===s&&(o+=a,a=""),c++;t(o)}},1611:function(t,e,n){"use strict";var r=n(736),i=n(824);t.exports=function(t,e,n){var r,u,l,f=-1,h=e.length,p="",d="",g="",m="";for(;++f<h;)if(r=e.charAt(f),l)if(l=!1,p+=g,d+=m,g="",m="",r===o)g=r,m=r;else for(p+=r,d+=r;++f<h;){if(!(r=e.charAt(f))||r===o){m=r,g=r;break}p+=r,d+=r}else if(r===c&&e.charAt(f+1)===r&&e.charAt(f+2)===r&&e.charAt(f+3)===r)g+=s,f+=3,l=!0;else if(r===a)g+=r,l=!0;else{for(u="";r===a||r===c;)u+=r,r=e.charAt(++f);if(r!==o)break;g+=u+r,m+=r}if(d)return!!n||t(p)({type:"code",lang:null,value:i(d)})};var o="\n",a="\t",c=" ",s=r(c,4)},1612:function(t,e,n){"use strict";var r=n(824);t.exports=function(t,e,n){var f,h,p,d,g,m,v,y,A,b,k,x=this.options,w=e.length+1,O=0,j="";if(!x.gfm)return;for(;O<w&&((p=e.charAt(O))===a||p===o);)j+=p,O++;if(b=O,(p=e.charAt(O))!==c&&p!==s)return;O++,h=p,f=1,j+=p;for(;O<w&&(p=e.charAt(O))===h;)j+=p,f++,O++;if(f<u)return;for(;O<w&&((p=e.charAt(O))===a||p===o);)j+=p,O++;d="",g="";for(;O<w&&(p=e.charAt(O))!==i&&p!==c&&p!==s;)p===a||p===o?g+=p:(d+=g+p,g=""),O++;if((p=e.charAt(O))&&p!==i)return;if(n)return!0;(k=t.now()).column+=j.length,k.offset+=j.length,j+=d,d=this.decode.raw(this.unescape(d),k),g&&(j+=g);g="",y="",A="",m="",v="";for(;O<w;)if(p=e.charAt(O),m+=y,v+=A,y="",A="",p===i){for(m?(y+=p,A+=p):j+=p,g="",O++;O<w&&(p=e.charAt(O))===a;)g+=p,O++;if(y+=g,A+=g.slice(b),!(g.length>=l)){for(g="";O<w&&(p=e.charAt(O))===h;)g+=p,O++;if(y+=g,A+=g,!(g.length<f)){for(g="";O<w&&((p=e.charAt(O))===a||p===o);)y+=p,A+=p,O++;if(!p||p===i)break}}}else m+=p,A+=p,O++;return t(j+=m+y)({type:"code",lang:d||null,value:r(v)})};var i="\n",o="\t",a=" ",c="~",s="`",u=3,l=4},1613:function(t,e,n){"use strict";var r=n(713),i=n(825);t.exports=function(t,e,n){var u,l,f,h,p,d,g,m,v,y=this.offset,A=this.blockTokenizers,b=this.interruptBlockquote,k=t.now(),x=k.line,w=e.length,O=[],j=[],C=[],E=0;for(;E<w&&((l=e.charAt(E))===c||l===a);)E++;if(e.charAt(E)!==s)return;if(n)return!0;E=0;for(;E<w;){for(h=e.indexOf(o,E),g=E,m=!1,-1===h&&(h=w);E<w&&((l=e.charAt(E))===c||l===a);)E++;if(e.charAt(E)===s?(E++,m=!0,e.charAt(E)===c&&E++):E=g,p=e.slice(E,h),!m&&!r(p)){E=g;break}if(!m&&(f=e.slice(E),i(b,A,this,[t,f,!0])))break;d=g===E?p:e.slice(g,h),C.push(E-g),O.push(d),j.push(p),E=h+1}E=-1,w=C.length,u=t(O.join(o));for(;++E<w;)y[x]=(y[x]||0)+C[E],x++;return v=this.enterBlock(),j=this.tokenizeBlock(j.join(o),k),v(),u({type:"blockquote",children:j})};var o="\n",a="\t",c=" ",s=">"},1614:function(t,e,n){"use strict";t.exports=function(t,e,n){var s,u,l,f=this.options,h=e.length+1,p=-1,d=t.now(),g="",m="";for(;++p<h;){if((s=e.charAt(p))!==o&&s!==i){p--;break}g+=s}l=0;for(;++p<=h;){if((s=e.charAt(p))!==a){p--;break}g+=s,l++}if(l>c)return;if(!l||!f.pedantic&&e.charAt(p+1)===a)return;h=e.length+1,u="";for(;++p<h;){if((s=e.charAt(p))!==o&&s!==i){p--;break}u+=s}if(!f.pedantic&&0===u.length&&s&&s!==r)return;if(n)return!0;g+=u,u="",m="";for(;++p<h&&(s=e.charAt(p))&&s!==r;)if(s===o||s===i||s===a){for(;s===o||s===i;)u+=s,s=e.charAt(++p);for(;s===a;)u+=s,s=e.charAt(++p);for(;s===o||s===i;)u+=s,s=e.charAt(++p);p--}else m+=u+s,u="";return d.column+=g.length,d.offset+=g.length,t(g+=m+u)({type:"heading",depth:l,children:this.tokenizeInline(m,d)})};var r="\n",i="\t",o=" ",a="#",c=6},1615:function(t,e,n){"use strict";t.exports=function(t,e,n){var l,f,h,p,d=-1,g=e.length+1,m="";for(;++d<g&&((l=e.charAt(d))===i||l===o);)m+=l;if(l!==a&&l!==s&&l!==c)return;f=l,m+=l,h=1,p="";for(;++d<g;)if((l=e.charAt(d))===f)h++,m+=p+f,p="";else{if(l!==o)return h>=u&&(!l||l===r)?(m+=p,!!n||t(m)({type:"thematicBreak"})):void 0;p+=l}};var r="\n",i="\t",o=" ",a="*",c="_",s="-",u=3},1616:function(t,e,n){"use strict";var r=n(713),i=n(736),o=n(769),a=n(1197),c=n(1617),s=n(825);t.exports=function(t,e,n){var i,a,c,g,v,y,A,b,k,C,E,T,I,P,S,z,L,H,_,N,B,R,U,M,q=this.options.commonmark,$=this.options.pedantic,D=this.blockTokenizers,F=this.interruptList,Z=0,K=e.length,V=null,X=0;for(;Z<K;){if((g=e.charAt(Z))===d)X+=m-X%m;else{if(g!==h)break;X++}Z++}if(X>=m)return;if(g=e.charAt(Z),i=q?O:w,!0===x[g])v=g,c=!1;else{for(c=!0,a="";Z<K&&(g=e.charAt(Z),o(g));)a+=g,Z++;if(g=e.charAt(Z),!a||!0!==i[g])return;V=parseInt(a,10),v=g}if((g=e.charAt(++Z))!==h&&g!==d)return;if(n)return!0;Z=0,P=[],S=[],z=[];for(;Z<K;){for(y=e.indexOf(p,Z),A=Z,b=!1,M=!1,-1===y&&(y=K),U=Z+m,X=0;Z<K;){if((g=e.charAt(Z))===d)X+=m-X%m;else{if(g!==h)break;X++}Z++}if(X>=m&&(M=!0),L&&X>=L.indent&&(M=!0),g=e.charAt(Z),k=null,!M){if(!0===x[g])k=g,Z++,X++;else{for(a="";Z<K&&(g=e.charAt(Z),o(g));)a+=g,Z++;g=e.charAt(Z),Z++,a&&!0===i[g]&&(k=g,X+=a.length+1)}if(k)if((g=e.charAt(Z))===d)X+=m-X%m,Z++;else if(g===h){for(U=Z+m;Z<U&&e.charAt(Z)===h;)Z++,X++;Z===U&&e.charAt(Z)===h&&(Z-=m-1,X-=m-1)}else g!==p&&""!==g&&(k=null)}if(k){if(!$&&v!==k)break;b=!0}else q||M||e.charAt(A)!==h?q&&L&&(M=X>=L.indent||X>m):M=!0,b=!1,Z=A;if(E=e.slice(A,y),C=A===Z?E:e.slice(Z,y),(k===u||k===l||k===f)&&D.thematicBreak.call(this,t,E,!0))break;if(T=I,I=!r(C).length,M&&L)L.value=L.value.concat(z,E),S=S.concat(z,E),z=[];else if(b)0!==z.length&&(L.value.push(""),L.trail=z.concat()),L={value:[E],indent:X,trail:[]},P.push(L),S=S.concat(z,E),z=[];else if(I){if(T)break;z.push(E)}else{if(T)break;if(s(F,D,this,[t,E,!0]))break;L.value=L.value.concat(z,E),S=S.concat(z,E),z=[]}Z=y+1}B=t(S.join(p)).reset({type:"list",ordered:c,start:V,loose:null,children:[]}),H=this.enterList(),_=this.enterBlock(),N=!1,Z=-1,K=P.length;for(;++Z<K;)L=P[Z].value.join(p),R=t.now(),(L=t(L)(j(this,L,R),B)).loose&&(N=!0),L=P[Z].trail.join(p),Z!==K-1&&(L+=p),t(L);return H(),_(),B.loose=N,B};var u="*",l="_",f="-",h=" ",p="\n",d="\t",g="x",m=4,v=/\n\n(?!\s*$)/,y=/^\[([ \t]|x|X)][ \t]/,A=/^([ \t]*)([*+-]|\d+[.)])( {1,4}(?! )| |\t|$|(?=\n))([^\n]*)/,b=/^([ \t]*)([*+-]|\d+[.)])([ \t]+)/,k=/^( {1,4}|\t)?/gm,x={};x[u]=!0,x["+"]=!0,x[f]=!0;var w={".":!0},O={};function j(t,e,n){var r,i,o=t.offset,a=null;return e=(t.options.pedantic?C:E).apply(null,arguments),t.options.gfm&&(r=e.match(y))&&(i=r[0].length,a=r[1].toLowerCase()===g,o[n.line]+=i,e=e.slice(i)),{type:"listItem",loose:v.test(e)||e.charAt(e.length-1)===p,checked:a,children:t.tokenizeBlock(e,n)}}function C(t,e,n){var r=t.offset,i=n.line;return e=e.replace(b,o),i=n.line,e.replace(k,o);function o(t){return r[i]=(r[i]||0)+t.length,i++,""}}function E(t,e,n){var r,o,s,u,l,f,d,g=t.offset,m=n.line;for(u=(e=e.replace(A,function(t,e,n,a,c){o=e+n+a,s=c,Number(n)<10&&o.length%2==1&&(n=h+n);return(r=e+i(h,n.length)+a)+s})).split(p),(l=c(e,a(r).indent).split(p))[0]=s,g[m]=(g[m]||0)+o.length,m++,f=0,d=u.length;++f<d;)g[m]=(g[m]||0)+u[f].length-l[f].length,m++;return l.join(p)}O["."]=!0,O[")"]=!0},1617:function(t,e,n){"use strict";var r=n(713),i=n(736),o=n(1197);t.exports=function(t,e){var n,u,l,f,h=t.split(c),p=h.length+1,d=1/0,g=[];h.unshift(i(a,e)+"!");for(;p--;)if(u=o(h[p]),g[p]=u.stops,0!==r(h[p]).length){if(!u.indent){d=1/0;break}u.indent>0&&u.indent<d&&(d=u.indent)}if(d!==1/0)for(p=h.length;p--;){for(l=g[p],n=d;n&&!(n in l);)n--;f=0!==r(h[p]).length&&d&&n!==d?s:"",h[p]=f+h[p].slice(n in l?l[n]+1:0)}return h.shift(),h.join(c)};var a=" ",c="\n",s="\t"},1618:function(t,e,n){"use strict";t.exports=function(t,e,n){var s,u,l,f,h,p=t.now(),d=e.length,g=-1,m="";for(;++g<d;){if((l=e.charAt(g))!==o||g>=a){g--;break}m+=l}s="",u="";for(;++g<d;){if((l=e.charAt(g))===r){g--;break}l===o||l===i?u+=l:(s+=u+l,u="")}if(p.column+=m.length,p.offset+=m.length,m+=s+u,l=e.charAt(++g),f=e.charAt(++g),l!==r||!c[f])return;m+=l,u=f,h=c[f];for(;++g<d;){if((l=e.charAt(g))!==f){if(l!==r)return;g--;break}u+=l}if(n)return!0;return t(m+u)({type:"heading",depth:h,children:this.tokenizeInline(s,p)})};var r="\n",i="\t",o=" ",a=3,c={};c["="]=1,c["-"]=2},1619:function(t,e,n){"use strict";var r=n(1198).openCloseTag;t.exports=function(t,e,n){var s,u,l,f,h,p,d,g=this.options.blocks,m=e.length,v=0,y=[[/^<(script|pre|style)(?=(\s|>|$))/i,/<\/(script|pre|style)>/i,!0],[/^<!--/,/-->/,!0],[/^<\?/,/\?>/,!0],[/^<![A-Za-z]/,/>/,!0],[/^<!\[CDATA\[/,/\]\]>/,!0],[new RegExp("^</?("+g.join("|")+")(?=(\\s|/?>|$))","i"),/^$/,!0],[new RegExp(r.source+"\\s*$"),/^$/,!1]];for(;v<m&&((f=e.charAt(v))===i||f===o);)v++;if(e.charAt(v)!==c)return;s=-1===(s=e.indexOf(a,v+1))?m:s,u=e.slice(v,s),l=-1,h=y.length;for(;++l<h;)if(y[l][0].test(u)){p=y[l];break}if(!p)return;if(n)return p[2];if(v=s,!p[1].test(u))for(;v<m;){if(s=-1===(s=e.indexOf(a,v+1))?m:s,u=e.slice(v+1,s),p[1].test(u)){u&&(v=s);break}v=s}return d=e.slice(0,v),t(d)({type:"html",value:d})};var i="\t",o=" ",a="\n",c="<"},1620:function(t,e,n){"use strict";var r=n(666),i=n(826);t.exports=d,d.notInList=!0,d.notInBlock=!0;var o="\\",a="\n",c="\t",s=" ",u="[",l="]",f="^",h=":",p=/^( {4}|\t)?/gm;function d(t,e,n){var d,g,m,v,y,A,b,k,x,w,O,j,C=this.offset;if(this.options.footnotes){for(d=0,g=e.length,m="",v=t.now(),y=v.line;d<g&&(x=e.charAt(d),r(x));)m+=x,d++;if(e.charAt(d)===u&&e.charAt(d+1)===f){for(d=(m+=u+f).length,b="";d<g&&(x=e.charAt(d))!==l;)x===o&&(b+=x,d++,x=e.charAt(d)),b+=x,d++;if(b&&e.charAt(d)===l&&e.charAt(d+1)===h){if(n)return!0;for(w=i(b),d=(m+=b+l+h).length;d<g&&((x=e.charAt(d))===c||x===s);)m+=x,d++;for(v.column+=m.length,v.offset+=m.length,b="",A="",k="";d<g;){if((x=e.charAt(d))===a){for(k=x,d++;d<g&&(x=e.charAt(d))===a;)k+=x,d++;for(b+=k,k="";d<g&&(x=e.charAt(d))===s;)k+=x,d++;if(0===k.length)break;b+=k}b&&(A+=b,b=""),A+=x,d++}return m+=A,A=A.replace(p,function(t){return C[y]=(C[y]||0)+t.length,y++,""}),O=t(m),j=this.enterBlock(),A=this.tokenizeBlock(A,v),j(),O({type:"footnoteDefinition",identifier:w,children:A})}}}}},1621:function(t,e,n){"use strict";t.exports=function(t){return String(t).replace(/\s+/g," ")}},1622:function(t,e,n){"use strict";var r=n(666),i=n(826);t.exports=y,y.notInList=!0,y.notInBlock=!0;var o='"',a="'",c="\\",s="\n",u="\t",l=" ",f="[",h="]",p="(",d=")",g=":",m="<",v=">";function y(t,e,n){for(var r,v,y,k,x,w,O,j,C=this.options.commonmark,E=0,T=e.length,I="";E<T&&((k=e.charAt(E))===l||k===u);)I+=k,E++;if((k=e.charAt(E))===f){for(E++,I+=k,y="";E<T&&(k=e.charAt(E))!==h;)k===c&&(y+=k,E++,k=e.charAt(E)),y+=k,E++;if(y&&e.charAt(E)===h&&e.charAt(E+1)===g){for(w=y,E=(I+=y+h+g).length,y="";E<T&&((k=e.charAt(E))===u||k===l||k===s);)I+=k,E++;if(y="",r=I,(k=e.charAt(E))===m){for(E++;E<T&&A(k=e.charAt(E));)y+=k,E++;if((k=e.charAt(E))===A.delimiter)I+=m+y+k,E++;else{if(C)return;E-=y.length+1,y=""}}if(!y){for(;E<T&&b(k=e.charAt(E));)y+=k,E++;I+=y}if(y){for(O=y,y="";E<T&&((k=e.charAt(E))===u||k===l||k===s);)y+=k,E++;if(x=null,(k=e.charAt(E))===o?x=o:k===a?x=a:k===p&&(x=d),x){if(!y)return;for(E=(I+=y+k).length,y="";E<T&&(k=e.charAt(E))!==x;){if(k===s){if(E++,(k=e.charAt(E))===s||k===x)return;y+=s}y+=k,E++}if((k=e.charAt(E))!==x)return;v=I,I+=y+k,E++,j=y,y=""}else y="",E=I.length;for(;E<T&&((k=e.charAt(E))===u||k===l);)I+=k,E++;return(k=e.charAt(E))&&k!==s?void 0:!!n||(r=t(r).test().end,O=this.decode.raw(this.unescape(O),r,{nonTerminated:!1}),j&&(v=t(v).test().end,j=this.decode.raw(this.unescape(j),v)),t(I)({type:"definition",identifier:i(w),title:j||null,url:O}))}}}}function A(t){return t!==v&&t!==f&&t!==h}function b(t){return t!==f&&t!==h&&!r(t)}A.delimiter=v},1623:function(t,e,n){"use strict";var r=n(666);t.exports=function(t,e,n){var y,A,b,k,x,w,O,j,C,E,T,I,P,S,z,L,H,_,N,B,R,U,M,q;if(!this.options.gfm)return;y=0,_=0,w=e.length+1,O=[];for(;y<w;){if(U=e.indexOf(l,y),M=e.indexOf(c,y+1),-1===U&&(U=e.length),-1===M||M>U){if(_<p)return;break}O.push(e.slice(y,U)),_++,y=U+1}k=O.join(l),A=O.splice(1,1)[0]||[],y=0,w=A.length,_--,b=!1,T=[];for(;y<w;){if((C=A.charAt(y))===c){if(E=null,!1===b){if(!1===q)return}else T.push(b),b=!1;q=!1}else if(C===a)E=!0,b=b||v;else if(C===s)b=b===d?g:E&&b===v?m:d;else if(!r(C))return;y++}!1!==b&&T.push(b);if(T.length<h)return;if(n)return!0;H=-1,B=[],R=t(k).reset({type:"table",align:T,children:B});for(;++H<_;){for(N=O[H],x={type:"tableRow",children:[]},H&&t(l),t(N).reset(x,R),w=N.length+1,y=0,j="",I="",P=!0,S=null,z=null;y<w;)if((C=N.charAt(y))!==f&&C!==u){if(""===C||C===c)if(P)t(C);else{if(C&&z){j+=C,y++;continue}!I&&!C||P||(k=I,j.length>1&&(C?(k+=j.slice(0,j.length-1),j=j.charAt(j.length-1)):(k+=j,j="")),L=t.now(),t(k)({type:"tableCell",children:this.tokenizeInline(I,L)},x)),t(j+C),j="",I=""}else if(j&&(I+=j,j=""),I+=C,C===i&&y!==w-2&&(I+=N.charAt(y+1),y++),C===o){for(S=1;N.charAt(y+1)===C;)I+=C,y++,S++;z?S>=z&&(z=0):z=S}P=!1,y++}else I?j+=C:t(C),y++;H||t(l+A)}return R};var i="\\",o="`",a="-",c="|",s=":",u=" ",l="\n",f="\t",h=1,p=2,d="left",g="center",m="right",v=null},1624:function(t,e,n){"use strict";var r=n(713),i=n(769),o=n(824),a=n(825);t.exports=function(t,e,n){var f,h,p,d,g,m=this.options,v=m.commonmark,y=m.gfm,A=this.blockTokenizers,b=this.interruptParagraph,k=e.indexOf(c),x=e.length;for(;k<x;){if(-1===k){k=x;break}if(e.charAt(k+1)===c)break;if(v){for(d=0,f=k+1;f<x;){if((p=e.charAt(f))===s){d=l;break}if(p!==u)break;d++,f++}if(d>=l){k=e.indexOf(c,k+1);continue}}if(h=e.slice(k+1),a(b,A,this,[t,h,!0]))break;if(A.list.call(this,t,h,!0)&&(this.inList||v||y&&!i(r.left(h).charAt(0))))break;if(f=k,-1!==(k=e.indexOf(c,k+1))&&""===r(e.slice(f,k))){k=f;break}}if(h=e.slice(0,k),""===r(h))return t(h),null;if(n)return!0;return g=t.now(),h=o(h),t(h)({type:"paragraph",children:this.tokenizeInline(h,g)})};var c="\n",s="\t",u=" ",l=4},1625:function(t,e,n){"use strict";var r=n(1626);function i(t,e,n){var r,i;if("\\"===e.charAt(0)&&(r=e.charAt(1),-1!==this.escape.indexOf(r)))return!!n||(i="\n"===r?{type:"break"}:{type:"text",value:r},t("\\"+r)(i))}t.exports=i,i.locator=r},1626:function(t,e,n){"use strict";t.exports=function(t,e){return t.indexOf("\\",e)}},1627:function(t,e,n){"use strict";var r=n(666),i=n(823),o=n(1199);t.exports=h,h.locator=o,h.notInLink=!0;var a="<",c=">",s="@",u="/",l="mailto:",f=l.length;function h(t,e,n){var o,h,p,d,g,m,v,y,A,b,k;if(e.charAt(0)===a){for(this,o="",h=e.length,p=0,d="",m=!1,v="",p++,o=a;p<h&&(g=e.charAt(p),!(r(g)||g===c||g===s||":"===g&&e.charAt(p+1)===u));)d+=g,p++;if(d){if(v+=d,d="",v+=g=e.charAt(p),p++,g===s)m=!0;else{if(":"!==g||e.charAt(p+1)!==u)return;v+=u,p++}for(;p<h&&(g=e.charAt(p),!r(g)&&g!==c);)d+=g,p++;if(g=e.charAt(p),d&&g===c)return!!n||(A=v+=d,o+=v+g,(y=t.now()).column++,y.offset++,m&&(v.slice(0,f).toLowerCase()===l?(A=A.substr(f),y.column+=f,y.offset+=f):v=l+v),b=this.inlineTokenizers,this.inlineTokenizers={text:b.text},k=this.enterLink(),A=this.tokenizeInline(A,y),this.inlineTokenizers=b,k(),t(o)({type:"link",title:null,url:i(v,{nonTerminated:!1}),children:A}))}}}},1628:function(t,e,n){"use strict";var r=n(823),i=n(666),o=n(1629);t.exports=g,g.locator=o,g.notInLink=!0;var a="[",c="]",s="(",u=")",l="<",f="@",h="mailto:",p=["http://","https://",h],d=p.length;function g(t,e,n){var o,g,m,v,y,A,b,k,x,w,O,j;if(this.options.gfm){for(o="",v=-1,k=d;++v<k;)if(A=p[v],(b=e.slice(0,A.length)).toLowerCase()===A){o=b;break}if(o){for(v=o.length,k=e.length,x="",w=0;v<k&&(m=e.charAt(v),!i(m)&&m!==l)&&("."!==m&&","!==m&&":"!==m&&";"!==m&&'"'!==m&&"'"!==m&&")"!==m&&"]"!==m||(O=e.charAt(v+1))&&!i(O))&&(m!==s&&m!==a||w++,m!==u&&m!==c||!(--w<0));)x+=m,v++;if(x){if(g=o+=x,A===h){if(-1===(y=x.indexOf(f))||y===k-1)return;g=g.substr(h.length)}return!!n||(j=this.enterLink(),g=this.tokenizeInline(g,t.now()),j(),t(o)({type:"link",title:null,url:r(o,{nonTerminated:!1}),children:g}))}}}}},1629:function(t,e,n){"use strict";t.exports=function(t,e){var n,i=r.length,o=-1,a=-1;if(!this.options.gfm)return-1;for(;++o<i;)-1!==(n=t.indexOf(r[o],e))&&(n<a||-1===a)&&(a=n);return a};var r=["https://","http://","mailto:"]},1630:function(t,e,n){"use strict";var r=n(1195),i=n(1199),o=n(1198).tag;t.exports=s,s.locator=i;var a=/^<a /i,c=/^<\/a>/i;function s(t,e,n){var i,s,u=e.length;if(!("<"!==e.charAt(0)||u<3)&&(i=e.charAt(1),(r(i)||"?"===i||"!"===i||"/"===i)&&(s=e.match(o))))return!!n||(s=s[0],!this.inLink&&a.test(s)?this.inLink=!0:this.inLink&&c.test(s)&&(this.inLink=!1),t(s)({type:"html",value:s}))}},1631:function(t,e,n){"use strict";var r=n(666),i=n(1200);t.exports=m,m.locator=i;var o={}.hasOwnProperty,a="\\",c="[",s="]",u="(",l=")",f="<",h=">",p="`",d={'"':'"',"'":"'"},g={};function m(t,e,n){var i,m,v,y,A,b,k,x,w,O,j,C,E,T,I,P,S,z,L,H="",_=0,N=e.charAt(0),B=this.options.pedantic,R=this.options.commonmark,U=this.options.gfm;if("!"===N&&(w=!0,H=N,N=e.charAt(++_)),N===c&&(w||!this.inLink)){for(H+=N,I="",_++,C=e.length,T=0,(S=t.now()).column+=_,S.offset+=_;_<C;){if(b=N=e.charAt(_),N===p){for(m=1;e.charAt(_+1)===p;)b+=N,_++,m++;v?m>=v&&(v=0):v=m}else if(N===a)_++,b+=e.charAt(_);else if(v&&!U||N!==c){if((!v||U)&&N===s){if(!T){if(!B)for(;_<C&&(N=e.charAt(_+1),r(N));)b+=N,_++;if(e.charAt(_+1)!==u)return;b+=u,i=!0,_++;break}T--}}else T++;I+=b,b="",_++}if(i){for(O=I,H+=I+b,_++;_<C&&(N=e.charAt(_),r(N));)H+=N,_++;if(N=e.charAt(_),x=R?g:d,I="",y=H,N===f){for(_++,y+=f;_<C&&(N=e.charAt(_))!==h;){if(R&&"\n"===N)return;I+=N,_++}if(e.charAt(_)!==h)return;H+=f+I+h,P=I,_++}else{for(N=null,b="";_<C&&(N=e.charAt(_),!b||!o.call(x,N));){if(r(N)){if(!B)break;b+=N}else{if(N===u)T++;else if(N===l){if(0===T)break;T--}I+=b,b="",N===a&&(I+=a,N=e.charAt(++_)),I+=N}_++}P=I,_=(H+=I).length}for(I="";_<C&&(N=e.charAt(_),r(N));)I+=N,_++;if(N=e.charAt(_),H+=I,I&&o.call(x,N))if(_++,H+=N,I="",j=x[N],A=H,R){for(;_<C&&(N=e.charAt(_))!==j;)N===a&&(I+=a,N=e.charAt(++_)),_++,I+=N;if((N=e.charAt(_))!==j)return;for(E=I,H+=I+N,_++;_<C&&(N=e.charAt(_),r(N));)H+=N,_++}else for(b="";_<C;){if((N=e.charAt(_))===j)k&&(I+=j+b,b=""),k=!0;else if(k){if(N===l){H+=I+j+b,E=I;break}r(N)?b+=N:(I+=j+b+N,b="",k=!1)}else I+=N;_++}if(e.charAt(_)===l)return!!n||(H+=l,P=this.decode.raw(this.unescape(P),t(y).test().end,{nonTerminated:!1}),E&&(A=t(A).test().end,E=this.decode.raw(this.unescape(E),A)),L={type:w?"image":"link",title:E||null,url:P},w?L.alt=this.decode.raw(this.unescape(O),S)||null:(z=this.enterLink(),L.children=this.tokenizeInline(O,S),z()),t(H)(L))}}}g['"']='"',g["'"]="'",g[u]=l},1632:function(t,e,n){"use strict";var r=n(666),i=n(1200),o=n(826);t.exports=m,m.locator=i;var a="link",c="image",s="footnote",u="shortcut",l="collapsed",f="full",h="^",p="\\",d="[",g="]";function m(t,e,n){var i,m,v,y,A,b,k,x,w=e.charAt(0),O=0,j=e.length,C="",E="",T=a,I=u;if("!"===w&&(T=c,E=w,w=e.charAt(++O)),w===d){if(O++,E+=w,b="",this.options.footnotes&&e.charAt(O)===h){if(T===c)return;E+=h,O++,T=s}for(x=0;O<j;){if((w=e.charAt(O))===d)k=!0,x++;else if(w===g){if(!x)break;x--}w===p&&(b+=p,w=e.charAt(++O)),b+=w,O++}if(C=b,i=b,(w=e.charAt(O))===g){for(O++,C+=w,b="";O<j&&(w=e.charAt(O),r(w));)b+=w,O++;if(w=e.charAt(O),T!==s&&w===d){for(m="",b+=w,O++;O<j&&(w=e.charAt(O))!==d&&w!==g;)w===p&&(m+=p,w=e.charAt(++O)),m+=w,O++;(w=e.charAt(O))===g?(I=m?f:l,b+=m+w,O++):m="",C+=b,b=""}else{if(!i)return;m=i}if(I===f||!k)return C=E+C,T===a&&this.inLink?null:!!n||(T===s&&-1!==i.indexOf(" ")?t(C)({type:"footnote",children:this.tokenizeInline(i,t.now())}):((v=t.now()).column+=E.length,v.offset+=E.length,y={type:T+"Reference",identifier:o(m=I===f?m:i)},T!==a&&T!==c||(y.referenceType=I),T===a?(A=this.enterLink(),y.children=this.tokenizeInline(i,v),A()):T===c&&(y.alt=this.decode.raw(this.unescape(i),v)||null),t(C)(y)))}}}},1633:function(t,e,n){"use strict";var r=n(713),i=n(666),o=n(1634);t.exports=s,s.locator=o;var a="*",c="_";function s(t,e,n){var o,s,u,l,f,h,p,d=0,g=e.charAt(d);if(!(g!==a&&g!==c||e.charAt(++d)!==g||(s=this.options.pedantic,f=(u=g)+u,h=e.length,d++,l="",g="",s&&i(e.charAt(d)))))for(;d<h;){if(p=g,!((g=e.charAt(d))!==u||e.charAt(d+1)!==u||s&&i(p))&&(g=e.charAt(d+2))!==u){if(!r(l))return;return!!n||((o=t.now()).column+=2,o.offset+=2,t(f+l+f)({type:"strong",children:this.tokenizeInline(l,o)}))}s||"\\"!==g||(l+=g,g=e.charAt(++d)),l+=g,d++}}},1634:function(t,e,n){"use strict";t.exports=function(t,e){var n=t.indexOf("**",e),r=t.indexOf("__",e);if(-1===r)return n;if(-1===n)return r;return r<n?r:n}},1635:function(t,e,n){"use strict";var r=n(713),i=n(1636),o=n(666),a=n(1637);t.exports=u,u.locator=a;var c="*",s="_";function u(t,e,n){var a,u,l,f,h,p,d,g=0,m=e.charAt(g);if(!(m!==c&&m!==s||(u=this.options.pedantic,h=m,l=m,p=e.length,g++,f="",m="",u&&o(e.charAt(g)))))for(;g<p;){if(d=m,!((m=e.charAt(g))!==l||u&&o(d))){if((m=e.charAt(++g))!==l){if(!r(f)||d===l)return;if(!u&&l===s&&i(m)){f+=l;continue}return!!n||((a=t.now()).column++,a.offset++,t(h+f+l)({type:"emphasis",children:this.tokenizeInline(f,a)}))}f+=l}u||"\\"!==m||(f+=m,m=e.charAt(++g)),f+=m,g++}}},1636:function(t,e,n){"use strict";t.exports=function(t){return i.test("number"==typeof t?r(t):t.charAt(0))};var r=String.fromCharCode,i=/\w/},1637:function(t,e,n){"use strict";t.exports=function(t,e){var n=t.indexOf("*",e),r=t.indexOf("_",e);if(-1===r)return n;if(-1===n)return r;return r<n?r:n}},1638:function(t,e,n){"use strict";var r=n(666),i=n(1639);t.exports=c,c.locator=i;var o="~",a="~~";function c(t,e,n){var i,c,s,u="",l="",f="",h="";if(this.options.gfm&&e.charAt(0)===o&&e.charAt(1)===o&&!r(e.charAt(2)))for(i=1,c=e.length,(s=t.now()).column+=2,s.offset+=2;++i<c;){if(!((u=e.charAt(i))!==o||l!==o||f&&r(f)))return!!n||t(a+h+a)({type:"delete",children:this.tokenizeInline(h,s)});h+=l,f=l,l=u}}},1639:function(t,e,n){"use strict";t.exports=function(t,e){return t.indexOf("~~",e)}},1640:function(t,e,n){"use strict";var r=n(666),i=n(1641);t.exports=a,a.locator=i;var o="`";function a(t,e,n){for(var i,a,c,s,u,l,f,h,p=e.length,d=0,g="",m="";d<p&&e.charAt(d)===o;)g+=o,d++;if(g){for(u=g,s=d,g="",h=e.charAt(d),c=0;d<p;){if(l=h,h=e.charAt(d+1),l===o?(c++,m+=l):(c=0,g+=l),c&&h!==o){if(c===s){u+=g+m,f=!0;break}g+=m,m=""}d++}if(!f){if(s%2!=0)return;g=""}if(n)return!0;for(i="",a="",p=g.length,d=-1;++d<p;)l=g.charAt(d),r(l)?a+=l:(a&&(i&&(i+=a),a=""),i+=l);return t(u)({type:"inlineCode",value:i})}}},1641:function(t,e,n){"use strict";t.exports=function(t,e){return t.indexOf("`",e)}},1642:function(t,e,n){"use strict";var r=n(1643);t.exports=o,o.locator=r;var i=2;function o(t,e,n){for(var r,o=e.length,a=-1,c="";++a<o;){if("\n"===(r=e.charAt(a))){if(a<i)return;return!!n||t(c+=r)({type:"break"})}if(" "!==r)return;c+=r}}},1643:function(t,e,n){"use strict";t.exports=function(t,e){var n=t.indexOf("\n",e);for(;n>e&&" "===t.charAt(n-1);)n--;return n}},1644:function(t,e,n){"use strict";t.exports=function(t,e,n){var r,i,o,a,c,s,u,l,f,h;if(n)return!0;r=this.inlineMethods,a=r.length,i=this.inlineTokenizers,o=-1,f=e.length;for(;++o<a;)"text"!==(l=r[o])&&i[l]&&((u=i[l].locator)||t.file.fail("Missing locator: `"+l+"`"),-1!==(s=u.call(this,e,1))&&s<f&&(f=s));c=e.slice(0,f),h=t.now(),this.decode(c,h,function(e,n,r){t(r||e)({type:"text",value:e})})}},1645:function(t,e,n){var r=n(1646);t.exports=function(){return function(t){return r(t,"list",function(t,e){var n,r,i=0;for(n=0,r=e.length;n<r;n++)"list"===e[n].type&&(i+=1);for(n=0,r=t.children.length;n<r;n++){var o=t.children[n];o.index=n,o.ordered=t.ordered}t.depth=i}),t}}},1646:function(t,e,n){"use strict";t.exports=function(t,e,n){var r=[];"function"==typeof e&&(n=e,e=null);function i(t){var o;return e&&t.type!==e||(o=n(t,r.concat())),t.children&&!1!==o?function(t,e){var n,o=t.length,a=-1;r.push(e);for(;++a<o;)if((n=t[a])&&!1===i(n))return!1;return r.pop(),!0}(t.children,t):o}i(t)}},1647:function(t,e,n){"use strict";var r=n(770),i="virtualHtml",o=/^<(area|base|br|col|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)\s*\/?>$/i,a=/^<(\/?)([a-z]+)\s*>$/;t.exports=function(t){var e,n;return r(t,"html",function(t,r,c){n!==c&&(e=[],n=c);var s=function(t){var e=t.value.match(o);return!!e&&e[1]}(t);if(s)return c.children.splice(r,1,{type:i,tag:s,position:t.position}),!0;var u=function(t,e){var n=t.value.match(a);return!!n&&{tag:n[2],opening:!n[1],node:t}}(t);if(!u)return!0;var l=function(t,e){var n=t.length;for(;n--;)if(t[n].tag===e)return t.splice(n,1)[0];return!1}(e,u.tag);return l?c.children.splice(r,0,function(t,e,n){var r=n.children.indexOf(t.node),o=n.children.indexOf(e.node),a=n.children.splice(r,o-r+1).slice(1,-1);return{type:i,children:a,tag:t.tag,position:{start:t.node.position.start,end:e.node.position.end,indent:[]}}}(u,l,c)):u.opening||e.push(u),!0},!0),t}},1648:function(t,e,n){"use strict";var r=n(770);function i(t,e,n,r){if("remove"===r)n.children.splice(e,1);else if("unwrap"===r){var i=[e,1];t.children&&(i=i.concat(t.children)),Array.prototype.splice.apply(n.children,i)}}e.ofType=function(t,e){return function(e){return t.forEach(function(t){return r(e,t,n,!0)}),e};function n(t,n,r){r&&i(t,n,r,e)}},e.ifNotMatch=function(t,e){return function(t){return r(t,n,!0),t};function n(n,r,o){o&&!t(n,r,o)&&i(n,r,o,e)}}},1649:function(t,e,n){"use strict";var r=n(0),i=n(680);function o(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},c=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,s=e.renderers[t.type],u=t.position.start,l=[t.type,u.line,u.column].join("-");if("function"!=typeof s&&"string"!=typeof s&&!function(t){return r.Fragment&&r.Fragment===t}(s))throw new Error("Renderer for type `".concat(t.type,"` not defined or is not renderable"));var f=function(t,e,n,c,s,u){var l={key:e},f="string"==typeof c;n.sourcePos&&t.position&&(l["data-sourcepos"]=[(h=t.position).start.line,":",h.start.column,"-",h.end.line,":",h.end.column].map(String).join(""));var h;n.rawSourcePos&&!f&&(l.sourcePosition=t.position);n.includeNodeIndex&&s.node&&s.node.children&&!f&&(l.index=s.node.children.indexOf(t),l.parentChildCount=s.node.children.length);var p=null!==t.identifier&&void 0!==t.identifier?n.definitions[t.identifier]||{}:null;switch(t.type){case"root":a(l,{className:n.className});break;case"text":l.nodeKey=e,l.children=t.value;break;case"heading":l.level=t.depth;break;case"list":l.start=t.start,l.ordered=t.ordered,l.tight=!t.loose,l.depth=t.depth;break;case"listItem":l.checked=t.checked,l.tight=!t.loose,l.ordered=t.ordered,l.index=t.index,l.children=function(t,e){if(t.loose)return t.children;if(e.node&&t.index>0&&e.node.children[t.index-1].loose)return t.children;return function(t){return t.children.reduce(function(t,e){return t.concat("paragraph"===e.type?e.children||[]:[e])},[])}(t)}(t,s).map(function(e,r){return o(e,n,{node:t,props:l},r)});break;case"definition":a(l,{identifier:t.identifier,title:t.title,url:t.url});break;case"code":a(l,{language:t.lang&&t.lang.split(/\s/,1)[0]});break;case"inlineCode":l.children=t.value,l.inline=!0;break;case"link":a(l,{title:t.title||void 0,target:"function"==typeof n.linkTarget?n.linkTarget(t.url,t.children,t.title):n.linkTarget,href:n.transformLinkUri?n.transformLinkUri(t.url,t.children,t.title):t.url});break;case"image":a(l,{alt:t.alt||void 0,title:t.title||void 0,src:n.transformImageUri?n.transformImageUri(t.url,t.children,t.title,t.alt):t.url});break;case"linkReference":a(l,i(p,{href:n.transformLinkUri?n.transformLinkUri(p.href):p.href}));break;case"imageReference":a(l,{src:n.transformImageUri&&p.href?n.transformImageUri(p.href,t.children,p.title,t.alt):p.href,title:p.title||void 0,alt:t.alt||void 0});break;case"table":case"tableHead":case"tableBody":l.columnAlignment=t.align;break;case"tableRow":l.isHeader="tableHead"===s.node.type,l.columnAlignment=s.props.columnAlignment;break;case"tableCell":a(l,{isHeader:s.props.isHeader,align:s.props.columnAlignment[u]});break;case"virtualHtml":l.tag=t.tag;break;case"html":l.isBlock=t.position.start.line!==t.position.end.line,l.escapeHtml=n.escapeHtml,l.skipHtml=n.skipHtml;break;case"parsedHtml":var d;t.children&&(d=t.children.map(function(e,r){return o(e,n,{node:t,props:l},r)})),l.escapeHtml=n.escapeHtml,l.skipHtml=n.skipHtml,l.element=function(t,e){var n=t.element;if(Array.isArray(n)){var i=r.Fragment||"div";return r.createElement(i,null,n)}if(n.props.children||e){var o=r.Children.toArray(n.props.children).concat(e);return r.cloneElement(n,null,o)}return r.cloneElement(n,null)}(t,d);break;default:a(l,i(t,{type:void 0,position:void 0,children:void 0}))}!f&&t.value&&(l.value=t.value);return l}(t,l,e,s,n,c);return r.createElement(s,f,f.children||t.children&&t.children.map(function(n,r){return o(n,e,{node:t,props:f},r)})||void 0)}function a(t,e){for(var n in e)void 0!==e[n]&&(t[n]=e[n])}t.exports=o},1650:function(t,e,n){"use strict";var r=n(770);function i(t){var e=t.children;t.children=[{type:"tableHead",align:t.align,children:[e[0]],position:e[0].position}],e.length>1&&t.children.push({type:"tableBody",align:t.align,children:e.slice(1),position:{start:e[1].position.start,end:e[e.length-1].position.end}})}t.exports=function(t){return r(t,"table",i),t}},1651:function(t,e,n){"use strict";t.exports=function t(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return(e.children||[]).reduce(function(e,n){return"definition"===n.type&&(e[n.identifier]={href:n.url,title:n.title}),t(n,e)},n)}},1652:function(t,e,n){"use strict";var r=["http","https","mailto","tel"];t.exports=function(t){var e=(t||"").trim(),n=e.charAt(0);if("#"===n||"/"===n)return e;var i=e.indexOf(":");if(-1===i)return e;for(var o=r.length,a=-1;++a<o;){var c=r[a];if(i===c.length&&e.slice(0,c.length).toLowerCase()===c)return e}return-1!==(a=e.indexOf("?"))&&i>a?e:-1!==(a=e.indexOf("#"))&&i>a?e:"javascript:void(0)"}},1653:function(t,e,n){"use strict";var r=n(680),i=n(0),o=parseInt((i.version||"16").slice(0,2),10)>=16,a=i.createElement;function c(t,e){return a(t,s(e),e.children)}function s(t){return t["data-sourcepos"]?{"data-sourcepos":t["data-sourcepos"]}:{}}t.exports={break:"br",paragraph:"p",emphasis:"em",strong:"strong",thematicBreak:"hr",blockquote:"blockquote",delete:"del",link:"a",image:"img",linkReference:"a",imageReference:"img",table:c.bind(null,"table"),tableHead:c.bind(null,"thead"),tableBody:c.bind(null,"tbody"),tableRow:c.bind(null,"tr"),tableCell:function(t){var e=t.align?{textAlign:t.align}:void 0,n=s(t);return a(t.isHeader?"th":"td",e?r({style:e},n):n,t.children)},root:function(t){var e=!t.className,n=e&&i.Fragment||"div";return a(n,e?null:t,t.children)},text:function(t){return o?t.children:a("span",null,t.children)},list:function(t){var e=s(t);null!==t.start&&1!==t.start&&(e.start=t.start.toString());return a(t.ordered?"ol":"ul",e,t.children)},listItem:function(t){var e=null;if(null!==t.checked){var n=t.checked;e=a("input",{type:"checkbox",checked:n,readOnly:!0})}return a("li",s(t),e,t.children)},definition:function(){return null},heading:function(t){return a("h".concat(t.level),s(t),t.children)},inlineCode:function(t){return a("code",s(t),t.children)},code:function(t){var e=t.language&&"language-".concat(t.language),n=a("code",e?{className:e}:null,t.value);return a("pre",s(t),n)},html:function(t){if(t.skipHtml)return null;var e=t.isBlock?"div":"span";if(t.escapeHtml){var n=i.Fragment||e;return a(n,null,t.value)}var r={dangerouslySetInnerHTML:{__html:t.value}};return a(e,r)},virtualHtml:function(t){return a(t.tag,s(t),t.children)},parsedHtml:function(t){return t["data-sourcepos"]?i.cloneElement(t.element,{"data-sourcepos":t["data-sourcepos"]}):t.element}}},1654:function(t,e,n){"use strict";e.HtmlParser="undefined"==typeof Symbol?"__RMD_HTML_PARSER__":Symbol("__RMD_HTML_PARSER__")},666:function(t,e,n){"use strict";t.exports=function(t){return i.test("number"==typeof t?r(t):t.charAt(0))};var r=String.fromCharCode,i=/\s/},680:function(t,e){t.exports=function(){for(var t={},e=0;e<arguments.length;e++){var r=arguments[e];for(var i in r)n.call(r,i)&&(t[i]=r[i])}return t};var n=Object.prototype.hasOwnProperty},713:function(t,e){(e=t.exports=function(t){return t.replace(/^\s*|\s*$/g,"")}).left=function(t){return t.replace(/^\s*/,"")},e.right=function(t){return t.replace(/\s*$/,"")}},736:function(t,e,n){"use strict";
/*!
 * repeat-string <https://github.com/jonschlinkert/repeat-string>
 *
 * Copyright (c) 2014-2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */var r,i="";t.exports=function(t,e){if("string"!=typeof t)throw new TypeError("expected a string");if(1===e)return t;if(2===e)return t+t;var n=t.length*e;if(r!==t||void 0===r)r=t,i="";else if(i.length>=n)return i.substr(0,n);for(;n>i.length&&e>1;)1&e&&(i+=t),e>>=1,t+=t;return i=(i+=t).substr(0,n)}},769:function(t,e,n){"use strict";t.exports=function(t){var e="string"==typeof t?t.charCodeAt(0):t;return e>=48&&e<=57}},770:function(t,e,n){"use strict";t.exports=c;var r=n(1608),i=r.CONTINUE,o=r.SKIP,a=r.EXIT;function c(t,e,n,i){"function"==typeof e&&"function"!=typeof n&&(i=n,n=e,e=null),r(t,e,function(t,e){var r=e[e.length-1],i=r?r.children.indexOf(t):null;return n(t,i,r)},i)}c.CONTINUE=i,c.SKIP=o,c.EXIT=a},823:function(t,e,n){"use strict";var r=n(1597),i=n(1598),o=n(769),a=n(1599),c=n(1600),s=n(1601);t.exports=function(t,e){var n,o,a={};e||(e={});for(o in h)n=e[o],a[o]=null==n?h[o]:n;(a.position.indent||a.position.start)&&(a.indent=a.position.indent||[],a.position=a.position.start);return function(t,e){var n,o,a,h,U,M,q,$,D,F,Z,K,V,X,G,J,Y,Q,W,tt=e.additional,et=e.nonTerminated,nt=e.text,rt=e.reference,it=e.warning,ot=e.textContext,at=e.referenceContext,ct=e.warningContext,st=e.position,ut=e.indent||[],lt=t.length,ft=0,ht=-1,pt=st.column||1,dt=st.line||1,gt="",mt=[];"string"==typeof tt&&(tt=tt.charCodeAt(0));J=yt(),$=it?function(t,e){var n=yt();n.column+=e,n.offset+=e,it.call(ct,B[t],n,t)}:f,ft--,lt++;for(;++ft<lt;)if(U===d&&(pt=ut[ht]||1),(U=t.charCodeAt(ft))===v){if((q=t.charCodeAt(ft+1))===p||q===d||q===g||q===m||q===v||q===A||q!=q||tt&&q===tt){gt+=l(U),pt++;continue}for(K=V=ft+1,W=V,q===k?(W=++K,(q=t.charCodeAt(W))===x||q===w?(X=C,W=++K):X=E):X=j,n="",Z="",h="",G=I[X],W--;++W<lt&&(q=t.charCodeAt(W),G(q));)h+=l(q),X===j&&u.call(r,h)&&(n=h,Z=r[h]);(a=t.charCodeAt(W)===y)&&(W++,(o=X===j&&s(h))&&(n=h,Z=o)),Q=1+W-V,(a||et)&&(h?X===j?(a&&!Z?$(H,1):(n!==h&&(W=K+n.length,Q=1+W-K,a=!1),a||(D=n?P:z,e.attribute?(q=t.charCodeAt(W))===b?($(D,Q),Z=null):c(q)?Z=null:$(D,Q):$(D,Q))),M=Z):(a||$(S,Q),M=parseInt(h,T[X]),(vt=M)>=55296&&vt<=57343||vt>1114111?($(N,Q),M=l(O)):M in i?($(_,Q),M=i[M]):(F="",R(M)&&$(_,Q),M>65535&&(F+=l((M-=65536)>>>10|55296),M=56320|1023&M),M=F+l(M))):X!==j&&$(L,Q)),M?(At(),J=yt(),ft=W-1,pt+=W-V+1,mt.push(M),(Y=yt()).offset++,rt&&rt.call(at,M,{start:J,end:Y},t.slice(V-1,W)),J=Y):(h=t.slice(V-1,W),gt+=h,pt+=h.length,ft=W-1)}else 10===U&&(dt++,ht++,pt=0),U==U?(gt+=l(U),pt++):At();var vt;return mt.join("");function yt(){return{line:dt,column:pt,offset:ft+(st.offset||0)}}function At(){gt&&(mt.push(gt),nt&&nt.call(ot,gt,{start:J,end:yt()}),gt="")}}(t,a)};var u={}.hasOwnProperty,l=String.fromCharCode,f=Function.prototype,h={warning:null,reference:null,text:null,warningContext:null,referenceContext:null,textContext:null,position:{},additional:null,attribute:!1,nonTerminated:!0},p=9,d=10,g=12,m=32,v=38,y=59,A=60,b=61,k=35,x=88,w=120,O=65533,j="named",C="hexadecimal",E="decimal",T={};T[C]=16,T[E]=10;var I={};I[j]=c,I[E]=o,I[C]=a;var P=1,S=2,z=3,L=4,H=5,_=6,N=7,B={};function R(t){return t>=1&&t<=8||11===t||t>=13&&t<=31||t>=127&&t<=159||t>=64976&&t<=65007||65535==(65535&t)||65534==(65535&t)}B[P]="Named character references must be terminated by a semicolon",B[S]="Numeric character references must be terminated by a semicolon",B[z]="Named character references cannot be empty",B[L]="Numeric character references cannot be empty",B[H]="Named character references must be known",B[_]="Numeric character references cannot be disallowed",B[N]="Numeric character references cannot be outside the permissible Unicode range"},824:function(t,e,n){"use strict";t.exports=function(t){var e=String(t),n=e.length;for(;e.charAt(--n)===r;);return e.slice(0,n+1)};var r="\n"},825:function(t,e,n){"use strict";t.exports=function(t,e,n,r){var i,o,a,c,s,u,l=["pedantic","commonmark"],f=l.length,h=t.length,p=-1;for(;++p<h;){for(i=t[p],o=i[1]||{},a=i[0],c=-1,u=!1;++c<f;)if(void 0!==o[s=l[c]]&&o[s]!==n.options[s]){u=!0;break}if(!u&&e[a].apply(n,r))return!0}return!1}},826:function(t,e,n){"use strict";var r=n(1621);t.exports=function(t){return r(t).toLowerCase()}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGF0aC1icm93c2VyaWZ5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pcy1hbHBoYWJldGljYWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvZGVmYXVsdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdXRpbC9nZXQtaW5kZW50YXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdXRpbC9odG1sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL2xvY2F0ZS90YWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvbG9jYXRlL2xpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW1hcmtkb3duL2xpYi9yZWFjdC1tYXJrZG93bi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdW5pZmllZC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXh0ZW5kL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWlsL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92ZmlsZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdmZpbGUtbWVzc2FnZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdW5pc3QtdXRpbC1zdHJpbmdpZnktcG9zaXRpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3ZmaWxlL2NvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlcGxhY2UtZXh0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90cm91Z2gvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Ryb3VnaC93cmFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94LWlzLXN0cmluZy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtcGxhaW4tb2JqL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3VuaGVyaXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvcGFyc2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdGF0ZS10b2dnbGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3ZmaWxlLWxvY2F0aW9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3VuZXNjYXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL2RlY29kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtaGV4YWRlY2ltYWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzLWFscGhhbnVtZXJpY2FsL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYXJzZS1lbnRpdGllcy9kZWNvZGUtZW50aXR5LmJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdG9rZW5pemVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3NldC1vcHRpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXJrZG93bi1lc2NhcGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3BhcnNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91bmlzdC11dGlsLXJlbW92ZS1wb3NpdGlvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdW5pc3QtdXRpbC12aXNpdC9ub2RlX21vZHVsZXMvdW5pc3QtdXRpbC12aXNpdC1wYXJlbnRzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91bmlzdC11dGlsLWlzL2NvbnZlcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdG9rZW5pemUvbmV3bGluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9jb2RlLWluZGVudGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3Rva2VuaXplL2NvZGUtZmVuY2VkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3Rva2VuaXplL2Jsb2NrcXVvdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdG9rZW5pemUvaGVhZGluZy1hdHguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdG9rZW5pemUvdGhlbWF0aWMtYnJlYWsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdG9rZW5pemUvbGlzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi91dGlsL3JlbW92ZS1pbmRlbnRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9oZWFkaW5nLXNldGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9odG1sLWJsb2NrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3Rva2VuaXplL2Zvb3Rub3RlLWRlZmluaXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbGxhcHNlLXdoaXRlLXNwYWNlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3Rva2VuaXplL2RlZmluaXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdG9rZW5pemUvdGFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdG9rZW5pemUvcGFyYWdyYXBoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3Rva2VuaXplL2VzY2FwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi9sb2NhdGUvZXNjYXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3Rva2VuaXplL2F1dG8tbGluay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS91cmwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvbG9jYXRlL3VybC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9odG1sLWlubGluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9saW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3Rva2VuaXplL3JlZmVyZW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9zdHJvbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvbG9jYXRlL3N0cm9uZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9lbXBoYXNpcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtd29yZC1jaGFyYWN0ZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvbG9jYXRlL2VtcGhhc2lzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3Rva2VuaXplL2RlbGV0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi9sb2NhdGUvZGVsZXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3Rva2VuaXplL2NvZGUtaW5saW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL2xvY2F0ZS9jb2RlLWlubGluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9icmVhay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi9sb2NhdGUvYnJlYWsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdG9rZW5pemUvdGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWRhc3QtYWRkLWxpc3QtbWV0YWRhdGEvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3VuaXN0LXV0aWwtdmlzaXQtcGFyZW50cy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtbWFya2Rvd24vbGliL3BsdWdpbnMvbmFpdmUtaHRtbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtbWFya2Rvd24vbGliL3BsdWdpbnMvZGlzYWxsb3ctbm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtbWFya2Rvd24vbGliL2FzdC10by1yZWFjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtbWFya2Rvd24vbGliL3dyYXAtdGFibGUtcm93cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtbWFya2Rvd24vbGliL2dldC1kZWZpbml0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtbWFya2Rvd24vbGliL3VyaS10cmFuc2Zvcm1lci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtbWFya2Rvd24vbGliL3JlbmRlcmVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtbWFya2Rvd24vbGliL3N5bWJvbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzLXdoaXRlc3BhY2UtY2hhcmFjdGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94dGVuZC9pbW11dGFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RyaW0vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlcGVhdC1zdHJpbmcvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzLWRlY2ltYWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3VuaXN0LXV0aWwtdmlzaXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BhcnNlLWVudGl0aWVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90cmltLXRyYWlsaW5nLWxpbmVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3V0aWwvaW50ZXJydXB0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3V0aWwvbm9ybWFsaXplLmpzIl0sIm5hbWVzIjpbInByb2Nlc3MiLCJub3JtYWxpemVBcnJheSIsInBhcnRzIiwiYWxsb3dBYm92ZVJvb3QiLCJ1cCIsImkiLCJsZW5ndGgiLCJsYXN0Iiwic3BsaWNlIiwidW5zaGlmdCIsInNwbGl0UGF0aFJlIiwic3BsaXRQYXRoIiwiZmlsZW5hbWUiLCJleGVjIiwic2xpY2UiLCJmaWx0ZXIiLCJ4cyIsImYiLCJyZXMiLCJwdXNoIiwiZXhwb3J0cyIsInJlc29sdmUiLCJyZXNvbHZlZFBhdGgiLCJyZXNvbHZlZEFic29sdXRlIiwiYXJndW1lbnRzIiwicGF0aCIsImN3ZCIsIlR5cGVFcnJvciIsImNoYXJBdCIsInNwbGl0IiwicCIsImpvaW4iLCJub3JtYWxpemUiLCJpc0Fic29sdXRlIiwidHJhaWxpbmdTbGFzaCIsInN1YnN0ciIsInBhdGhzIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJjYWxsIiwiaW5kZXgiLCJyZWxhdGl2ZSIsImZyb20iLCJ0byIsInRyaW0iLCJhcnIiLCJzdGFydCIsImVuZCIsImZyb21QYXJ0cyIsInRvUGFydHMiLCJNYXRoIiwibWluIiwic2FtZVBhcnRzTGVuZ3RoIiwib3V0cHV0UGFydHMiLCJjb25jYXQiLCJzZXAiLCJkZWxpbWl0ZXIiLCJkaXJuYW1lIiwicmVzdWx0Iiwicm9vdCIsImRpciIsImJhc2VuYW1lIiwiZXh0IiwiZXh0bmFtZSIsInN0ciIsImxlbiIsIm1vZHVsZSIsImNoYXJhY3RlciIsImNvZGUiLCJjaGFyQ29kZUF0IiwicG9zaXRpb24iLCJnZm0iLCJjb21tb25tYXJrIiwiZm9vdG5vdGVzIiwicGVkYW50aWMiLCJibG9ja3MiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwidmFsdWUiLCJzaXplIiwiaW5kZW50Iiwic3RvcHMiLCJjaGFyYWN0ZXJzIiwiZmxvb3IiLCIgIiwiXHQiLCJvcGVuVGFnIiwiY2xvc2VUYWciLCJvcGVuQ2xvc2VUYWciLCJSZWdFeHAiLCJ0YWciLCJmcm9tSW5kZXgiLCJpbmRleE9mIiwibGluayIsImltYWdlIiwiX3RvQ29uc3VtYWJsZUFycmF5IiwiaXNBcnJheSIsImFycjIiLCJfYXJyYXlXaXRob3V0SG9sZXMiLCJpdGVyIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJPYmplY3QiLCJ0b1N0cmluZyIsIl9pdGVyYWJsZVRvQXJyYXkiLCJfbm9uSXRlcmFibGVTcHJlYWQiLCJ4dGVuZCIsInVuaWZpZWQiLCJwYXJzZSIsIlByb3BUeXBlcyIsImFkZExpc3RNZXRhZGF0YSIsIm5haXZlSHRtbCIsImRpc2FsbG93Tm9kZSIsImFzdFRvUmVhY3QiLCJ3cmFwVGFibGVSb3dzIiwiZ2V0RGVmaW5pdGlvbnMiLCJ1cmlUcmFuc2Zvcm1lciIsImRlZmF1bHRSZW5kZXJlcnMiLCJzeW1ib2xzIiwiYWxsVHlwZXMiLCJrZXlzIiwiUmVhY3RNYXJrZG93biIsInByb3BzIiwic3JjIiwic291cmNlIiwiY2hpbGRyZW4iLCJwYXJzZXJPcHRpb25zIiwiYWxsb3dlZFR5cGVzIiwiZGlzYWxsb3dlZFR5cGVzIiwiRXJyb3IiLCJyZW5kZXJlcnMiLCJyYXdBc3QiLCJwbHVnaW5zIiwicmVkdWNlIiwiYXBwbHlQYXJzZXJQbHVnaW4iLCJyZW5kZXJQcm9wcyIsImRlZmluaXRpb25zIiwiYXN0IiwidHlwZSIsInJlbW92YWxNZXRob2QiLCJ1bndyYXBEaXNhbGxvd2VkIiwib2ZUeXBlIiwiYWxsb3dOb2RlIiwiaWZOb3RNYXRjaCIsInJlbmRlckh0bWwiLCJlc2NhcGVIdG1sIiwic2tpcEh0bWwiLCJoYXNIdG1sUGFyc2VyIiwiYXN0UGx1Z2lucyIsInNvbWUiLCJpdGVtIiwicGx1Z2luIiwiaWRlbnRpdHkiLCJIdG1sUGFyc2VyIiwiZGV0ZXJtaW5lQXN0UGx1Z2lucyIsIm5vZGUiLCJwYXJzZXIiLCJ1c2UiLCJhcHBseSIsImRlZmF1bHRQcm9wcyIsInNvdXJjZVBvcyIsInJhd1NvdXJjZVBvcyIsInRyYW5zZm9ybUxpbmtVcmkiLCJwcm9wVHlwZXMiLCJjbGFzc05hbWUiLCJzdHJpbmciLCJib29sIiwiZnVuYyIsImFycmF5T2YiLCJvbmVPZiIsIm9uZU9mVHlwZSIsImxpbmtUYXJnZXQiLCJ0cmFuc2Zvcm1JbWFnZVVyaSIsIm9iamVjdCIsImFycmF5IiwidHlwZXMiLCJleHRlbmQiLCJiYWlsIiwidmZpbGUiLCJ0cm91Z2giLCJwbGFpbiIsImF0dGFjaGVycyIsInRyYW5zZm9ybWVycyIsIm5hbWVzcGFjZSIsImZyb3plbiIsImZyZWV6ZUluZGV4IiwicHJvY2Vzc29yIiwiZGF0YSIsImtleSIsImFzc2VydFVuZnJvemVuIiwib3duIiwiZnJlZXplIiwic2V0dGluZ3MiLCJhZGRQbHVnaW4iLCJhZGRMaXN0IiwiYWRkUHJlc2V0IiwiYWRkIiwiZW50cnkiLCJmaW5kIiwiZG9jIiwiUGFyc2VyIiwiZmlsZSIsImFzc2VydFBhcnNlciIsIm5ld2FibGUiLCJTdHJpbmciLCJzdHJpbmdpZnkiLCJDb21waWxlciIsImFzc2VydENvbXBpbGVyIiwiYXNzZXJ0Tm9kZSIsImNvbXBpbGUiLCJydW4iLCJydW5TeW5jIiwiY29tcGxldGUiLCJlcnIiLCJ0cmVlIiwiYXNzZXJ0RG9uZSIsInByb2Nlc3NTeW5jIiwiZGVzdGluYXRpb24iLCJ2YWx1ZXMiLCJvcHRpb25zIiwidHJhbnNmb3JtZXIiLCJ1bmRlZmluZWQiLCJJbmZpbml0eSIsImNiIiwiUHJvbWlzZSIsImV4ZWN1dG9yIiwicmVqZWN0IiwicGlwZWxpbmUiLCJoYXNPd25Qcm9wZXJ0eSIsImN0eCIsIm5leHQiLCJjb250ZW50cyIsIm5hbWUiLCJhc3luY05hbWUiLCJoYXNPd24iLCJ0b1N0ciIsImRlZmluZVByb3BlcnR5IiwiZ09QRCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImlzUGxhaW5PYmplY3QiLCJvYmoiLCJoYXNPd25Db25zdHJ1Y3RvciIsImhhc0lzUHJvdG90eXBlT2YiLCJjb25zdHJ1Y3RvciIsInNldFByb3BlcnR5IiwidGFyZ2V0IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIm5ld1ZhbHVlIiwid3JpdGFibGUiLCJnZXRQcm9wZXJ0eSIsImNvcHkiLCJjb3B5SXNBcnJheSIsImNsb25lIiwiZGVlcCIsIlZNZXNzYWdlIiwiVkZpbGUiLCJwcm90byIsIm1lc3NhZ2UiLCJyZWFzb24iLCJvcmlnaW4iLCJmaWxlUGF0aCIsInRoaXMiLCJmYXRhbCIsIm1lc3NhZ2VzIiwiaW5mbyIsImZhaWwiLCJ3YXJuIiwiVk1lc3NhZ2VQcm90b3R5cGUiLCJyYW5nZSIsImxvY2F0aW9uIiwicGFyc2VPcmlnaW4iLCJsaW5lIiwiY29sdW1uIiwic3RhY2siLCJydWxlSWQiLCJwb2ludCIsInBvcyIsInJlcGxhY2UiLCJidWZmZXIiLCJlbmNvZGluZyIsIm9yZGVyIiwicHJvcCIsImhpc3RvcnkiLCJhc3NlcnRQYXJ0IiwicGFydCIsImFzc2VydE5vbkVtcHR5IiwiYXNzZXJ0UGF0aCIsImdldCIsInNldCIsInN0ZW0iLCJucGF0aCIsIm5GaWxlTmFtZSIsIndyYXAiLCJmbnMiLCJtaWRkbGV3YXJlIiwiaW5wdXQiLCJkb25lIiwiZm4iLCJwYXJhbXMiLCJjYWxsYmFjayIsImludm9rZWQiLCJlcnJvciIsInRoZW4iLCJ4IiwiZ2V0UHJvdG90eXBlT2YiLCJ1bmhlcml0IiwiTG9jYWwiLCJpbmhlcml0cyIsIlN1cGVyIiwiT2YiLCJGcm9tIiwicGFyYW1ldGVycyIsInRvZ2dsZSIsInZmaWxlTG9jYXRpb24iLCJ1bmVzY2FwZSIsImRlY29kZSIsInRva2VuaXplciIsIm9mZnNldCIsInNldE9wdGlvbnMiLCJpbkxpc3QiLCJpbkJsb2NrIiwiaW5MaW5rIiwiYXRTdGFydCIsInRvT2Zmc2V0IiwiZXhpdFN0YXJ0IiwiZW50ZXJMaXN0IiwiZW50ZXJMaW5rIiwiZW50ZXJCbG9jayIsImludGVycnVwdFBhcmFncmFwaCIsImludGVycnVwdExpc3QiLCJpbnRlcnJ1cHRCbG9ja3F1b3RlIiwiYmxvY2tUb2tlbml6ZXJzIiwibmV3bGluZSIsImluZGVudGVkQ29kZSIsImZlbmNlZENvZGUiLCJibG9ja3F1b3RlIiwiYXR4SGVhZGluZyIsInRoZW1hdGljQnJlYWsiLCJsaXN0Iiwic2V0ZXh0SGVhZGluZyIsImh0bWwiLCJmb290bm90ZSIsImRlZmluaXRpb24iLCJ0YWJsZSIsInBhcmFncmFwaCIsImlubGluZVRva2VuaXplcnMiLCJlc2NhcGUiLCJhdXRvTGluayIsInVybCIsInJlZmVyZW5jZSIsInN0cm9uZyIsImVtcGhhc2lzIiwiZGVsZXRpb24iLCJicmVhayIsInRleHQiLCJibG9ja01ldGhvZHMiLCJpbmxpbmVNZXRob2RzIiwidG9rZW5pemVCbG9jayIsInRva2VuaXplSW5saW5lIiwidG9rZW5pemVGYWN0b3J5Iiwic3RhdGUiLCJjb250ZXh0IiwiY3VycmVudCIsIm9mZnNldFRvUG9zaXRpb25GYWN0b3J5IiwiaW5kaWNlcyIsInBvc2l0aW9uVG9PZmZzZXRGYWN0b3J5IiwiaXNOYU4iLCJ0b1Bvc2l0aW9uIiwicHJldiIsInF1ZXVlIiwiZW50aXRpZXMiLCJkZWNvZGVyIiwicmF3Iiwid2FybmluZyIsImhhbmRsZVdhcm5pbmciLCJvZmZzZXRzIiwiaGFuZGxlciIsInRleHRDb250ZXh0IiwicmVmZXJlbmNlQ29udGV4dCIsImFscGhhYmV0aWNhbCIsImRlY2ltYWwiLCJlbCIsInNlbWljb2xvbiIsImNoYXIiLCJlbnRpdHkiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJpbm5lckhUTUwiLCJ0ZXh0Q29udGVudCIsIm1ldGhvZCIsIm1hdGNoZWQiLCJ2YWx1ZUxlbmd0aCIsInNlbGYiLCJ0b2tlbnMiLCJtZXRob2RzIiwidG9rZW5pemVycyIsImVhdCIsIm5vdyIsInVwZGF0ZVBvc2l0aW9uIiwib25seUF0U3RhcnQiLCJub3RJbkxpc3QiLCJub3RJbkJsb2NrIiwibm90SW5MaW5rIiwiZW9mIiwic3VidmFsdWUiLCJsYXN0SW5kZXgiLCJQb3NpdGlvbiIsImluZGVudGF0aW9uIiwiZ2V0T2Zmc2V0IiwiYmVmb3JlIiwiY29tYmluZWQiLCJuIiwibCIsInN1YnN0cmluZyIsInZhbGlkYXRlRWF0IiwicmVzZXQiLCJ0ZXN0IiwicGFyZW50IiwiTUVSR0VBQkxFX05PREVTIiwibWVyZ2VhYmxlIiwiZXNjYXBlcyIsImRlZmF1bHRzIiwiZGVmYXVsdCIsInJlbW92ZVBvc2l0aW9uIiwiY29udGVudCIsIkVYUFJFU1NJT05fTElORV9CUkVBS1MiLCJDX05FV0xJTkUiLCJ2aXNpdCIsImhhcmQiLCJzb2Z0IiwiZm9yY2UiLCJ2aXNpdFBhcmVudHMiLCJjb252ZXJ0IiwiQ09OVElOVUUiLCJTS0lQIiwiRVhJVCIsInZpc2l0b3IiLCJyZXZlcnNlIiwiaXMiLCJvbmUiLCJwYXJlbnRzIiwic3VicmVzdWx0IiwidG9SZXN1bHQiLCJzdGVwIiwiYWxsIiwiQm9vbGVhbiIsInR5cGVGYWN0b3J5Iiwib2siLCJ0ZXN0cyIsImNoZWNrcyIsInJlc3VsdHMiLCJjb252ZXJ0QWxsIiwid2hpdGVzcGFjZSIsInNpbGVudCIsInJlcGVhdCIsImJsYW5rUXVldWUiLCJzdWJ2YWx1ZVF1ZXVlIiwiY29udGVudFF1ZXVlIiwiQ19TUEFDRSIsIkNPREVfSU5ERU5UIiwiQ19UQUIiLCJsYW5nIiwiZmVuY2VDb3VudCIsIm1hcmtlciIsImZsYWciLCJleGRlbnRlZENvbnRlbnQiLCJjbG9zaW5nIiwiZXhkZW50ZWRDbG9zaW5nIiwiQ19USUxERSIsIkNfVElDSyIsIk1JTl9GRU5DRV9DT1VOVCIsIkNPREVfSU5ERU5UX0NPVU5UIiwiaW50ZXJydXB0IiwicmVzdCIsIm5leHRJbmRleCIsInN0YXJ0SW5kZXgiLCJwcmVmaXhlZCIsImV4aXQiLCJpbnRlcnJ1cHRvcnMiLCJjdXJyZW50TGluZSIsImluZGVudHMiLCJDX0dUIiwiZGVwdGgiLCJDX0hBU0giLCJNQVhfQVRYX0NPVU5UIiwibWFya2VyQ291bnQiLCJDX0FTVEVSSVNLIiwiQ19EQVNIIiwiQ19VTkRFUlNDT1JFIiwiVEhFTUFUSUNfQlJFQUtfTUFSS0VSX0NPVU5UIiwiZ2V0SW5kZW50IiwicmVtb3ZlSW5kZW50IiwibWFya2VycyIsIm9yZGVyZWQiLCJjdXJyZW50TWFya2VyIiwicHJldkVtcHR5IiwiZW1wdHkiLCJpdGVtcyIsImFsbExpbmVzIiwiZW1wdHlMaW5lcyIsImVudGVyVG9wIiwiZXhpdEJsb2NrcXVvdGUiLCJpc0xvb3NlIiwiaW5kZW50ZWQiLCJpbnRlcnVwdG9ycyIsIlRBQl9TSVpFIiwiTElTVF9PUkRFUkVEX0NPTU1PTk1BUktfTUFSS0VSUyIsIkxJU1RfT1JERVJFRF9NQVJLRVJTIiwiTElTVF9VTk9SREVSRURfTUFSS0VSUyIsInBhcnNlSW50IiwidHJhaWwiLCJsb29zZSIsImxpc3RJdGVtIiwiQ19YX0xPV0VSIiwiRVhQUkVTU0lPTl9MT09TRV9MSVNUX0lURU0iLCJFWFBSRVNTSU9OX1RBU0tfSVRFTSIsIkVYUFJFU1NJT05fQlVMTEVUIiwiRVhQUkVTU0lPTl9QRURBTlRJQ19CVUxMRVQiLCJFWFBSRVNTSU9OX0lOSVRJQUxfSU5ERU5UIiwiLiIsInRhc2siLCJjaGVja2VkIiwicGVkYW50aWNMaXN0SXRlbSIsIm5vcm1hbExpc3RJdGVtIiwibWF0Y2giLCJ0b0xvd2VyQ2FzZSIsInJlcGxhY2VyIiwiJDAiLCJtYXgiLCJidWxsZXQiLCJsaW5lcyIsInRyaW1tZWRMaW5lcyIsIiQxIiwiJDIiLCIkMyIsIiQ0IiwiTnVtYmVyIiwibWF4aW11bSIsInBhZGRpbmciLCJtaW5JbmRlbnQiLCJtYXRyaXgiLCJzaGlmdCIsIk1BWF9IRUFESU5HX0lOREVOVCIsIlNFVEVYVF9NQVJLRVJTIiwiY291bnQiLCJzZXF1ZW5jZSIsInNlcXVlbmNlcyIsIkNfTFQiLCJmb290bm90ZURlZmluaXRpb24iLCJDX0JBQ0tTTEFTSCIsIkNfQlJBQ0tFVF9PUEVOIiwiQ19CUkFDS0VUX0NMT1NFIiwiQ19DQVJFVCIsIkNfQ09MT04iLCJFWFBSRVNTSU9OX0lOSVRJQUxfVEFCIiwic3VicXVldWUiLCJpZGVudGlmaWVyIiwiQ19ET1VCTEVfUVVPVEUiLCJDX1NJTkdMRV9RVU9URSIsIkNfUEFSRU5fT1BFTiIsIkNfUEFSRU5fQ0xPU0UiLCJiZWZvcmVVUkwiLCJiZWZvcmVUaXRsZSIsInRpdGxlIiwiaXNFbmNsb3NlZFVSTENoYXJhY3RlciIsImlzVW5jbG9zZWRVUkxDaGFyYWN0ZXIiLCJub25UZXJtaW5hdGVkIiwiYWxpZ25tZW50cyIsImFsaWdubWVudCIsInJvdyIsImhhc0Rhc2giLCJhbGlnbiIsImNlbGwiLCJwcmVhbWJsZSIsIm9wZW5pbmciLCJsaW5lQ291bnQiLCJyb3dzIiwibGluZUluZGV4IiwicGlwZUluZGV4IiwiZmlyc3QiLCJDX1BJUEUiLCJNSU5fVEFCTEVfUk9XUyIsIlRBQkxFX0FMSUdOX05PTkUiLCJUQUJMRV9BTElHTl9MRUZUIiwiVEFCTEVfQUxJR05fQ0VOVEVSIiwiVEFCTEVfQUxJR05fUklHSFQiLCJNSU5fVEFCTEVfQ09MVU1OUyIsInRyaW1UcmFpbGluZ0xpbmVzIiwibGVmdCIsImxvY2F0ZSIsImxvY2F0b3IiLCJDX0FUX1NJR04iLCJDX1NMQVNIIiwiTUFJTFRPIiwiTUFJTFRPX0xFTkdUSCIsImhhc0F0Q2hhcmFjdGVyIiwiTUFJTFRPX1BST1RPQ09MIiwiUFJPVE9DT0xTIiwiUFJPVE9DT0xTX0xFTkdUSCIsInByb3RvY29sIiwicGFyZW5Db3VudCIsIm5leHRDaGFyYWN0ZXIiLCJpbmxpbmVIVE1MIiwiRVhQUkVTU0lPTl9IVE1MX0xJTktfT1BFTiIsIkVYUFJFU1NJT05fSFRNTF9MSU5LX0NMT1NFIiwiTElOS19NQVJLRVJTIiwiXCIiLCInIiwiQ09NTU9OTUFSS19MSU5LX01BUktFUlMiLCJjbG9zZWQiLCJoYXNNYXJrZXIiLCJpc0ltYWdlIiwiYWx0IiwiVF9MSU5LIiwiVF9JTUFHRSIsIlRfRk9PVE5PVEUiLCJSRUZFUkVOQ0VfVFlQRV9TSE9SVENVVCIsIlJFRkVSRU5DRV9UWVBFX0NPTExBUFNFRCIsIlJFRkVSRU5DRV9UWVBFX0ZVTEwiLCJicmFja2V0ZWQiLCJpbnRybyIsInJlZmVyZW5jZVR5cGUiLCJhc3RlcmlzayIsInVuZGVyc2NvcmUiLCJ3b3JkIiwicmUiLCJmcm9tQ29kZSIsImZyb21DaGFyQ29kZSIsInN0cmlrZXRocm91Z2giLCJET1VCTEUiLCJwcmV2aW91cyIsInByZWNlZGluZyIsImlubGluZUNvZGUiLCJvcGVuaW5nQ291bnQiLCJmb3VuZCIsInRpY2tRdWV1ZSIsImhhcmRCcmVhayIsIk1JTl9CUkVBS19MRU5HVEgiLCJ2aXNpdFdpdGhQYXJlbnRzIiwibGlzdE5vZGUiLCJjaGlsZCIsInBvcCIsInNlbGZDbG9zaW5nUmUiLCJzaW1wbGVUYWdSZSIsIm9wZW4iLCJjdXJyZW50UGFyZW50Iiwic2VsZkNsb3NpbmciLCJnZXRTZWxmQ2xvc2luZyIsImdldFNpbXBsZVRhZyIsIm1hdGNoaW5nIiwibWF0Y2hpbmdUYWciLCJmaW5kQW5kUHVsbCIsImZyb21Ob2RlIiwidG9Ob2RlIiwidG9JbmRleCIsInZpcnR1YWwiLCJ1bnRhbmdsZSIsIm1vZGUiLCJhcmdzIiwiZm9yRWFjaCIsImRpc2FsbG93IiwiUmVhY3QiLCJyZW5kZXJlciIsIkZyYWdtZW50IiwiaXNSZWFjdEZyYWdtZW50Iiwibm9kZVByb3BzIiwib3B0cyIsImlzVGFnUmVuZGVyZXIiLCJtYXAiLCJzb3VyY2VQb3NpdGlvbiIsImluY2x1ZGVOb2RlSW5kZXgiLCJwYXJlbnRDaGlsZENvdW50IiwicmVmIiwiYXNzaWduRGVmaW5lZCIsIm5vZGVLZXkiLCJsZXZlbCIsInRpZ2h0IiwidW53cmFwUGFyYWdyYXBocyIsImdldExpc3RJdGVtQ2hpbGRyZW4iLCJjaGlsZE5vZGUiLCJsYW5ndWFnZSIsImlubGluZSIsImhyZWYiLCJjb2x1bW5BbGlnbm1lbnQiLCJpc0hlYWRlciIsImlzQmxvY2siLCJwYXJzZWRDaGlsZHJlbiIsImVsZW1lbnQiLCJDaGlsZHJlbiIsInRvQXJyYXkiLCJjbG9uZUVsZW1lbnQiLCJtZXJnZU5vZGVDaGlsZHJlbiIsImdldE5vZGVQcm9wcyIsImF0dHJzIiwiZGVmcyIsInByb3RvY29scyIsInVyaSIsImNvbG9uIiwic3VwcG9ydHNTdHJpbmdSZW5kZXIiLCJ2ZXJzaW9uIiwiU2ltcGxlUmVuZGVyZXIiLCJnZXRDb3JlUHJvcHMiLCJkYXRhLXNvdXJjZXBvcyIsImRlbGV0ZSIsImxpbmtSZWZlcmVuY2UiLCJpbWFnZVJlZmVyZW5jZSIsImJpbmQiLCJ0YWJsZUhlYWQiLCJ0YWJsZUJvZHkiLCJ0YWJsZVJvdyIsInRhYmxlQ2VsbCIsInN0eWxlIiwidGV4dEFsaWduIiwiY29yZVByb3BzIiwidXNlRnJhZ21lbnQiLCJjaGVja2JveCIsInJlYWRPbmx5IiwiaGVhZGluZyIsImNvbXAiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIl9faHRtbCIsInZpcnR1YWxIdG1sIiwicGFyc2VkSHRtbCIsInJpZ2h0IiwiY2FjaGUiLCJudW0iLCJsZWdhY3kiLCJpbnZhbGlkIiwiaGV4YWRlY2ltYWwiLCJhbHBoYW51bWVyaWNhbCIsImRlY29kZUVudGl0eSIsIm9wdGlvbiIsImVudGl0eUNoYXJhY3RlcnMiLCJuYW1lZEVudGl0eSIsInRlcm1pbmF0ZWQiLCJmb2xsb3dpbmciLCJvdXRwdXQiLCJiZWdpbiIsImRpZmYiLCJhZGRpdGlvbmFsIiwiaGFuZGxlVGV4dCIsImhhbmRsZVJlZmVyZW5jZSIsIndhcm5pbmdDb250ZXh0Iiwibm9vcCIsImxpbmVGZWVkIiwiYW1wZXJzYW5kIiwidGFiIiwiZm9ybUZlZWQiLCJzcGFjZSIsImxlc3NUaGFuIiwibnVtYmVyU2lnbiIsInVwcGVyY2FzZVgiLCJsb3dlcmNhc2VYIiwiaGV4YSIsImRlY2kiLCJuYW1lZFVua25vd24iLCJuYW1lZE5vdFRlcm1pbmF0ZWQiLCJuYW1lZEVtcHR5IiwiYXR0cmlidXRlIiwiZXF1YWxzVG8iLCJudW1lcmljTm90VGVybWluYXRlZCIsImJhc2VzIiwibnVtZXJpY1Byb2hpYml0ZWQiLCJyZXBsYWNlbWVudENoYXJhY3RlciIsIm51bWVyaWNEaXNhbGxvd2VkIiwiZGlzYWxsb3dlZCIsIm51bWVyaWNFbXB0eSIsImZsdXNoIiwiRnVuY3Rpb24iLCJ2YWwiLCJpbnRlcnJ1cHRvciIsImNvbmZpZyIsImlnbm9yZSIsImJvb2xzIiwiY29sbGFwc2VXaGl0ZVNwYWNlIl0sIm1hcHBpbmdzIjoiK0VBQUEsU0FBQUEsR0F5QkEsU0FBQUMsRUFBQUMsRUFBQUMsR0FHQSxJQURBLElBQUFDLEVBQUEsRUFDQUMsRUFBQUgsRUFBQUksT0FBQSxFQUFnQ0QsR0FBQSxFQUFRQSxJQUFBLENBQ3hDLElBQUFFLEVBQUFMLEVBQUFHLEdBQ0EsTUFBQUUsRUFDQUwsRUFBQU0sT0FBQUgsRUFBQSxHQUNLLE9BQUFFLEdBQ0xMLEVBQUFNLE9BQUFILEVBQUEsR0FDQUQsS0FDS0EsSUFDTEYsRUFBQU0sT0FBQUgsRUFBQSxHQUNBRCxLQUtBLEdBQUFELEVBQ0EsS0FBVUMsSUFBTUEsRUFDaEJGLEVBQUFPLFFBQUEsTUFJQSxPQUFBUCxFQUtBLElBQUFRLEVBQ0EsZ0VBQ0FDLEVBQUEsU0FBQUMsR0FDQSxPQUFBRixFQUFBRyxLQUFBRCxHQUFBRSxNQUFBLElBdUpBLFNBQUFDLEVBQUFDLEVBQUFDLEdBQ0EsR0FBQUQsRUFBQUQsT0FBQSxPQUFBQyxFQUFBRCxPQUFBRSxHQUVBLElBREEsSUFBQUMsRUFBQSxHQUNBYixFQUFBLEVBQW1CQSxFQUFBVyxFQUFBVixPQUFlRCxJQUNsQ1ksRUFBQUQsRUFBQVgsS0FBQVcsSUFBQUUsRUFBQUMsS0FBQUgsRUFBQVgsSUFFQSxPQUFBYSxFQXhKQUUsRUFBQUMsUUFBQSxXQUlBLElBSEEsSUFBQUMsRUFBQSxHQUNBQyxHQUFBLEVBRUFsQixFQUFBbUIsVUFBQWxCLE9BQUEsRUFBb0NELElBQUEsSUFBQWtCLEVBQThCbEIsSUFBQSxDQUNsRSxJQUFBb0IsRUFBQXBCLEdBQUEsRUFBQW1CLFVBQUFuQixHQUFBTCxFQUFBMEIsTUFHQSxvQkFBQUQsRUFDQSxVQUFBRSxVQUFBLDZDQUNLRixJQUlMSCxFQUFBRyxFQUFBLElBQUFILEVBQ0FDLEVBQUEsTUFBQUUsRUFBQUcsT0FBQSxJQVdBLE9BQUFMLEVBQUEsU0FK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dmYsRUFBQTRlLEdBQUEsMkNBQ0E1ZSxFQUFBcWYsR0FDQSxvREFDQXJmLEVBQUFtZixHQUNBLGlIQ3BGQXhyQixFQUFBOUMsUUFLQSxTQUFBeUQsR0FDQSxJQUFBb3JCLEVBQUF0akIsT0FBQTlILEdBQ0FyQyxFQUFBeXRCLEVBQUEzdkIsT0FFQSxLQUFBMnZCLEVBQUFydUIsU0FBQVksS0FBQXVPLElBSUEsT0FBQWtmLEVBQUFudkIsTUFBQSxFQUFBMEIsRUFBQSxJQVhBLElBQUF1TyxFQUFBLHVDQ0ZBN00sRUFBQTlDLFFBRUEsU0FBQTBjLEVBQUFuRixFQUFBdkssRUFBQXNFLEdBQ0EsSUFJQXdkLEVBQ0FDLEVBQ0ExZCxFQUNBb0IsRUFDQXhKLEVBQ0ErbEIsRUFUQUMsRUFBQSwwQkFDQXJPLEVBQUFxTyxFQUFBL3ZCLE9BQ0FBLEVBQUF3ZCxFQUFBeGQsT0FDQWtDLEdBQUEsRUFRQSxPQUFBQSxFQUFBbEMsR0FBQSxDQU9BLElBTkE0dkIsRUFBQXBTLEVBQUF0YixHQUNBMnRCLEVBQUFELEVBQUEsT0FDQXpkLEVBQUF5ZCxFQUFBLEdBQ0FyYyxHQUFBLEVBQ0F1YyxHQUFBLElBRUF2YyxFQUFBbU8sR0FHQSxRQUFBcFUsSUFBQXVpQixFQUZBOWxCLEVBQUFnbUIsRUFBQXhjLEtBRUFzYyxFQUFBOWxCLEtBQUErRCxFQUFBVixRQUFBckQsR0FBQSxDQUNBK2xCLEdBQUEsRUFDQSxNQUlBLElBQUFBLEdBSUF6WCxFQUFBbEcsR0FBQTVJLE1BQUF1RSxFQUFBc0UsR0FDQSxTQUlBLDRDQ3ZDQSxJQUFBNGQsRUFBeUIxckIsRUFBUSxNQUVqQ1YsRUFBQTlDLFFBSUEsU0FBQXlELEdBQ0EsT0FBQXlyQixFQUFBenJCLEdBQUFnYyIsImZpbGUiOiJ2ZW5kb3JzfkRvY3VtZW50YXRpb24uYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIHJlc29sdmVzIC4gYW5kIC4uIGVsZW1lbnRzIGluIGEgcGF0aCBhcnJheSB3aXRoIGRpcmVjdG9yeSBuYW1lcyB0aGVyZVxuLy8gbXVzdCBiZSBubyBzbGFzaGVzLCBlbXB0eSBlbGVtZW50cywgb3IgZGV2aWNlIG5hbWVzIChjOlxcKSBpbiB0aGUgYXJyYXlcbi8vIChzbyBhbHNvIG5vIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHNsYXNoZXMgLSBpdCBkb2VzIG5vdCBkaXN0aW5ndWlzaFxuLy8gcmVsYXRpdmUgYW5kIGFic29sdXRlIHBhdGhzKVxuZnVuY3Rpb24gbm9ybWFsaXplQXJyYXkocGFydHMsIGFsbG93QWJvdmVSb290KSB7XG4gIC8vIGlmIHRoZSBwYXRoIHRyaWVzIHRvIGdvIGFib3ZlIHRoZSByb290LCBgdXBgIGVuZHMgdXAgPiAwXG4gIHZhciB1cCA9IDA7XG4gIGZvciAodmFyIGkgPSBwYXJ0cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHZhciBsYXN0ID0gcGFydHNbaV07XG4gICAgaWYgKGxhc3QgPT09ICcuJykge1xuICAgICAgcGFydHMuc3BsaWNlKGksIDEpO1xuICAgIH0gZWxzZSBpZiAobGFzdCA9PT0gJy4uJykge1xuICAgICAgcGFydHMuc3BsaWNlKGksIDEpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBwYXJ0cy5zcGxpY2UoaSwgMSk7XG4gICAgICB1cC0tO1xuICAgIH1cbiAgfVxuXG4gIC8vIGlmIHRoZSBwYXRoIGlzIGFsbG93ZWQgdG8gZ28gYWJvdmUgdGhlIHJvb3QsIHJlc3RvcmUgbGVhZGluZyAuLnNcbiAgaWYgKGFsbG93QWJvdmVSb290KSB7XG4gICAgZm9yICg7IHVwLS07IHVwKSB7XG4gICAgICBwYXJ0cy51bnNoaWZ0KCcuLicpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwYXJ0cztcbn1cblxuLy8gU3BsaXQgYSBmaWxlbmFtZSBpbnRvIFtyb290LCBkaXIsIGJhc2VuYW1lLCBleHRdLCB1bml4IHZlcnNpb25cbi8vICdyb290JyBpcyBqdXN0IGEgc2xhc2gsIG9yIG5vdGhpbmcuXG52YXIgc3BsaXRQYXRoUmUgPVxuICAgIC9eKFxcLz98KShbXFxzXFxTXSo/KSgoPzpcXC57MSwyfXxbXlxcL10rP3wpKFxcLlteLlxcL10qfCkpKD86W1xcL10qKSQvO1xudmFyIHNwbGl0UGF0aCA9IGZ1bmN0aW9uKGZpbGVuYW1lKSB7XG4gIHJldHVybiBzcGxpdFBhdGhSZS5leGVjKGZpbGVuYW1lKS5zbGljZSgxKTtcbn07XG5cbi8vIHBhdGgucmVzb2x2ZShbZnJvbSAuLi5dLCB0bylcbi8vIHBvc2l4IHZlcnNpb25cbmV4cG9ydHMucmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgcmVzb2x2ZWRQYXRoID0gJycsXG4gICAgICByZXNvbHZlZEFic29sdXRlID0gZmFsc2U7XG5cbiAgZm9yICh2YXIgaSA9IGFyZ3VtZW50cy5sZW5ndGggLSAxOyBpID49IC0xICYmICFyZXNvbHZlZEFic29sdXRlOyBpLS0pIHtcbiAgICB2YXIgcGF0aCA9IChpID49IDApID8gYXJndW1lbnRzW2ldIDogcHJvY2Vzcy5jd2QoKTtcblxuICAgIC8vIFNraXAgZW1wdHkgYW5kIGludmFsaWQgZW50cmllc1xuICAgIGlmICh0eXBlb2YgcGF0aCAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyB0byBwYXRoLnJlc29sdmUgbXVzdCBiZSBzdHJpbmdzJyk7XG4gICAgfSBlbHNlIGlmICghcGF0aCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgcmVzb2x2ZWRQYXRoID0gcGF0aCArICcvJyArIHJlc29sdmVkUGF0aDtcbiAgICByZXNvbHZlZEFic29sdXRlID0gcGF0aC5jaGFyQXQoMCkgPT09ICcvJztcbiAgfVxuXG4gIC8vIEF0IHRoaXMgcG9pbnQgdGhlIHBhdGggc2hvdWxkIGJlIHJlc29sdmVkIHRvIGEgZnVsbCBhYnNvbHV0ZSBwYXRoLCBidXRcbiAgLy8gaGFuZGxlIHJlbGF0aXZlIHBhdGhzIHRvIGJlIHNhZmUgKG1pZ2h0IGhhcHBlbiB3aGVuIHByb2Nlc3MuY3dkKCkgZmFpbHMpXG5cbiAgLy8gTm9ybWFsaXplIHRoZSBwYXRoXG4gIHJlc29sdmVkUGF0aCA9IG5vcm1hbGl6ZUFycmF5KGZpbHRlcihyZXNvbHZlZFBhdGguc3BsaXQoJy8nKSwgZnVuY3Rpb24ocCkge1xuICAgIHJldHVybiAhIXA7XG4gIH0pLCAhcmVzb2x2ZWRBYnNvbHV0ZSkuam9pbignLycpO1xuXG4gIHJldHVybiAoKHJlc29sdmVkQWJzb2x1dGUgPyAnLycgOiAnJykgKyByZXNvbHZlZFBhdGgpIHx8ICcuJztcbn07XG5cbi8vIHBhdGgubm9ybWFsaXplKHBhdGgpXG4vLyBwb3NpeCB2ZXJzaW9uXG5leHBvcnRzLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgdmFyIGlzQWJzb2x1dGUgPSBleHBvcnRzLmlzQWJzb2x1dGUocGF0aCksXG4gICAgICB0cmFpbGluZ1NsYXNoID0gc3Vic3RyKHBhdGgsIC0xKSA9PT0gJy8nO1xuXG4gIC8vIE5vcm1hbGl6ZSB0aGUgcGF0aFxuICBwYXRoID0gbm9ybWFsaXplQXJyYXkoZmlsdGVyKHBhdGguc3BsaXQoJy8nKSwgZnVuY3Rpb24ocCkge1xuICAgIHJldHVybiAhIXA7XG4gIH0pLCAhaXNBYnNvbHV0ZSkuam9pbignLycpO1xuXG4gIGlmICghcGF0aCAmJiAhaXNBYnNvbHV0ZSkge1xuICAgIHBhdGggPSAnLic7XG4gIH1cbiAgaWYgKHBhdGggJiYgdHJhaWxpbmdTbGFzaCkge1xuICAgIHBhdGggKz0gJy8nO1xuICB9XG5cbiAgcmV0dXJuIChpc0Fic29sdXRlID8gJy8nIDogJycpICsgcGF0aDtcbn07XG5cbi8vIHBvc2l4IHZlcnNpb25cbmV4cG9ydHMuaXNBYnNvbHV0ZSA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLyc7XG59O1xuXG4vLyBwb3NpeCB2ZXJzaW9uXG5leHBvcnRzLmpvaW4gPSBmdW5jdGlvbigpIHtcbiAgdmFyIHBhdGhzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcbiAgcmV0dXJuIGV4cG9ydHMubm9ybWFsaXplKGZpbHRlcihwYXRocywgZnVuY3Rpb24ocCwgaW5kZXgpIHtcbiAgICBpZiAodHlwZW9mIHAgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudHMgdG8gcGF0aC5qb2luIG11c3QgYmUgc3RyaW5ncycpO1xuICAgIH1cbiAgICByZXR1cm4gcDtcbiAgfSkuam9pbignLycpKTtcbn07XG5cblxuLy8gcGF0aC5yZWxhdGl2ZShmcm9tLCB0bylcbi8vIHBvc2l4IHZlcnNpb25cbmV4cG9ydHMucmVsYXRpdmUgPSBmdW5jdGlvbihmcm9tLCB0bykge1xuICBmcm9tID0gZXhwb3J0cy5yZXNvbHZlKGZyb20pLnN1YnN0cigxKTtcbiAgdG8gPSBleHBvcnRzLnJlc29sdmUodG8pLnN1YnN0cigxKTtcblxuICBmdW5jdGlvbiB0cmltKGFycikge1xuICAgIHZhciBzdGFydCA9IDA7XG4gICAgZm9yICg7IHN0YXJ0IDwgYXJyLmxlbmd0aDsgc3RhcnQrKykge1xuICAgICAgaWYgKGFycltzdGFydF0gIT09ICcnKSBicmVhaztcbiAgICB9XG5cbiAgICB2YXIgZW5kID0gYXJyLmxlbmd0aCAtIDE7XG4gICAgZm9yICg7IGVuZCA+PSAwOyBlbmQtLSkge1xuICAgICAgaWYgKGFycltlbmRdICE9PSAnJykgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKHN0YXJ0ID4gZW5kKSByZXR1cm4gW107XG4gICAgcmV0dXJuIGFyci5zbGljZShzdGFydCwgZW5kIC0gc3RhcnQgKyAxKTtcbiAgfVxuXG4gIHZhciBmcm9tUGFydHMgPSB0cmltKGZyb20uc3BsaXQoJy8nKSk7XG4gIHZhciB0b1BhcnRzID0gdHJpbSh0by5zcGxpdCgnLycpKTtcblxuICB2YXIgbGVuZ3RoID0gTWF0aC5taW4oZnJvbVBhcnRzLmxlbmd0aCwgdG9QYXJ0cy5sZW5ndGgpO1xuICB2YXIgc2FtZVBhcnRzTGVuZ3RoID0gbGVuZ3RoO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGZyb21QYXJ0c1tpXSAhPT0gdG9QYXJ0c1tpXSkge1xuICAgICAgc2FtZVBhcnRzTGVuZ3RoID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHZhciBvdXRwdXRQYXJ0cyA9IFtdO1xuICBmb3IgKHZhciBpID0gc2FtZVBhcnRzTGVuZ3RoOyBpIDwgZnJvbVBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgb3V0cHV0UGFydHMucHVzaCgnLi4nKTtcbiAgfVxuXG4gIG91dHB1dFBhcnRzID0gb3V0cHV0UGFydHMuY29uY2F0KHRvUGFydHMuc2xpY2Uoc2FtZVBhcnRzTGVuZ3RoKSk7XG5cbiAgcmV0dXJuIG91dHB1dFBhcnRzLmpvaW4oJy8nKTtcbn07XG5cbmV4cG9ydHMuc2VwID0gJy8nO1xuZXhwb3J0cy5kZWxpbWl0ZXIgPSAnOic7XG5cbmV4cG9ydHMuZGlybmFtZSA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgdmFyIHJlc3VsdCA9IHNwbGl0UGF0aChwYXRoKSxcbiAgICAgIHJvb3QgPSByZXN1bHRbMF0sXG4gICAgICBkaXIgPSByZXN1bHRbMV07XG5cbiAgaWYgKCFyb290ICYmICFkaXIpIHtcbiAgICAvLyBObyBkaXJuYW1lIHdoYXRzb2V2ZXJcbiAgICByZXR1cm4gJy4nO1xuICB9XG5cbiAgaWYgKGRpcikge1xuICAgIC8vIEl0IGhhcyBhIGRpcm5hbWUsIHN0cmlwIHRyYWlsaW5nIHNsYXNoXG4gICAgZGlyID0gZGlyLnN1YnN0cigwLCBkaXIubGVuZ3RoIC0gMSk7XG4gIH1cblxuICByZXR1cm4gcm9vdCArIGRpcjtcbn07XG5cblxuZXhwb3J0cy5iYXNlbmFtZSA9IGZ1bmN0aW9uKHBhdGgsIGV4dCkge1xuICB2YXIgZiA9IHNwbGl0UGF0aChwYXRoKVsyXTtcbiAgLy8gVE9ETzogbWFrZSB0aGlzIGNvbXBhcmlzb24gY2FzZS1pbnNlbnNpdGl2ZSBvbiB3aW5kb3dzP1xuICBpZiAoZXh0ICYmIGYuc3Vic3RyKC0xICogZXh0Lmxlbmd0aCkgPT09IGV4dCkge1xuICAgIGYgPSBmLnN1YnN0cigwLCBmLmxlbmd0aCAtIGV4dC5sZW5ndGgpO1xuICB9XG4gIHJldHVybiBmO1xufTtcblxuXG5leHBvcnRzLmV4dG5hbWUgPSBmdW5jdGlvbihwYXRoKSB7XG4gIHJldHVybiBzcGxpdFBhdGgocGF0aClbM107XG59O1xuXG5mdW5jdGlvbiBmaWx0ZXIgKHhzLCBmKSB7XG4gICAgaWYgKHhzLmZpbHRlcikgcmV0dXJuIHhzLmZpbHRlcihmKTtcbiAgICB2YXIgcmVzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB4cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoZih4c1tpXSwgaSwgeHMpKSByZXMucHVzaCh4c1tpXSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5cbi8vIFN0cmluZy5wcm90b3R5cGUuc3Vic3RyIC0gbmVnYXRpdmUgaW5kZXggZG9uJ3Qgd29yayBpbiBJRThcbnZhciBzdWJzdHIgPSAnYWInLnN1YnN0cigtMSkgPT09ICdiJ1xuICAgID8gZnVuY3Rpb24gKHN0ciwgc3RhcnQsIGxlbikgeyByZXR1cm4gc3RyLnN1YnN0cihzdGFydCwgbGVuKSB9XG4gICAgOiBmdW5jdGlvbiAoc3RyLCBzdGFydCwgbGVuKSB7XG4gICAgICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gc3RyLmxlbmd0aCArIHN0YXJ0O1xuICAgICAgICByZXR1cm4gc3RyLnN1YnN0cihzdGFydCwgbGVuKTtcbiAgICB9XG47XG4iLCIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBhbHBoYWJldGljYWxcblxuLy8gQ2hlY2sgaWYgdGhlIGdpdmVuIGNoYXJhY3RlciBjb2RlLCBvciB0aGUgY2hhcmFjdGVyIGNvZGUgYXQgdGhlIGZpcnN0XG4vLyBjaGFyYWN0ZXIsIGlzIGFscGhhYmV0aWNhbC5cbmZ1bmN0aW9uIGFscGhhYmV0aWNhbChjaGFyYWN0ZXIpIHtcbiAgdmFyIGNvZGUgPSB0eXBlb2YgY2hhcmFjdGVyID09PSAnc3RyaW5nJyA/IGNoYXJhY3Rlci5jaGFyQ29kZUF0KDApIDogY2hhcmFjdGVyXG5cbiAgcmV0dXJuIChcbiAgICAoY29kZSA+PSA5NyAmJiBjb2RlIDw9IDEyMikgLyogYS16ICovIHx8XG4gICAgKGNvZGUgPj0gNjUgJiYgY29kZSA8PSA5MCkgLyogQS1aICovXG4gIClcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHBvc2l0aW9uOiB0cnVlLFxuICBnZm06IHRydWUsXG4gIGNvbW1vbm1hcms6IGZhbHNlLFxuICBmb290bm90ZXM6IGZhbHNlLFxuICBwZWRhbnRpYzogZmFsc2UsXG4gIGJsb2NrczogcmVxdWlyZSgnLi9ibG9jay1lbGVtZW50cy5qc29uJylcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gaW5kZW50YXRpb247XG5cbi8qIE1hcCBvZiBjaGFyYWN0ZXJzLCBhbmQgdGhlaXIgY29sdW1uIGxlbmd0aCxcbiAqIHdoaWNoIGNhbiBiZSB1c2VkIGFzIGluZGVudGF0aW9uLiAqL1xudmFyIGNoYXJhY3RlcnMgPSB7JyAnOiAxLCAnXFx0JzogNH07XG5cbi8qIEdldHMgaW5kZW50YXRpb24gaW5mb3JtYXRpb24gZm9yIGEgbGluZS4gKi9cbmZ1bmN0aW9uIGluZGVudGF0aW9uKHZhbHVlKSB7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBpbmRlbnQgPSAwO1xuICB2YXIgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcbiAgdmFyIHN0b3BzID0ge307XG4gIHZhciBzaXplO1xuXG4gIHdoaWxlIChjaGFyYWN0ZXIgaW4gY2hhcmFjdGVycykge1xuICAgIHNpemUgPSBjaGFyYWN0ZXJzW2NoYXJhY3Rlcl07XG5cbiAgICBpbmRlbnQgKz0gc2l6ZTtcblxuICAgIGlmIChzaXplID4gMSkge1xuICAgICAgaW5kZW50ID0gTWF0aC5mbG9vcihpbmRlbnQgLyBzaXplKSAqIHNpemU7XG4gICAgfVxuXG4gICAgc3RvcHNbaW5kZW50XSA9IGluZGV4O1xuXG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KCsraW5kZXgpO1xuICB9XG5cbiAgcmV0dXJuIHtpbmRlbnQ6IGluZGVudCwgc3RvcHM6IHN0b3BzfTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGF0dHJpYnV0ZU5hbWUgPSAnW2EtekEtWl86XVthLXpBLVowLTk6Ll8tXSonO1xudmFyIHVucXVvdGVkID0gJ1teXCJcXCc9PD5gXFxcXHUwMDAwLVxcXFx1MDAyMF0rJztcbnZhciBzaW5nbGVRdW90ZWQgPSAnXFwnW15cXCddKlxcJyc7XG52YXIgZG91YmxlUXVvdGVkID0gJ1wiW15cIl0qXCInO1xudmFyIGF0dHJpYnV0ZVZhbHVlID0gJyg/OicgKyB1bnF1b3RlZCArICd8JyArIHNpbmdsZVF1b3RlZCArICd8JyArIGRvdWJsZVF1b3RlZCArICcpJztcbnZhciBhdHRyaWJ1dGUgPSAnKD86XFxcXHMrJyArIGF0dHJpYnV0ZU5hbWUgKyAnKD86XFxcXHMqPVxcXFxzKicgKyBhdHRyaWJ1dGVWYWx1ZSArICcpPyknO1xudmFyIG9wZW5UYWcgPSAnPFtBLVphLXpdW0EtWmEtejAtOVxcXFwtXSonICsgYXR0cmlidXRlICsgJypcXFxccypcXFxcLz8+JztcbnZhciBjbG9zZVRhZyA9ICc8XFxcXC9bQS1aYS16XVtBLVphLXowLTlcXFxcLV0qXFxcXHMqPic7XG52YXIgY29tbWVudCA9ICc8IS0tLS0+fDwhLS0oPzotP1tePi1dKSg/Oi0/W14tXSkqLS0+JztcbnZhciBwcm9jZXNzaW5nID0gJzxbP10uKj9bP10+JztcbnZhciBkZWNsYXJhdGlvbiA9ICc8IVtBLVphLXpdK1xcXFxzK1tePl0qPic7XG52YXIgY2RhdGEgPSAnPCFcXFxcW0NEQVRBXFxcXFtbXFxcXHNcXFxcU10qP1xcXFxdXFxcXF0+JztcblxuZXhwb3J0cy5vcGVuQ2xvc2VUYWcgPSBuZXcgUmVnRXhwKCdeKD86JyArIG9wZW5UYWcgKyAnfCcgKyBjbG9zZVRhZyArICcpJyk7XG5cbmV4cG9ydHMudGFnID0gbmV3IFJlZ0V4cCgnXig/OicgK1xuICBvcGVuVGFnICsgJ3wnICtcbiAgY2xvc2VUYWcgKyAnfCcgK1xuICBjb21tZW50ICsgJ3wnICtcbiAgcHJvY2Vzc2luZyArICd8JyArXG4gIGRlY2xhcmF0aW9uICsgJ3wnICtcbiAgY2RhdGEgK1xuJyknKTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBsb2NhdGU7XG5cbmZ1bmN0aW9uIGxvY2F0ZSh2YWx1ZSwgZnJvbUluZGV4KSB7XG4gIHJldHVybiB2YWx1ZS5pbmRleE9mKCc8JywgZnJvbUluZGV4KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBsb2NhdGU7XG5cbmZ1bmN0aW9uIGxvY2F0ZSh2YWx1ZSwgZnJvbUluZGV4KSB7XG4gIHZhciBsaW5rID0gdmFsdWUuaW5kZXhPZignWycsIGZyb21JbmRleCk7XG4gIHZhciBpbWFnZSA9IHZhbHVlLmluZGV4T2YoJyFbJywgZnJvbUluZGV4KTtcblxuICBpZiAoaW1hZ2UgPT09IC0xKSB7XG4gICAgcmV0dXJuIGxpbms7XG4gIH1cblxuICAvKiBMaW5rIGNhbiBuZXZlciBiZSBgLTFgIGlmIGFuIGltYWdlIGlzIGZvdW5kLCBzbyB3ZSBkb27igJl0IG5lZWRcbiAgICogdG8gY2hlY2sgZm9yIHRoYXQgOikgKi9cbiAgcmV0dXJuIGxpbmsgPCBpbWFnZSA/IGxpbmsgOiBpbWFnZTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgeyBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09IFwiW29iamVjdCBBcmd1bWVudHNdXCIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9IH1cblxudmFyIHh0ZW5kID0gcmVxdWlyZSgneHRlbmQnKTtcblxudmFyIHVuaWZpZWQgPSByZXF1aXJlKCd1bmlmaWVkJyk7XG5cbnZhciBwYXJzZSA9IHJlcXVpcmUoJ3JlbWFyay1wYXJzZScpO1xuXG52YXIgUHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgYWRkTGlzdE1ldGFkYXRhID0gcmVxdWlyZSgnbWRhc3QtYWRkLWxpc3QtbWV0YWRhdGEnKTtcblxudmFyIG5haXZlSHRtbCA9IHJlcXVpcmUoJy4vcGx1Z2lucy9uYWl2ZS1odG1sJyk7XG5cbnZhciBkaXNhbGxvd05vZGUgPSByZXF1aXJlKCcuL3BsdWdpbnMvZGlzYWxsb3ctbm9kZScpO1xuXG52YXIgYXN0VG9SZWFjdCA9IHJlcXVpcmUoJy4vYXN0LXRvLXJlYWN0Jyk7XG5cbnZhciB3cmFwVGFibGVSb3dzID0gcmVxdWlyZSgnLi93cmFwLXRhYmxlLXJvd3MnKTtcblxudmFyIGdldERlZmluaXRpb25zID0gcmVxdWlyZSgnLi9nZXQtZGVmaW5pdGlvbnMnKTtcblxudmFyIHVyaVRyYW5zZm9ybWVyID0gcmVxdWlyZSgnLi91cmktdHJhbnNmb3JtZXInKTtcblxudmFyIGRlZmF1bHRSZW5kZXJlcnMgPSByZXF1aXJlKCcuL3JlbmRlcmVycycpO1xuXG52YXIgc3ltYm9scyA9IHJlcXVpcmUoJy4vc3ltYm9scycpO1xuXG52YXIgYWxsVHlwZXMgPSBPYmplY3Qua2V5cyhkZWZhdWx0UmVuZGVyZXJzKTtcblxudmFyIFJlYWN0TWFya2Rvd24gPSBmdW5jdGlvbiBSZWFjdE1hcmtkb3duKHByb3BzKSB7XG4gIHZhciBzcmMgPSBwcm9wcy5zb3VyY2UgfHwgcHJvcHMuY2hpbGRyZW4gfHwgJyc7XG4gIHZhciBwYXJzZXJPcHRpb25zID0gcHJvcHMucGFyc2VyT3B0aW9ucztcblxuICBpZiAocHJvcHMuYWxsb3dlZFR5cGVzICYmIHByb3BzLmRpc2FsbG93ZWRUeXBlcykge1xuICAgIHRocm93IG5ldyBFcnJvcignT25seSBvbmUgb2YgYGFsbG93ZWRUeXBlc2AgYW5kIGBkaXNhbGxvd2VkVHlwZXNgIHNob3VsZCBiZSBkZWZpbmVkJyk7XG4gIH1cblxuICB2YXIgcmVuZGVyZXJzID0geHRlbmQoZGVmYXVsdFJlbmRlcmVycywgcHJvcHMucmVuZGVyZXJzKTtcbiAgdmFyIHBsdWdpbnMgPSBbW3BhcnNlLCBwYXJzZXJPcHRpb25zXV0uY29uY2F0KHByb3BzLnBsdWdpbnMgfHwgW10pO1xuICB2YXIgcGFyc2VyID0gcGx1Z2lucy5yZWR1Y2UoYXBwbHlQYXJzZXJQbHVnaW4sIHVuaWZpZWQoKSk7XG4gIHZhciByYXdBc3QgPSBwYXJzZXIucGFyc2Uoc3JjKTtcbiAgdmFyIHJlbmRlclByb3BzID0geHRlbmQocHJvcHMsIHtcbiAgICByZW5kZXJlcnM6IHJlbmRlcmVycyxcbiAgICBkZWZpbml0aW9uczogZ2V0RGVmaW5pdGlvbnMocmF3QXN0KVxuICB9KTtcbiAgdmFyIGFzdFBsdWdpbnMgPSBkZXRlcm1pbmVBc3RQbHVnaW5zKHByb3BzKTtcbiAgdmFyIGFzdCA9IGFzdFBsdWdpbnMucmVkdWNlKGZ1bmN0aW9uIChub2RlLCBwbHVnaW4pIHtcbiAgICByZXR1cm4gcGx1Z2luKG5vZGUsIHJlbmRlclByb3BzKTtcbiAgfSwgcmF3QXN0KTtcbiAgcmV0dXJuIGFzdFRvUmVhY3QoYXN0LCByZW5kZXJQcm9wcyk7XG59O1xuXG5mdW5jdGlvbiBhcHBseVBhcnNlclBsdWdpbihwYXJzZXIsIHBsdWdpbikge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShwbHVnaW4pID8gcGFyc2VyLnVzZS5hcHBseShwYXJzZXIsIF90b0NvbnN1bWFibGVBcnJheShwbHVnaW4pKSA6IHBhcnNlci51c2UocGx1Z2luKTtcbn1cblxuZnVuY3Rpb24gZGV0ZXJtaW5lQXN0UGx1Z2lucyhwcm9wcykge1xuICB2YXIgcGx1Z2lucyA9IFt3cmFwVGFibGVSb3dzLCBhZGRMaXN0TWV0YWRhdGEoKV07XG4gIHZhciBkaXNhbGxvd2VkVHlwZXMgPSBwcm9wcy5kaXNhbGxvd2VkVHlwZXM7XG5cbiAgaWYgKHByb3BzLmFsbG93ZWRUeXBlcykge1xuICAgIGRpc2FsbG93ZWRUeXBlcyA9IGFsbFR5cGVzLmZpbHRlcihmdW5jdGlvbiAodHlwZSkge1xuICAgICAgcmV0dXJuIHR5cGUgIT09ICdyb290JyAmJiBwcm9wcy5hbGxvd2VkVHlwZXMuaW5kZXhPZih0eXBlKSA9PT0gLTE7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgcmVtb3ZhbE1ldGhvZCA9IHByb3BzLnVud3JhcERpc2FsbG93ZWQgPyAndW53cmFwJyA6ICdyZW1vdmUnO1xuXG4gIGlmIChkaXNhbGxvd2VkVHlwZXMgJiYgZGlzYWxsb3dlZFR5cGVzLmxlbmd0aCA+IDApIHtcbiAgICBwbHVnaW5zLnB1c2goZGlzYWxsb3dOb2RlLm9mVHlwZShkaXNhbGxvd2VkVHlwZXMsIHJlbW92YWxNZXRob2QpKTtcbiAgfVxuXG4gIGlmIChwcm9wcy5hbGxvd05vZGUpIHtcbiAgICBwbHVnaW5zLnB1c2goZGlzYWxsb3dOb2RlLmlmTm90TWF0Y2gocHJvcHMuYWxsb3dOb2RlLCByZW1vdmFsTWV0aG9kKSk7XG4gIH1cblxuICB2YXIgcmVuZGVySHRtbCA9ICFwcm9wcy5lc2NhcGVIdG1sICYmICFwcm9wcy5za2lwSHRtbDtcbiAgdmFyIGhhc0h0bWxQYXJzZXIgPSAocHJvcHMuYXN0UGx1Z2lucyB8fCBbXSkuc29tZShmdW5jdGlvbiAoaXRlbSkge1xuICAgIHZhciBwbHVnaW4gPSBBcnJheS5pc0FycmF5KGl0ZW0pID8gaXRlbVswXSA6IGl0ZW07XG4gICAgcmV0dXJuIHBsdWdpbi5pZGVudGl0eSA9PT0gc3ltYm9scy5IdG1sUGFyc2VyO1xuICB9KTtcblxuICBpZiAocmVuZGVySHRtbCAmJiAhaGFzSHRtbFBhcnNlcikge1xuICAgIHBsdWdpbnMucHVzaChuYWl2ZUh0bWwpO1xuICB9XG5cbiAgcmV0dXJuIHByb3BzLmFzdFBsdWdpbnMgPyBwbHVnaW5zLmNvbmNhdChwcm9wcy5hc3RQbHVnaW5zKSA6IHBsdWdpbnM7XG59XG5cblJlYWN0TWFya2Rvd24uZGVmYXVsdFByb3BzID0ge1xuICByZW5kZXJlcnM6IHt9LFxuICBlc2NhcGVIdG1sOiB0cnVlLFxuICBza2lwSHRtbDogZmFsc2UsXG4gIHNvdXJjZVBvczogZmFsc2UsXG4gIHJhd1NvdXJjZVBvczogZmFsc2UsXG4gIHRyYW5zZm9ybUxpbmtVcmk6IHVyaVRyYW5zZm9ybWVyLFxuICBhc3RQbHVnaW5zOiBbXSxcbiAgcGx1Z2luczogW10sXG4gIHBhcnNlck9wdGlvbnM6IHt9XG59O1xuUmVhY3RNYXJrZG93bi5wcm9wVHlwZXMgPSB7XG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgc291cmNlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLnN0cmluZyxcbiAgc291cmNlUG9zOiBQcm9wVHlwZXMuYm9vbCxcbiAgcmF3U291cmNlUG9zOiBQcm9wVHlwZXMuYm9vbCxcbiAgZXNjYXBlSHRtbDogUHJvcFR5cGVzLmJvb2wsXG4gIHNraXBIdG1sOiBQcm9wVHlwZXMuYm9vbCxcbiAgYWxsb3dOb2RlOiBQcm9wVHlwZXMuZnVuYyxcbiAgYWxsb3dlZFR5cGVzOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2YoYWxsVHlwZXMpKSxcbiAgZGlzYWxsb3dlZFR5cGVzOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2YoYWxsVHlwZXMpKSxcbiAgdHJhbnNmb3JtTGlua1VyaTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5ib29sXSksXG4gIGxpbmtUYXJnZXQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIHRyYW5zZm9ybUltYWdlVXJpOiBQcm9wVHlwZXMuZnVuYyxcbiAgYXN0UGx1Z2luczogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLmZ1bmMpLFxuICB1bndyYXBEaXNhbGxvd2VkOiBQcm9wVHlwZXMuYm9vbCxcbiAgcmVuZGVyZXJzOiBQcm9wVHlwZXMub2JqZWN0LFxuICBwbHVnaW5zOiBQcm9wVHlwZXMuYXJyYXksXG4gIHBhcnNlck9wdGlvbnM6IFByb3BUeXBlcy5vYmplY3Rcbn07XG5SZWFjdE1hcmtkb3duLnR5cGVzID0gYWxsVHlwZXM7XG5SZWFjdE1hcmtkb3duLnJlbmRlcmVycyA9IGRlZmF1bHRSZW5kZXJlcnM7XG5SZWFjdE1hcmtkb3duLnVyaVRyYW5zZm9ybWVyID0gdXJpVHJhbnNmb3JtZXI7XG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0TWFya2Rvd247IiwiJ3VzZSBzdHJpY3QnXG5cbi8qIERlcGVuZGVuY2llcy4gKi9cbnZhciBleHRlbmQgPSByZXF1aXJlKCdleHRlbmQnKVxudmFyIGJhaWwgPSByZXF1aXJlKCdiYWlsJylcbnZhciB2ZmlsZSA9IHJlcXVpcmUoJ3ZmaWxlJylcbnZhciB0cm91Z2ggPSByZXF1aXJlKCd0cm91Z2gnKVxudmFyIHN0cmluZyA9IHJlcXVpcmUoJ3gtaXMtc3RyaW5nJylcbnZhciBwbGFpbiA9IHJlcXVpcmUoJ2lzLXBsYWluLW9iaicpXG5cbi8qIEV4cG9zZSBhIGZyb3plbiBwcm9jZXNzb3IuICovXG5tb2R1bGUuZXhwb3J0cyA9IHVuaWZpZWQoKS5mcmVlemUoKVxuXG52YXIgc2xpY2UgPSBbXS5zbGljZVxudmFyIG93biA9IHt9Lmhhc093blByb3BlcnR5XG5cbi8qIFByb2Nlc3MgcGlwZWxpbmUuICovXG52YXIgcGlwZWxpbmUgPSB0cm91Z2goKVxuICAudXNlKHBpcGVsaW5lUGFyc2UpXG4gIC51c2UocGlwZWxpbmVSdW4pXG4gIC51c2UocGlwZWxpbmVTdHJpbmdpZnkpXG5cbmZ1bmN0aW9uIHBpcGVsaW5lUGFyc2UocCwgY3R4KSB7XG4gIGN0eC50cmVlID0gcC5wYXJzZShjdHguZmlsZSlcbn1cblxuZnVuY3Rpb24gcGlwZWxpbmVSdW4ocCwgY3R4LCBuZXh0KSB7XG4gIHAucnVuKGN0eC50cmVlLCBjdHguZmlsZSwgZG9uZSlcblxuICBmdW5jdGlvbiBkb25lKGVyciwgdHJlZSwgZmlsZSkge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIG5leHQoZXJyKVxuICAgIH0gZWxzZSB7XG4gICAgICBjdHgudHJlZSA9IHRyZWVcbiAgICAgIGN0eC5maWxlID0gZmlsZVxuICAgICAgbmV4dCgpXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHBpcGVsaW5lU3RyaW5naWZ5KHAsIGN0eCkge1xuICBjdHguZmlsZS5jb250ZW50cyA9IHAuc3RyaW5naWZ5KGN0eC50cmVlLCBjdHguZmlsZSlcbn1cblxuLyogRnVuY3Rpb24gdG8gY3JlYXRlIHRoZSBmaXJzdCBwcm9jZXNzb3IuICovXG5mdW5jdGlvbiB1bmlmaWVkKCkge1xuICB2YXIgYXR0YWNoZXJzID0gW11cbiAgdmFyIHRyYW5zZm9ybWVycyA9IHRyb3VnaCgpXG4gIHZhciBuYW1lc3BhY2UgPSB7fVxuICB2YXIgZnJvemVuID0gZmFsc2VcbiAgdmFyIGZyZWV6ZUluZGV4ID0gLTFcblxuICAvKiBEYXRhIG1hbmFnZW1lbnQuICovXG4gIHByb2Nlc3Nvci5kYXRhID0gZGF0YVxuXG4gIC8qIExvY2suICovXG4gIHByb2Nlc3Nvci5mcmVlemUgPSBmcmVlemVcblxuICAvKiBQbHVnLWlucy4gKi9cbiAgcHJvY2Vzc29yLmF0dGFjaGVycyA9IGF0dGFjaGVyc1xuICBwcm9jZXNzb3IudXNlID0gdXNlXG5cbiAgLyogQVBJLiAqL1xuICBwcm9jZXNzb3IucGFyc2UgPSBwYXJzZVxuICBwcm9jZXNzb3Iuc3RyaW5naWZ5ID0gc3RyaW5naWZ5XG4gIHByb2Nlc3Nvci5ydW4gPSBydW5cbiAgcHJvY2Vzc29yLnJ1blN5bmMgPSBydW5TeW5jXG4gIHByb2Nlc3Nvci5wcm9jZXNzID0gcHJvY2Vzc1xuICBwcm9jZXNzb3IucHJvY2Vzc1N5bmMgPSBwcm9jZXNzU3luY1xuXG4gIC8qIEV4cG9zZS4gKi9cbiAgcmV0dXJuIHByb2Nlc3NvclxuXG4gIC8qIENyZWF0ZSBhIG5ldyBwcm9jZXNzb3IgYmFzZWQgb24gdGhlIHByb2Nlc3NvclxuICAgKiBpbiB0aGUgY3VycmVudCBzY29wZS4gKi9cbiAgZnVuY3Rpb24gcHJvY2Vzc29yKCkge1xuICAgIHZhciBkZXN0aW5hdGlvbiA9IHVuaWZpZWQoKVxuICAgIHZhciBsZW5ndGggPSBhdHRhY2hlcnMubGVuZ3RoXG4gICAgdmFyIGluZGV4ID0gLTFcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBkZXN0aW5hdGlvbi51c2UuYXBwbHkobnVsbCwgYXR0YWNoZXJzW2luZGV4XSlcbiAgICB9XG5cbiAgICBkZXN0aW5hdGlvbi5kYXRhKGV4dGVuZCh0cnVlLCB7fSwgbmFtZXNwYWNlKSlcblxuICAgIHJldHVybiBkZXN0aW5hdGlvblxuICB9XG5cbiAgLyogRnJlZXplOiB1c2VkIHRvIHNpZ25hbCBhIHByb2Nlc3NvciB0aGF0IGhhcyBmaW5pc2hlZFxuICAgKiBjb25maWd1cmF0aW9uLlxuICAgKlxuICAgKiBGb3IgZXhhbXBsZSwgdGFrZSB1bmlmaWVkIGl0c2VsZi4gIEl04oCZcyBmcm96ZW4uXG4gICAqIFBsdWctaW5zIHNob3VsZCBub3QgYmUgYWRkZWQgdG8gaXQuICBSYXRoZXIsIGl0IHNob3VsZFxuICAgKiBiZSBleHRlbmRlZCwgYnkgaW52b2tpbmcgaXQsIGJlZm9yZSBtb2RpZnlpbmcgaXQuXG4gICAqXG4gICAqIEluIGVzc2VuY2UsIGFsd2F5cyBpbnZva2UgdGhpcyB3aGVuIGV4cG9ydGluZyBhXG4gICAqIHByb2Nlc3Nvci4gKi9cbiAgZnVuY3Rpb24gZnJlZXplKCkge1xuICAgIHZhciB2YWx1ZXNcbiAgICB2YXIgcGx1Z2luXG4gICAgdmFyIG9wdGlvbnNcbiAgICB2YXIgdHJhbnNmb3JtZXJcblxuICAgIGlmIChmcm96ZW4pIHtcbiAgICAgIHJldHVybiBwcm9jZXNzb3JcbiAgICB9XG5cbiAgICB3aGlsZSAoKytmcmVlemVJbmRleCA8IGF0dGFjaGVycy5sZW5ndGgpIHtcbiAgICAgIHZhbHVlcyA9IGF0dGFjaGVyc1tmcmVlemVJbmRleF1cbiAgICAgIHBsdWdpbiA9IHZhbHVlc1swXVxuICAgICAgb3B0aW9ucyA9IHZhbHVlc1sxXVxuICAgICAgdHJhbnNmb3JtZXIgPSBudWxsXG5cbiAgICAgIGlmIChvcHRpb25zID09PSBmYWxzZSkge1xuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucyA9PT0gdHJ1ZSkge1xuICAgICAgICB2YWx1ZXNbMV0gPSB1bmRlZmluZWRcbiAgICAgIH1cblxuICAgICAgdHJhbnNmb3JtZXIgPSBwbHVnaW4uYXBwbHkocHJvY2Vzc29yLCB2YWx1ZXMuc2xpY2UoMSkpXG5cbiAgICAgIGlmICh0eXBlb2YgdHJhbnNmb3JtZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdHJhbnNmb3JtZXJzLnVzZSh0cmFuc2Zvcm1lcilcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmcm96ZW4gPSB0cnVlXG4gICAgZnJlZXplSW5kZXggPSBJbmZpbml0eVxuXG4gICAgcmV0dXJuIHByb2Nlc3NvclxuICB9XG5cbiAgLyogRGF0YSBtYW5hZ2VtZW50LlxuICAgKiBHZXR0ZXIgLyBzZXR0ZXIgZm9yIHByb2Nlc3Nvci1zcGVjaWZpYyBpbmZvcm10aW9uLiAqL1xuICBmdW5jdGlvbiBkYXRhKGtleSwgdmFsdWUpIHtcbiAgICBpZiAoc3RyaW5nKGtleSkpIHtcbiAgICAgIC8qIFNldCBga2V5YC4gKi9cbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgIGFzc2VydFVuZnJvemVuKCdkYXRhJywgZnJvemVuKVxuXG4gICAgICAgIG5hbWVzcGFjZVtrZXldID0gdmFsdWVcblxuICAgICAgICByZXR1cm4gcHJvY2Vzc29yXG4gICAgICB9XG5cbiAgICAgIC8qIEdldCBga2V5YC4gKi9cbiAgICAgIHJldHVybiAob3duLmNhbGwobmFtZXNwYWNlLCBrZXkpICYmIG5hbWVzcGFjZVtrZXldKSB8fCBudWxsXG4gICAgfVxuXG4gICAgLyogU2V0IHNwYWNlLiAqL1xuICAgIGlmIChrZXkpIHtcbiAgICAgIGFzc2VydFVuZnJvemVuKCdkYXRhJywgZnJvemVuKVxuICAgICAgbmFtZXNwYWNlID0ga2V5XG4gICAgICByZXR1cm4gcHJvY2Vzc29yXG4gICAgfVxuXG4gICAgLyogR2V0IHNwYWNlLiAqL1xuICAgIHJldHVybiBuYW1lc3BhY2VcbiAgfVxuXG4gIC8qIFBsdWctaW4gbWFuYWdlbWVudC5cbiAgICpcbiAgICogUGFzcyBpdDpcbiAgICogKiAgIGFuIGF0dGFjaGVyIGFuZCBvcHRpb25zLFxuICAgKiAqICAgYSBwcmVzZXQsXG4gICAqICogICBhIGxpc3Qgb2YgcHJlc2V0cywgYXR0YWNoZXJzLCBhbmQgYXJndW1lbnRzIChsaXN0XG4gICAqICAgICBvZiBhdHRhY2hlcnMgYW5kIG9wdGlvbnMpLiAqL1xuICBmdW5jdGlvbiB1c2UodmFsdWUpIHtcbiAgICB2YXIgc2V0dGluZ3NcblxuICAgIGFzc2VydFVuZnJvemVuKCd1c2UnLCBmcm96ZW4pXG5cbiAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLyogRW1wdHkgKi9cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYWRkUGx1Z2luLmFwcGx5KG51bGwsIGFyZ3VtZW50cylcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGlmICgnbGVuZ3RoJyBpbiB2YWx1ZSkge1xuICAgICAgICBhZGRMaXN0KHZhbHVlKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWRkUHJlc2V0KHZhbHVlKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHVzYWJsZSB2YWx1ZSwgbm90IGAnICsgdmFsdWUgKyAnYCcpXG4gICAgfVxuXG4gICAgaWYgKHNldHRpbmdzKSB7XG4gICAgICBuYW1lc3BhY2Uuc2V0dGluZ3MgPSBleHRlbmQobmFtZXNwYWNlLnNldHRpbmdzIHx8IHt9LCBzZXR0aW5ncylcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvY2Vzc29yXG5cbiAgICBmdW5jdGlvbiBhZGRQcmVzZXQocmVzdWx0KSB7XG4gICAgICBhZGRMaXN0KHJlc3VsdC5wbHVnaW5zKVxuXG4gICAgICBpZiAocmVzdWx0LnNldHRpbmdzKSB7XG4gICAgICAgIHNldHRpbmdzID0gZXh0ZW5kKHNldHRpbmdzIHx8IHt9LCByZXN1bHQuc2V0dGluZ3MpXG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGFkZFBsdWdpbih2YWx1ZSlcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgICBpZiAoJ2xlbmd0aCcgaW4gdmFsdWUpIHtcbiAgICAgICAgICBhZGRQbHVnaW4uYXBwbHkobnVsbCwgdmFsdWUpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWRkUHJlc2V0KHZhbHVlKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHVzYWJsZSB2YWx1ZSwgbm90IGAnICsgdmFsdWUgKyAnYCcpXG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkTGlzdChwbHVnaW5zKSB7XG4gICAgICB2YXIgbGVuZ3RoXG4gICAgICB2YXIgaW5kZXhcblxuICAgICAgaWYgKHBsdWdpbnMgPT09IG51bGwgfHwgcGx1Z2lucyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8qIEVtcHR5ICovXG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBwbHVnaW5zID09PSAnb2JqZWN0JyAmJiAnbGVuZ3RoJyBpbiBwbHVnaW5zKSB7XG4gICAgICAgIGxlbmd0aCA9IHBsdWdpbnMubGVuZ3RoXG4gICAgICAgIGluZGV4ID0gLTFcblxuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGFkZChwbHVnaW5zW2luZGV4XSlcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBhIGxpc3Qgb2YgcGx1Z2lucywgbm90IGAnICsgcGx1Z2lucyArICdgJylcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRQbHVnaW4ocGx1Z2luLCB2YWx1ZSkge1xuICAgICAgdmFyIGVudHJ5ID0gZmluZChwbHVnaW4pXG5cbiAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICBpZiAocGxhaW4oZW50cnlbMV0pICYmIHBsYWluKHZhbHVlKSkge1xuICAgICAgICAgIHZhbHVlID0gZXh0ZW5kKGVudHJ5WzFdLCB2YWx1ZSlcbiAgICAgICAgfVxuXG4gICAgICAgIGVudHJ5WzFdID0gdmFsdWVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGF0dGFjaGVycy5wdXNoKHNsaWNlLmNhbGwoYXJndW1lbnRzKSlcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBmaW5kKHBsdWdpbikge1xuICAgIHZhciBsZW5ndGggPSBhdHRhY2hlcnMubGVuZ3RoXG4gICAgdmFyIGluZGV4ID0gLTFcbiAgICB2YXIgZW50cnlcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBlbnRyeSA9IGF0dGFjaGVyc1tpbmRleF1cblxuICAgICAgaWYgKGVudHJ5WzBdID09PSBwbHVnaW4pIHtcbiAgICAgICAgcmV0dXJuIGVudHJ5XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyogUGFyc2UgYSBmaWxlIChpbiBzdHJpbmcgb3IgVkZpbGUgcmVwcmVzZW50YXRpb24pXG4gICAqIGludG8gYSBVbmlzdCBub2RlIHVzaW5nIHRoZSBgUGFyc2VyYCBvbiB0aGVcbiAgICogcHJvY2Vzc29yLiAqL1xuICBmdW5jdGlvbiBwYXJzZShkb2MpIHtcbiAgICB2YXIgZmlsZSA9IHZmaWxlKGRvYylcbiAgICB2YXIgUGFyc2VyXG5cbiAgICBmcmVlemUoKVxuICAgIFBhcnNlciA9IHByb2Nlc3Nvci5QYXJzZXJcbiAgICBhc3NlcnRQYXJzZXIoJ3BhcnNlJywgUGFyc2VyKVxuXG4gICAgaWYgKG5ld2FibGUoUGFyc2VyKSkge1xuICAgICAgcmV0dXJuIG5ldyBQYXJzZXIoU3RyaW5nKGZpbGUpLCBmaWxlKS5wYXJzZSgpXG4gICAgfVxuXG4gICAgcmV0dXJuIFBhcnNlcihTdHJpbmcoZmlsZSksIGZpbGUpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbmV3LWNhcFxuICB9XG5cbiAgLyogUnVuIHRyYW5zZm9ybXMgb24gYSBVbmlzdCBub2RlIHJlcHJlc2VudGF0aW9uIG9mIGEgZmlsZVxuICAgKiAoaW4gc3RyaW5nIG9yIFZGaWxlIHJlcHJlc2VudGF0aW9uKSwgYXN5bmMuICovXG4gIGZ1bmN0aW9uIHJ1bihub2RlLCBmaWxlLCBjYikge1xuICAgIGFzc2VydE5vZGUobm9kZSlcbiAgICBmcmVlemUoKVxuXG4gICAgaWYgKCFjYiAmJiB0eXBlb2YgZmlsZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY2IgPSBmaWxlXG4gICAgICBmaWxlID0gbnVsbFxuICAgIH1cblxuICAgIGlmICghY2IpIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShleGVjdXRvcilcbiAgICB9XG5cbiAgICBleGVjdXRvcihudWxsLCBjYilcblxuICAgIGZ1bmN0aW9uIGV4ZWN1dG9yKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdHJhbnNmb3JtZXJzLnJ1bihub2RlLCB2ZmlsZShmaWxlKSwgZG9uZSlcblxuICAgICAgZnVuY3Rpb24gZG9uZShlcnIsIHRyZWUsIGZpbGUpIHtcbiAgICAgICAgdHJlZSA9IHRyZWUgfHwgbm9kZVxuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgcmVqZWN0KGVycilcbiAgICAgICAgfSBlbHNlIGlmIChyZXNvbHZlKSB7XG4gICAgICAgICAgcmVzb2x2ZSh0cmVlKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNiKG51bGwsIHRyZWUsIGZpbGUpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKiBSdW4gdHJhbnNmb3JtcyBvbiBhIFVuaXN0IG5vZGUgcmVwcmVzZW50YXRpb24gb2YgYSBmaWxlXG4gICAqIChpbiBzdHJpbmcgb3IgVkZpbGUgcmVwcmVzZW50YXRpb24pLCBzeW5jLiAqL1xuICBmdW5jdGlvbiBydW5TeW5jKG5vZGUsIGZpbGUpIHtcbiAgICB2YXIgY29tcGxldGUgPSBmYWxzZVxuICAgIHZhciByZXN1bHRcblxuICAgIHJ1bihub2RlLCBmaWxlLCBkb25lKVxuXG4gICAgYXNzZXJ0RG9uZSgncnVuU3luYycsICdydW4nLCBjb21wbGV0ZSlcblxuICAgIHJldHVybiByZXN1bHRcblxuICAgIGZ1bmN0aW9uIGRvbmUoZXJyLCB0cmVlKSB7XG4gICAgICBjb21wbGV0ZSA9IHRydWVcbiAgICAgIGJhaWwoZXJyKVxuICAgICAgcmVzdWx0ID0gdHJlZVxuICAgIH1cbiAgfVxuXG4gIC8qIFN0cmluZ2lmeSBhIFVuaXN0IG5vZGUgcmVwcmVzZW50YXRpb24gb2YgYSBmaWxlXG4gICAqIChpbiBzdHJpbmcgb3IgVkZpbGUgcmVwcmVzZW50YXRpb24pIGludG8gYSBzdHJpbmdcbiAgICogdXNpbmcgdGhlIGBDb21waWxlcmAgb24gdGhlIHByb2Nlc3Nvci4gKi9cbiAgZnVuY3Rpb24gc3RyaW5naWZ5KG5vZGUsIGRvYykge1xuICAgIHZhciBmaWxlID0gdmZpbGUoZG9jKVxuICAgIHZhciBDb21waWxlclxuXG4gICAgZnJlZXplKClcbiAgICBDb21waWxlciA9IHByb2Nlc3Nvci5Db21waWxlclxuICAgIGFzc2VydENvbXBpbGVyKCdzdHJpbmdpZnknLCBDb21waWxlcilcbiAgICBhc3NlcnROb2RlKG5vZGUpXG5cbiAgICBpZiAobmV3YWJsZShDb21waWxlcikpIHtcbiAgICAgIHJldHVybiBuZXcgQ29tcGlsZXIobm9kZSwgZmlsZSkuY29tcGlsZSgpXG4gICAgfVxuXG4gICAgcmV0dXJuIENvbXBpbGVyKG5vZGUsIGZpbGUpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbmV3LWNhcFxuICB9XG5cbiAgLyogUGFyc2UgYSBmaWxlIChpbiBzdHJpbmcgb3IgVkZpbGUgcmVwcmVzZW50YXRpb24pXG4gICAqIGludG8gYSBVbmlzdCBub2RlIHVzaW5nIHRoZSBgUGFyc2VyYCBvbiB0aGUgcHJvY2Vzc29yLFxuICAgKiB0aGVuIHJ1biB0cmFuc2Zvcm1zIG9uIHRoYXQgbm9kZSwgYW5kIGNvbXBpbGUgdGhlXG4gICAqIHJlc3VsdGluZyBub2RlIHVzaW5nIHRoZSBgQ29tcGlsZXJgIG9uIHRoZSBwcm9jZXNzb3IsXG4gICAqIGFuZCBzdG9yZSB0aGF0IHJlc3VsdCBvbiB0aGUgVkZpbGUuICovXG4gIGZ1bmN0aW9uIHByb2Nlc3MoZG9jLCBjYikge1xuICAgIGZyZWV6ZSgpXG4gICAgYXNzZXJ0UGFyc2VyKCdwcm9jZXNzJywgcHJvY2Vzc29yLlBhcnNlcilcbiAgICBhc3NlcnRDb21waWxlcigncHJvY2VzcycsIHByb2Nlc3Nvci5Db21waWxlcilcblxuICAgIGlmICghY2IpIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShleGVjdXRvcilcbiAgICB9XG5cbiAgICBleGVjdXRvcihudWxsLCBjYilcblxuICAgIGZ1bmN0aW9uIGV4ZWN1dG9yKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIGZpbGUgPSB2ZmlsZShkb2MpXG5cbiAgICAgIHBpcGVsaW5lLnJ1bihwcm9jZXNzb3IsIHtmaWxlOiBmaWxlfSwgZG9uZSlcblxuICAgICAgZnVuY3Rpb24gZG9uZShlcnIpIHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIHJlamVjdChlcnIpXG4gICAgICAgIH0gZWxzZSBpZiAocmVzb2x2ZSkge1xuICAgICAgICAgIHJlc29sdmUoZmlsZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYihudWxsLCBmaWxlKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyogUHJvY2VzcyB0aGUgZ2l2ZW4gZG9jdW1lbnQgKGluIHN0cmluZyBvciBWRmlsZVxuICAgKiByZXByZXNlbnRhdGlvbiksIHN5bmMuICovXG4gIGZ1bmN0aW9uIHByb2Nlc3NTeW5jKGRvYykge1xuICAgIHZhciBjb21wbGV0ZSA9IGZhbHNlXG4gICAgdmFyIGZpbGVcblxuICAgIGZyZWV6ZSgpXG4gICAgYXNzZXJ0UGFyc2VyKCdwcm9jZXNzU3luYycsIHByb2Nlc3Nvci5QYXJzZXIpXG4gICAgYXNzZXJ0Q29tcGlsZXIoJ3Byb2Nlc3NTeW5jJywgcHJvY2Vzc29yLkNvbXBpbGVyKVxuICAgIGZpbGUgPSB2ZmlsZShkb2MpXG5cbiAgICBwcm9jZXNzKGZpbGUsIGRvbmUpXG5cbiAgICBhc3NlcnREb25lKCdwcm9jZXNzU3luYycsICdwcm9jZXNzJywgY29tcGxldGUpXG5cbiAgICByZXR1cm4gZmlsZVxuXG4gICAgZnVuY3Rpb24gZG9uZShlcnIpIHtcbiAgICAgIGNvbXBsZXRlID0gdHJ1ZVxuICAgICAgYmFpbChlcnIpXG4gICAgfVxuICB9XG59XG5cbi8qIENoZWNrIGlmIGBmdW5jYCBpcyBhIGNvbnN0cnVjdG9yLiAqL1xuZnVuY3Rpb24gbmV3YWJsZSh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nICYmIGtleXModmFsdWUucHJvdG90eXBlKVxufVxuXG4vKiBDaGVjayBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCB3aXRoIGtleXMuICovXG5mdW5jdGlvbiBrZXlzKHZhbHVlKSB7XG4gIHZhciBrZXlcbiAgZm9yIChrZXkgaW4gdmFsdWUpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG4vKiBBc3NlcnQgYSBwYXJzZXIgaXMgYXZhaWxhYmxlLiAqL1xuZnVuY3Rpb24gYXNzZXJ0UGFyc2VyKG5hbWUsIFBhcnNlcikge1xuICBpZiAodHlwZW9mIFBhcnNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGAnICsgbmFtZSArICdgIHdpdGhvdXQgYFBhcnNlcmAnKVxuICB9XG59XG5cbi8qIEFzc2VydCBhIGNvbXBpbGVyIGlzIGF2YWlsYWJsZS4gKi9cbmZ1bmN0aW9uIGFzc2VydENvbXBpbGVyKG5hbWUsIENvbXBpbGVyKSB7XG4gIGlmICh0eXBlb2YgQ29tcGlsZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBgJyArIG5hbWUgKyAnYCB3aXRob3V0IGBDb21waWxlcmAnKVxuICB9XG59XG5cbi8qIEFzc2VydCB0aGUgcHJvY2Vzc29yIGlzIG5vdCBmcm96ZW4uICovXG5mdW5jdGlvbiBhc3NlcnRVbmZyb3plbihuYW1lLCBmcm96ZW4pIHtcbiAgaWYgKGZyb3plbikge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIFtcbiAgICAgICAgJ0Nhbm5vdCBpbnZva2UgYCcgKyBuYW1lICsgJ2Agb24gYSBmcm96ZW4gcHJvY2Vzc29yLlxcbkNyZWF0ZSBhIG5ldyAnLFxuICAgICAgICAncHJvY2Vzc29yIGZpcnN0LCBieSBpbnZva2luZyBpdDogdXNlIGBwcm9jZXNzb3IoKWAgaW5zdGVhZCBvZiAnLFxuICAgICAgICAnYHByb2Nlc3NvcmAuJ1xuICAgICAgXS5qb2luKCcnKVxuICAgIClcbiAgfVxufVxuXG4vKiBBc3NlcnQgYG5vZGVgIGlzIGEgVW5pc3Qgbm9kZS4gKi9cbmZ1bmN0aW9uIGFzc2VydE5vZGUobm9kZSkge1xuICBpZiAoIW5vZGUgfHwgIXN0cmluZyhub2RlLnR5cGUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBub2RlLCBnb3QgYCcgKyBub2RlICsgJ2AnKVxuICB9XG59XG5cbi8qIEFzc2VydCB0aGF0IGBjb21wbGV0ZWAgaXMgYHRydWVgLiAqL1xuZnVuY3Rpb24gYXNzZXJ0RG9uZShuYW1lLCBhc3luY05hbWUsIGNvbXBsZXRlKSB7XG4gIGlmICghY29tcGxldGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnYCcgKyBuYW1lICsgJ2AgZmluaXNoZWQgYXN5bmMuIFVzZSBgJyArIGFzeW5jTmFtZSArICdgIGluc3RlYWQnXG4gICAgKVxuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxudmFyIGlzQXJyYXkgPSBmdW5jdGlvbiBpc0FycmF5KGFycikge1xuXHRpZiAodHlwZW9mIEFycmF5LmlzQXJyYXkgPT09ICdmdW5jdGlvbicpIHtcblx0XHRyZXR1cm4gQXJyYXkuaXNBcnJheShhcnIpO1xuXHR9XG5cblx0cmV0dXJuIHRvU3RyLmNhbGwoYXJyKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG5cbnZhciBpc1BsYWluT2JqZWN0ID0gZnVuY3Rpb24gaXNQbGFpbk9iamVjdChvYmopIHtcblx0aWYgKCFvYmogfHwgdG9TdHIuY2FsbChvYmopICE9PSAnW29iamVjdCBPYmplY3RdJykge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHZhciBoYXNPd25Db25zdHJ1Y3RvciA9IGhhc093bi5jYWxsKG9iaiwgJ2NvbnN0cnVjdG9yJyk7XG5cdHZhciBoYXNJc1Byb3RvdHlwZU9mID0gb2JqLmNvbnN0cnVjdG9yICYmIG9iai5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgJiYgaGFzT3duLmNhbGwob2JqLmNvbnN0cnVjdG9yLnByb3RvdHlwZSwgJ2lzUHJvdG90eXBlT2YnKTtcblx0Ly8gTm90IG93biBjb25zdHJ1Y3RvciBwcm9wZXJ0eSBtdXN0IGJlIE9iamVjdFxuXHRpZiAob2JqLmNvbnN0cnVjdG9yICYmICFoYXNPd25Db25zdHJ1Y3RvciAmJiAhaGFzSXNQcm90b3R5cGVPZikge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8vIE93biBwcm9wZXJ0aWVzIGFyZSBlbnVtZXJhdGVkIGZpcnN0bHksIHNvIHRvIHNwZWVkIHVwLFxuXHQvLyBpZiBsYXN0IG9uZSBpcyBvd24sIHRoZW4gYWxsIHByb3BlcnRpZXMgYXJlIG93bi5cblx0dmFyIGtleTtcblx0Zm9yIChrZXkgaW4gb2JqKSB7IC8qKi8gfVxuXG5cdHJldHVybiB0eXBlb2Yga2V5ID09PSAndW5kZWZpbmVkJyB8fCBoYXNPd24uY2FsbChvYmosIGtleSk7XG59O1xuXG4vLyBJZiBuYW1lIGlzICdfX3Byb3RvX18nLCBhbmQgT2JqZWN0LmRlZmluZVByb3BlcnR5IGlzIGF2YWlsYWJsZSwgZGVmaW5lIF9fcHJvdG9fXyBhcyBhbiBvd24gcHJvcGVydHkgb24gdGFyZ2V0XG52YXIgc2V0UHJvcGVydHkgPSBmdW5jdGlvbiBzZXRQcm9wZXJ0eSh0YXJnZXQsIG9wdGlvbnMpIHtcblx0aWYgKGRlZmluZVByb3BlcnR5ICYmIG9wdGlvbnMubmFtZSA9PT0gJ19fcHJvdG9fXycpIHtcblx0XHRkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIG9wdGlvbnMubmFtZSwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdHZhbHVlOiBvcHRpb25zLm5ld1ZhbHVlLFxuXHRcdFx0d3JpdGFibGU6IHRydWVcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHR0YXJnZXRbb3B0aW9ucy5uYW1lXSA9IG9wdGlvbnMubmV3VmFsdWU7XG5cdH1cbn07XG5cbi8vIFJldHVybiB1bmRlZmluZWQgaW5zdGVhZCBvZiBfX3Byb3RvX18gaWYgJ19fcHJvdG9fXycgaXMgbm90IGFuIG93biBwcm9wZXJ0eVxudmFyIGdldFByb3BlcnR5ID0gZnVuY3Rpb24gZ2V0UHJvcGVydHkob2JqLCBuYW1lKSB7XG5cdGlmIChuYW1lID09PSAnX19wcm90b19fJykge1xuXHRcdGlmICghaGFzT3duLmNhbGwob2JqLCBuYW1lKSkge1xuXHRcdFx0cmV0dXJuIHZvaWQgMDtcblx0XHR9IGVsc2UgaWYgKGdPUEQpIHtcblx0XHRcdC8vIEluIGVhcmx5IHZlcnNpb25zIG9mIG5vZGUsIG9ialsnX19wcm90b19fJ10gaXMgYnVnZ3kgd2hlbiBvYmogaGFzXG5cdFx0XHQvLyBfX3Byb3RvX18gYXMgYW4gb3duIHByb3BlcnR5LiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKCkgd29ya3MuXG5cdFx0XHRyZXR1cm4gZ09QRChvYmosIG5hbWUpLnZhbHVlO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBvYmpbbmFtZV07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGV4dGVuZCgpIHtcblx0dmFyIG9wdGlvbnMsIG5hbWUsIHNyYywgY29weSwgY29weUlzQXJyYXksIGNsb25lO1xuXHR2YXIgdGFyZ2V0ID0gYXJndW1lbnRzWzBdO1xuXHR2YXIgaSA9IDE7XG5cdHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuXHR2YXIgZGVlcCA9IGZhbHNlO1xuXG5cdC8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb25cblx0aWYgKHR5cGVvZiB0YXJnZXQgPT09ICdib29sZWFuJykge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWzFdIHx8IHt9O1xuXHRcdC8vIHNraXAgdGhlIGJvb2xlYW4gYW5kIHRoZSB0YXJnZXRcblx0XHRpID0gMjtcblx0fVxuXHRpZiAodGFyZ2V0ID09IG51bGwgfHwgKHR5cGVvZiB0YXJnZXQgIT09ICdvYmplY3QnICYmIHR5cGVvZiB0YXJnZXQgIT09ICdmdW5jdGlvbicpKSB7XG5cdFx0dGFyZ2V0ID0ge307XG5cdH1cblxuXHRmb3IgKDsgaSA8IGxlbmd0aDsgKytpKSB7XG5cdFx0b3B0aW9ucyA9IGFyZ3VtZW50c1tpXTtcblx0XHQvLyBPbmx5IGRlYWwgd2l0aCBub24tbnVsbC91bmRlZmluZWQgdmFsdWVzXG5cdFx0aWYgKG9wdGlvbnMgIT0gbnVsbCkge1xuXHRcdFx0Ly8gRXh0ZW5kIHRoZSBiYXNlIG9iamVjdFxuXHRcdFx0Zm9yIChuYW1lIGluIG9wdGlvbnMpIHtcblx0XHRcdFx0c3JjID0gZ2V0UHJvcGVydHkodGFyZ2V0LCBuYW1lKTtcblx0XHRcdFx0Y29weSA9IGdldFByb3BlcnR5KG9wdGlvbnMsIG5hbWUpO1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3Bcblx0XHRcdFx0aWYgKHRhcmdldCAhPT0gY29weSkge1xuXHRcdFx0XHRcdC8vIFJlY3Vyc2UgaWYgd2UncmUgbWVyZ2luZyBwbGFpbiBvYmplY3RzIG9yIGFycmF5c1xuXHRcdFx0XHRcdGlmIChkZWVwICYmIGNvcHkgJiYgKGlzUGxhaW5PYmplY3QoY29weSkgfHwgKGNvcHlJc0FycmF5ID0gaXNBcnJheShjb3B5KSkpKSB7XG5cdFx0XHRcdFx0XHRpZiAoY29weUlzQXJyYXkpIHtcblx0XHRcdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcblx0XHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgaXNBcnJheShzcmMpID8gc3JjIDogW107XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBpc1BsYWluT2JqZWN0KHNyYykgPyBzcmMgOiB7fTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gTmV2ZXIgbW92ZSBvcmlnaW5hbCBvYmplY3RzLCBjbG9uZSB0aGVtXG5cdFx0XHRcdFx0XHRzZXRQcm9wZXJ0eSh0YXJnZXQsIHsgbmFtZTogbmFtZSwgbmV3VmFsdWU6IGV4dGVuZChkZWVwLCBjbG9uZSwgY29weSkgfSk7XG5cblx0XHRcdFx0XHQvLyBEb24ndCBicmluZyBpbiB1bmRlZmluZWQgdmFsdWVzXG5cdFx0XHRcdFx0fSBlbHNlIGlmICh0eXBlb2YgY29weSAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0XHRcdHNldFByb3BlcnR5KHRhcmdldCwgeyBuYW1lOiBuYW1lLCBuZXdWYWx1ZTogY29weSB9KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdFxuXHRyZXR1cm4gdGFyZ2V0O1xufTtcbiIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJhaWxcblxuZnVuY3Rpb24gYmFpbChlcnIpIHtcbiAgaWYgKGVycikge1xuICAgIHRocm93IGVyclxuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBWTWVzc2FnZSA9IHJlcXVpcmUoJ3ZmaWxlLW1lc3NhZ2UnKTtcbnZhciBWRmlsZSA9IHJlcXVpcmUoJy4vY29yZS5qcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFZGaWxlO1xuXG52YXIgcHJvdG8gPSBWRmlsZS5wcm90b3R5cGU7XG5cbnByb3RvLm1lc3NhZ2UgPSBtZXNzYWdlO1xucHJvdG8uaW5mbyA9IGluZm87XG5wcm90by5mYWlsID0gZmFpbDtcblxuLyogU2xpZ2h0IGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LiAgUmVtb3ZlIGluIHRoZSBmdXR1cmUuICovXG5wcm90by53YXJuID0gbWVzc2FnZTtcblxuLyogQ3JlYXRlIGEgbWVzc2FnZSB3aXRoIGByZWFzb25gIGF0IGBwb3NpdGlvbmAuXG4gKiBXaGVuIGFuIGVycm9yIGlzIHBhc3NlZCBpbiBhcyBgcmVhc29uYCwgY29waWVzIHRoZSBzdGFjay4gKi9cbmZ1bmN0aW9uIG1lc3NhZ2UocmVhc29uLCBwb3NpdGlvbiwgb3JpZ2luKSB7XG4gIHZhciBmaWxlUGF0aCA9IHRoaXMucGF0aDtcbiAgdmFyIG1lc3NhZ2UgPSBuZXcgVk1lc3NhZ2UocmVhc29uLCBwb3NpdGlvbiwgb3JpZ2luKTtcblxuICBpZiAoZmlsZVBhdGgpIHtcbiAgICBtZXNzYWdlLm5hbWUgPSBmaWxlUGF0aCArICc6JyArIG1lc3NhZ2UubmFtZTtcbiAgICBtZXNzYWdlLmZpbGUgPSBmaWxlUGF0aDtcbiAgfVxuXG4gIG1lc3NhZ2UuZmF0YWwgPSBmYWxzZTtcblxuICB0aGlzLm1lc3NhZ2VzLnB1c2gobWVzc2FnZSk7XG5cbiAgcmV0dXJuIG1lc3NhZ2U7XG59XG5cbi8qIEZhaWwuIENyZWF0ZXMgYSB2bWVzc2FnZSwgYXNzb2NpYXRlcyBpdCB3aXRoIHRoZSBmaWxlLFxuICogYW5kIHRocm93cyBpdC4gKi9cbmZ1bmN0aW9uIGZhaWwoKSB7XG4gIHZhciBtZXNzYWdlID0gdGhpcy5tZXNzYWdlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgbWVzc2FnZS5mYXRhbCA9IHRydWU7XG5cbiAgdGhyb3cgbWVzc2FnZTtcbn1cblxuLyogSW5mby4gQ3JlYXRlcyBhIHZtZXNzYWdlLCBhc3NvY2lhdGVzIGl0IHdpdGggdGhlIGZpbGUsXG4gKiBhbmQgbWFya3MgdGhlIGZhdGFsaXR5IGFzIG51bGwuICovXG5mdW5jdGlvbiBpbmZvKCkge1xuICB2YXIgbWVzc2FnZSA9IHRoaXMubWVzc2FnZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG4gIG1lc3NhZ2UuZmF0YWwgPSBudWxsO1xuXG4gIHJldHVybiBtZXNzYWdlO1xufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbnZhciBzdHJpbmdpZnkgPSByZXF1aXJlKCd1bmlzdC11dGlsLXN0cmluZ2lmeS1wb3NpdGlvbicpXG5cbm1vZHVsZS5leHBvcnRzID0gVk1lc3NhZ2VcblxuLy8gSW5oZXJpdCBmcm9tIGBFcnJvciNgLlxuZnVuY3Rpb24gVk1lc3NhZ2VQcm90b3R5cGUoKSB7fVxuVk1lc3NhZ2VQcm90b3R5cGUucHJvdG90eXBlID0gRXJyb3IucHJvdG90eXBlXG5WTWVzc2FnZS5wcm90b3R5cGUgPSBuZXcgVk1lc3NhZ2VQcm90b3R5cGUoKVxuXG4vLyBNZXNzYWdlIHByb3BlcnRpZXMuXG52YXIgcHJvdG8gPSBWTWVzc2FnZS5wcm90b3R5cGVcblxucHJvdG8uZmlsZSA9ICcnXG5wcm90by5uYW1lID0gJydcbnByb3RvLnJlYXNvbiA9ICcnXG5wcm90by5tZXNzYWdlID0gJydcbnByb3RvLnN0YWNrID0gJydcbnByb3RvLmZhdGFsID0gbnVsbFxucHJvdG8uY29sdW1uID0gbnVsbFxucHJvdG8ubGluZSA9IG51bGxcblxuLy8gQ29uc3RydWN0IGEgbmV3IFZNZXNzYWdlLlxuLy9cbi8vIE5vdGU6IFdlIGNhbm5vdCBpbnZva2UgYEVycm9yYCBvbiB0aGUgY3JlYXRlZCBjb250ZXh0LCBhcyB0aGF0IGFkZHMgcmVhZG9ubHlcbi8vIGBsaW5lYCBhbmQgYGNvbHVtbmAgYXR0cmlidXRlcyBvbiBTYWZhcmkgOSwgdGh1cyB0aHJvd2luZyBhbmQgZmFpbGluZyB0aGVcbi8vIGRhdGEuXG5mdW5jdGlvbiBWTWVzc2FnZShyZWFzb24sIHBvc2l0aW9uLCBvcmlnaW4pIHtcbiAgdmFyIHBhcnRzXG4gIHZhciByYW5nZVxuICB2YXIgbG9jYXRpb25cblxuICBpZiAodHlwZW9mIHBvc2l0aW9uID09PSAnc3RyaW5nJykge1xuICAgIG9yaWdpbiA9IHBvc2l0aW9uXG4gICAgcG9zaXRpb24gPSBudWxsXG4gIH1cblxuICBwYXJ0cyA9IHBhcnNlT3JpZ2luKG9yaWdpbilcbiAgcmFuZ2UgPSBzdHJpbmdpZnkocG9zaXRpb24pIHx8ICcxOjEnXG5cbiAgbG9jYXRpb24gPSB7XG4gICAgc3RhcnQ6IHtsaW5lOiBudWxsLCBjb2x1bW46IG51bGx9LFxuICAgIGVuZDoge2xpbmU6IG51bGwsIGNvbHVtbjogbnVsbH1cbiAgfVxuXG4gIC8vIE5vZGUuXG4gIGlmIChwb3NpdGlvbiAmJiBwb3NpdGlvbi5wb3NpdGlvbikge1xuICAgIHBvc2l0aW9uID0gcG9zaXRpb24ucG9zaXRpb25cbiAgfVxuXG4gIGlmIChwb3NpdGlvbikge1xuICAgIC8vIFBvc2l0aW9uLlxuICAgIGlmIChwb3NpdGlvbi5zdGFydCkge1xuICAgICAgbG9jYXRpb24gPSBwb3NpdGlvblxuICAgICAgcG9zaXRpb24gPSBwb3NpdGlvbi5zdGFydFxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBQb2ludC5cbiAgICAgIGxvY2F0aW9uLnN0YXJ0ID0gcG9zaXRpb25cbiAgICB9XG4gIH1cblxuICBpZiAocmVhc29uLnN0YWNrKSB7XG4gICAgdGhpcy5zdGFjayA9IHJlYXNvbi5zdGFja1xuICAgIHJlYXNvbiA9IHJlYXNvbi5tZXNzYWdlXG4gIH1cblxuICB0aGlzLm1lc3NhZ2UgPSByZWFzb25cbiAgdGhpcy5uYW1lID0gcmFuZ2VcbiAgdGhpcy5yZWFzb24gPSByZWFzb25cbiAgdGhpcy5saW5lID0gcG9zaXRpb24gPyBwb3NpdGlvbi5saW5lIDogbnVsbFxuICB0aGlzLmNvbHVtbiA9IHBvc2l0aW9uID8gcG9zaXRpb24uY29sdW1uIDogbnVsbFxuICB0aGlzLmxvY2F0aW9uID0gbG9jYXRpb25cbiAgdGhpcy5zb3VyY2UgPSBwYXJ0c1swXVxuICB0aGlzLnJ1bGVJZCA9IHBhcnRzWzFdXG59XG5cbmZ1bmN0aW9uIHBhcnNlT3JpZ2luKG9yaWdpbikge1xuICB2YXIgcmVzdWx0ID0gW251bGwsIG51bGxdXG4gIHZhciBpbmRleFxuXG4gIGlmICh0eXBlb2Ygb3JpZ2luID09PSAnc3RyaW5nJykge1xuICAgIGluZGV4ID0gb3JpZ2luLmluZGV4T2YoJzonKVxuXG4gICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgcmVzdWx0WzFdID0gb3JpZ2luXG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFswXSA9IG9yaWdpbi5zbGljZSgwLCBpbmRleClcbiAgICAgIHJlc3VsdFsxXSA9IG9yaWdpbi5zbGljZShpbmRleCArIDEpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdFxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbnZhciBvd24gPSB7fS5oYXNPd25Qcm9wZXJ0eVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0cmluZ2lmeVxuXG5mdW5jdGlvbiBzdHJpbmdpZnkodmFsdWUpIHtcbiAgLyogTm90aGluZy4gKi9cbiAgaWYgKCF2YWx1ZSB8fCB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIC8qIE5vZGUuICovXG4gIGlmIChvd24uY2FsbCh2YWx1ZSwgJ3Bvc2l0aW9uJykgfHwgb3duLmNhbGwodmFsdWUsICd0eXBlJykpIHtcbiAgICByZXR1cm4gcG9zaXRpb24odmFsdWUucG9zaXRpb24pXG4gIH1cblxuICAvKiBQb3NpdGlvbi4gKi9cbiAgaWYgKG93bi5jYWxsKHZhbHVlLCAnc3RhcnQnKSB8fCBvd24uY2FsbCh2YWx1ZSwgJ2VuZCcpKSB7XG4gICAgcmV0dXJuIHBvc2l0aW9uKHZhbHVlKVxuICB9XG5cbiAgLyogUG9pbnQuICovXG4gIGlmIChvd24uY2FsbCh2YWx1ZSwgJ2xpbmUnKSB8fCBvd24uY2FsbCh2YWx1ZSwgJ2NvbHVtbicpKSB7XG4gICAgcmV0dXJuIHBvaW50KHZhbHVlKVxuICB9XG5cbiAgLyogPyAqL1xuICByZXR1cm4gbnVsbFxufVxuXG5mdW5jdGlvbiBwb2ludChwb2ludCkge1xuICBpZiAoIXBvaW50IHx8IHR5cGVvZiBwb2ludCAhPT0gJ29iamVjdCcpIHtcbiAgICBwb2ludCA9IHt9XG4gIH1cblxuICByZXR1cm4gaW5kZXgocG9pbnQubGluZSkgKyAnOicgKyBpbmRleChwb2ludC5jb2x1bW4pXG59XG5cbmZ1bmN0aW9uIHBvc2l0aW9uKHBvcykge1xuICBpZiAoIXBvcyB8fCB0eXBlb2YgcG9zICE9PSAnb2JqZWN0Jykge1xuICAgIHBvcyA9IHt9XG4gIH1cblxuICByZXR1cm4gcG9pbnQocG9zLnN0YXJ0KSArICctJyArIHBvaW50KHBvcy5lbmQpXG59XG5cbmZ1bmN0aW9uIGluZGV4KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInID8gdmFsdWUgOiAxXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xudmFyIHJlcGxhY2UgPSByZXF1aXJlKCdyZXBsYWNlLWV4dCcpO1xudmFyIGJ1ZmZlciA9IHJlcXVpcmUoJ2lzLWJ1ZmZlcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFZGaWxlO1xuXG52YXIgb3duID0ge30uaGFzT3duUHJvcGVydHk7XG52YXIgcHJvdG8gPSBWRmlsZS5wcm90b3R5cGU7XG5cbnByb3RvLnRvU3RyaW5nID0gdG9TdHJpbmc7XG5cbi8qIE9yZGVyIG9mIHNldHRpbmcgKGxlYXN0IHNwZWNpZmljIHRvIG1vc3QpLCB3ZSBuZWVkIHRoaXMgYmVjYXVzZVxuICogb3RoZXJ3aXNlIGB7c3RlbTogJ2EnLCBwYXRoOiAnfi9iLmpzJ31gIHdvdWxkIHRocm93LCBhcyBhIHBhdGhcbiAqIGlzIG5lZWRlZCBiZWZvcmUgYSBzdGVtIGNhbiBiZSBzZXQuICovXG52YXIgb3JkZXIgPSBbXG4gICdoaXN0b3J5JyxcbiAgJ3BhdGgnLFxuICAnYmFzZW5hbWUnLFxuICAnc3RlbScsXG4gICdleHRuYW1lJyxcbiAgJ2Rpcm5hbWUnXG5dO1xuXG4vKiBDb25zdHJ1Y3QgYSBuZXcgZmlsZS4gKi9cbmZ1bmN0aW9uIFZGaWxlKG9wdGlvbnMpIHtcbiAgdmFyIHByb3A7XG4gIHZhciBpbmRleDtcbiAgdmFyIGxlbmd0aDtcblxuICBpZiAoIW9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0ge307XG4gIH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnIHx8IGJ1ZmZlcihvcHRpb25zKSkge1xuICAgIG9wdGlvbnMgPSB7Y29udGVudHM6IG9wdGlvbnN9O1xuICB9IGVsc2UgaWYgKCdtZXNzYWdlJyBpbiBvcHRpb25zICYmICdtZXNzYWdlcycgaW4gb3B0aW9ucykge1xuICAgIHJldHVybiBvcHRpb25zO1xuICB9XG5cbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFZGaWxlKSkge1xuICAgIHJldHVybiBuZXcgVkZpbGUob3B0aW9ucyk7XG4gIH1cblxuICB0aGlzLmRhdGEgPSB7fTtcbiAgdGhpcy5tZXNzYWdlcyA9IFtdO1xuICB0aGlzLmhpc3RvcnkgPSBbXTtcbiAgdGhpcy5jd2QgPSBwcm9jZXNzLmN3ZCgpO1xuXG4gIC8qIFNldCBwYXRoIHJlbGF0ZWQgcHJvcGVydGllcyBpbiB0aGUgY29ycmVjdCBvcmRlci4gKi9cbiAgaW5kZXggPSAtMTtcbiAgbGVuZ3RoID0gb3JkZXIubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgcHJvcCA9IG9yZGVyW2luZGV4XTtcblxuICAgIGlmIChvd24uY2FsbChvcHRpb25zLCBwcm9wKSkge1xuICAgICAgdGhpc1twcm9wXSA9IG9wdGlvbnNbcHJvcF07XG4gICAgfVxuICB9XG5cbiAgLyogU2V0IG5vbi1wYXRoIHJlbGF0ZWQgcHJvcGVydGllcy4gKi9cbiAgZm9yIChwcm9wIGluIG9wdGlvbnMpIHtcbiAgICBpZiAob3JkZXIuaW5kZXhPZihwcm9wKSA9PT0gLTEpIHtcbiAgICAgIHRoaXNbcHJvcF0gPSBvcHRpb25zW3Byb3BdO1xuICAgIH1cbiAgfVxufVxuXG4vKiBBY2Nlc3MgZnVsbCBwYXRoIChgfi9pbmRleC5taW4uanNgKS4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm90bywgJ3BhdGgnLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmhpc3RvcnlbdGhpcy5oaXN0b3J5Lmxlbmd0aCAtIDFdO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uIChwYXRoKSB7XG4gICAgYXNzZXJ0Tm9uRW1wdHkocGF0aCwgJ3BhdGgnKTtcblxuICAgIGlmIChwYXRoICE9PSB0aGlzLnBhdGgpIHtcbiAgICAgIHRoaXMuaGlzdG9yeS5wdXNoKHBhdGgpO1xuICAgIH1cbiAgfVxufSk7XG5cbi8qIEFjY2VzcyBwYXJlbnQgcGF0aCAoYH5gKS4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm90bywgJ2Rpcm5hbWUnLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0eXBlb2YgdGhpcy5wYXRoID09PSAnc3RyaW5nJyA/IHBhdGguZGlybmFtZSh0aGlzLnBhdGgpIDogdW5kZWZpbmVkO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uIChkaXJuYW1lKSB7XG4gICAgYXNzZXJ0UGF0aCh0aGlzLnBhdGgsICdkaXJuYW1lJyk7XG4gICAgdGhpcy5wYXRoID0gcGF0aC5qb2luKGRpcm5hbWUgfHwgJycsIHRoaXMuYmFzZW5hbWUpO1xuICB9XG59KTtcblxuLyogQWNjZXNzIGJhc2VuYW1lIChgaW5kZXgubWluLmpzYCkuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkocHJvdG8sICdiYXNlbmFtZScsIHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGlzLnBhdGggPT09ICdzdHJpbmcnID8gcGF0aC5iYXNlbmFtZSh0aGlzLnBhdGgpIDogdW5kZWZpbmVkO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uIChiYXNlbmFtZSkge1xuICAgIGFzc2VydE5vbkVtcHR5KGJhc2VuYW1lLCAnYmFzZW5hbWUnKTtcbiAgICBhc3NlcnRQYXJ0KGJhc2VuYW1lLCAnYmFzZW5hbWUnKTtcbiAgICB0aGlzLnBhdGggPSBwYXRoLmpvaW4odGhpcy5kaXJuYW1lIHx8ICcnLCBiYXNlbmFtZSk7XG4gIH1cbn0pO1xuXG4vKiBBY2Nlc3MgZXh0bmFtZSAoYC5qc2ApLiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvLCAnZXh0bmFtZScsIHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGlzLnBhdGggPT09ICdzdHJpbmcnID8gcGF0aC5leHRuYW1lKHRoaXMucGF0aCkgOiB1bmRlZmluZWQ7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKGV4dG5hbWUpIHtcbiAgICB2YXIgZXh0ID0gZXh0bmFtZSB8fCAnJztcblxuICAgIGFzc2VydFBhcnQoZXh0LCAnZXh0bmFtZScpO1xuICAgIGFzc2VydFBhdGgodGhpcy5wYXRoLCAnZXh0bmFtZScpO1xuXG4gICAgaWYgKGV4dCkge1xuICAgICAgaWYgKGV4dC5jaGFyQXQoMCkgIT09ICcuJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2BleHRuYW1lYCBtdXN0IHN0YXJ0IHdpdGggYC5gJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChleHQuaW5kZXhPZignLicsIDEpICE9PSAtMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2BleHRuYW1lYCBjYW5ub3QgY29udGFpbiBtdWx0aXBsZSBkb3RzJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5wYXRoID0gcmVwbGFjZSh0aGlzLnBhdGgsIGV4dCk7XG4gIH1cbn0pO1xuXG4vKiBBY2Nlc3Mgc3RlbSAoYGluZGV4Lm1pbmApLiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvLCAnc3RlbScsIHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGlzLnBhdGggPT09ICdzdHJpbmcnID8gcGF0aC5iYXNlbmFtZSh0aGlzLnBhdGgsIHRoaXMuZXh0bmFtZSkgOiB1bmRlZmluZWQ7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKHN0ZW0pIHtcbiAgICBhc3NlcnROb25FbXB0eShzdGVtLCAnc3RlbScpO1xuICAgIGFzc2VydFBhcnQoc3RlbSwgJ3N0ZW0nKTtcbiAgICB0aGlzLnBhdGggPSBwYXRoLmpvaW4odGhpcy5kaXJuYW1lIHx8ICcnLCBzdGVtICsgKHRoaXMuZXh0bmFtZSB8fCAnJykpO1xuICB9XG59KTtcblxuLyogR2V0IHRoZSB2YWx1ZSBvZiB0aGUgZmlsZS4gKi9cbmZ1bmN0aW9uIHRvU3RyaW5nKGVuY29kaW5nKSB7XG4gIHZhciB2YWx1ZSA9IHRoaXMuY29udGVudHMgfHwgJyc7XG4gIHJldHVybiBidWZmZXIodmFsdWUpID8gdmFsdWUudG9TdHJpbmcoZW5jb2RpbmcpIDogU3RyaW5nKHZhbHVlKTtcbn1cblxuLyogQXNzZXJ0IHRoYXQgYHBhcnRgIGlzIG5vdCBhIHBhdGggKGkuZS4sIGRvZXNcbiAqIG5vdCBjb250YWluIGBwYXRoLnNlcGApLiAqL1xuZnVuY3Rpb24gYXNzZXJ0UGFydChwYXJ0LCBuYW1lKSB7XG4gIGlmIChwYXJ0LmluZGV4T2YocGF0aC5zZXApICE9PSAtMSkge1xuICAgIHRocm93IG5ldyBFcnJvcignYCcgKyBuYW1lICsgJ2AgY2Fubm90IGJlIGEgcGF0aDogZGlkIG5vdCBleHBlY3QgYCcgKyBwYXRoLnNlcCArICdgJyk7XG4gIH1cbn1cblxuLyogQXNzZXJ0IHRoYXQgYHBhcnRgIGlzIG5vdCBlbXB0eS4gKi9cbmZ1bmN0aW9uIGFzc2VydE5vbkVtcHR5KHBhcnQsIG5hbWUpIHtcbiAgaWYgKCFwYXJ0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdgJyArIG5hbWUgKyAnYCBjYW5ub3QgYmUgZW1wdHknKTtcbiAgfVxufVxuXG4vKiBBc3NlcnQgYHBhdGhgIGV4aXN0cy4gKi9cbmZ1bmN0aW9uIGFzc2VydFBhdGgocGF0aCwgbmFtZSkge1xuICBpZiAoIXBhdGgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1NldHRpbmcgYCcgKyBuYW1lICsgJ2AgcmVxdWlyZXMgYHBhdGhgIHRvIGJlIHNldCB0b28nKTtcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcblxuZnVuY3Rpb24gcmVwbGFjZUV4dChucGF0aCwgZXh0KSB7XG4gIGlmICh0eXBlb2YgbnBhdGggIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIG5wYXRoO1xuICB9XG5cbiAgaWYgKG5wYXRoLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBucGF0aDtcbiAgfVxuXG4gIHZhciBuRmlsZU5hbWUgPSBwYXRoLmJhc2VuYW1lKG5wYXRoLCBwYXRoLmV4dG5hbWUobnBhdGgpKSArIGV4dDtcbiAgcmV0dXJuIHBhdGguam9pbihwYXRoLmRpcm5hbWUobnBhdGgpLCBuRmlsZU5hbWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcGxhY2VFeHQ7XG4iLCIndXNlIHN0cmljdCdcblxudmFyIHdyYXAgPSByZXF1aXJlKCcuL3dyYXAuanMnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRyb3VnaFxuXG50cm91Z2gud3JhcCA9IHdyYXBcblxudmFyIHNsaWNlID0gW10uc2xpY2VcblxuLy8gQ3JlYXRlIG5ldyBtaWRkbGV3YXJlLlxuZnVuY3Rpb24gdHJvdWdoKCkge1xuICB2YXIgZm5zID0gW11cbiAgdmFyIG1pZGRsZXdhcmUgPSB7fVxuXG4gIG1pZGRsZXdhcmUucnVuID0gcnVuXG4gIG1pZGRsZXdhcmUudXNlID0gdXNlXG5cbiAgcmV0dXJuIG1pZGRsZXdhcmVcblxuICAvLyBSdW4gYGZuc2AuICBMYXN0IGFyZ3VtZW50IG11c3QgYmUgYSBjb21wbGV0aW9uIGhhbmRsZXIuXG4gIGZ1bmN0aW9uIHJ1bigpIHtcbiAgICB2YXIgaW5kZXggPSAtMVxuICAgIHZhciBpbnB1dCA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAwLCAtMSlcbiAgICB2YXIgZG9uZSA9IGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoIC0gMV1cblxuICAgIGlmICh0eXBlb2YgZG9uZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBmdW5jdGlvbiBhcyBsYXN0IGFyZ3VtZW50LCBub3QgJyArIGRvbmUpXG4gICAgfVxuXG4gICAgbmV4dC5hcHBseShudWxsLCBbbnVsbF0uY29uY2F0KGlucHV0KSlcblxuICAgIC8vIFJ1biB0aGUgbmV4dCBgZm5gLCBpZiBhbnkuXG4gICAgZnVuY3Rpb24gbmV4dChlcnIpIHtcbiAgICAgIHZhciBmbiA9IGZuc1srK2luZGV4XVxuICAgICAgdmFyIHBhcmFtcyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKVxuICAgICAgdmFyIHZhbHVlcyA9IHBhcmFtcy5zbGljZSgxKVxuICAgICAgdmFyIGxlbmd0aCA9IGlucHV0Lmxlbmd0aFxuICAgICAgdmFyIHBvcyA9IC0xXG5cbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgZG9uZShlcnIpXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICAvLyBDb3B5IG5vbi1udWxseSBpbnB1dCBpbnRvIHZhbHVlcy5cbiAgICAgIHdoaWxlICgrK3BvcyA8IGxlbmd0aCkge1xuICAgICAgICBpZiAodmFsdWVzW3Bvc10gPT09IG51bGwgfHwgdmFsdWVzW3Bvc10gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHZhbHVlc1twb3NdID0gaW5wdXRbcG9zXVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlucHV0ID0gdmFsdWVzXG5cbiAgICAgIC8vIE5leHQgb3IgZG9uZS5cbiAgICAgIGlmIChmbikge1xuICAgICAgICB3cmFwKGZuLCBuZXh0KS5hcHBseShudWxsLCBpbnB1dClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRvbmUuYXBwbHkobnVsbCwgW251bGxdLmNvbmNhdChpbnB1dCkpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gQWRkIGBmbmAgdG8gdGhlIGxpc3QuXG4gIGZ1bmN0aW9uIHVzZShmbikge1xuICAgIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgYGZuYCB0byBiZSBhIGZ1bmN0aW9uLCBub3QgJyArIGZuKVxuICAgIH1cblxuICAgIGZucy5wdXNoKGZuKVxuXG4gICAgcmV0dXJuIG1pZGRsZXdhcmVcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbnZhciBzbGljZSA9IFtdLnNsaWNlXG5cbm1vZHVsZS5leHBvcnRzID0gd3JhcFxuXG4vLyBXcmFwIGBmbmAuXG4vLyBDYW4gYmUgc3luYyBvciBhc3luYzsgcmV0dXJuIGEgcHJvbWlzZSwgcmVjZWl2ZSBhIGNvbXBsZXRpb24gaGFuZGxlciwgcmV0dXJuXG4vLyBuZXcgdmFsdWVzIGFuZCBlcnJvcnMuXG5mdW5jdGlvbiB3cmFwKGZuLCBjYWxsYmFjaykge1xuICB2YXIgaW52b2tlZFxuXG4gIHJldHVybiB3cmFwcGVkXG5cbiAgZnVuY3Rpb24gd3JhcHBlZCgpIHtcbiAgICB2YXIgcGFyYW1zID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDApXG4gICAgdmFyIGNhbGxiYWNrID0gZm4ubGVuZ3RoID4gcGFyYW1zLmxlbmd0aFxuICAgIHZhciByZXN1bHRcblxuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgcGFyYW1zLnB1c2goZG9uZSlcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gZm4uYXBwbHkobnVsbCwgcGFyYW1zKVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAvLyBXZWxsLCB0aGlzIGlzIHF1aXRlIHRoZSBwaWNrbGUuXG4gICAgICAvLyBgZm5gIHJlY2VpdmVkIGEgY2FsbGJhY2sgYW5kIGludm9rZWQgaXQgKHRodXMgY29udGludWluZyB0aGUgcGlwZWxpbmUpLFxuICAgICAgLy8gYnV0IGxhdGVyIGFsc28gdGhyZXcgYW4gZXJyb3IuXG4gICAgICAvLyBXZeKAmXJlIG5vdCBhYm91dCB0byByZXN0YXJ0IHRoZSBwaXBlbGluZSBhZ2Fpbiwgc28gdGhlIG9ubHkgdGhpbmcgbGVmdFxuICAgICAgLy8gdG8gZG8gaXMgdG8gdGhyb3cgdGhlIHRoaW5nIGluc3RlYWQuXG4gICAgICBpZiAoY2FsbGJhY2sgJiYgaW52b2tlZCkge1xuICAgICAgICB0aHJvdyBlcnJvclxuICAgICAgfVxuXG4gICAgICByZXR1cm4gZG9uZShlcnJvcilcbiAgICB9XG5cbiAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICBpZiAocmVzdWx0ICYmIHR5cGVvZiByZXN1bHQudGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXN1bHQudGhlbih0aGVuLCBkb25lKVxuICAgICAgfSBlbHNlIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICBkb25lKHJlc3VsdClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoZW4ocmVzdWx0KVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIEludm9rZSBgbmV4dGAsIG9ubHkgb25jZS5cbiAgZnVuY3Rpb24gZG9uZSgpIHtcbiAgICBpZiAoIWludm9rZWQpIHtcbiAgICAgIGludm9rZWQgPSB0cnVlXG5cbiAgICAgIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFyZ3VtZW50cylcbiAgICB9XG4gIH1cblxuICAvLyBJbnZva2UgYGRvbmVgIHdpdGggb25lIHZhbHVlLlxuICAvLyBUcmFja3MgaWYgYW4gZXJyb3IgaXMgcGFzc2VkLCB0b28uXG4gIGZ1bmN0aW9uIHRoZW4odmFsdWUpIHtcbiAgICBkb25lKG51bGwsIHZhbHVlKVxuICB9XG59XG4iLCJ2YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nXG5cbm1vZHVsZS5leHBvcnRzID0gaXNTdHJpbmdcblxuZnVuY3Rpb24gaXNTdHJpbmcob2JqKSB7XG4gICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwob2JqKSA9PT0gXCJbb2JqZWN0IFN0cmluZ11cIlxufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoeCkge1xuXHR2YXIgcHJvdG90eXBlO1xuXHRyZXR1cm4gdG9TdHJpbmcuY2FsbCh4KSA9PT0gJ1tvYmplY3QgT2JqZWN0XScgJiYgKHByb3RvdHlwZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih4KSwgcHJvdG90eXBlID09PSBudWxsIHx8IHByb3RvdHlwZSA9PT0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHt9KSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdW5oZXJpdCA9IHJlcXVpcmUoJ3VuaGVyaXQnKTtcbnZhciB4dGVuZCA9IHJlcXVpcmUoJ3h0ZW5kJyk7XG52YXIgUGFyc2VyID0gcmVxdWlyZSgnLi9saWIvcGFyc2VyLmpzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcGFyc2U7XG5wYXJzZS5QYXJzZXIgPSBQYXJzZXI7XG5cbmZ1bmN0aW9uIHBhcnNlKG9wdGlvbnMpIHtcbiAgdmFyIExvY2FsID0gdW5oZXJpdChQYXJzZXIpO1xuICBMb2NhbC5wcm90b3R5cGUub3B0aW9ucyA9IHh0ZW5kKExvY2FsLnByb3RvdHlwZS5vcHRpb25zLCB0aGlzLmRhdGEoJ3NldHRpbmdzJyksIG9wdGlvbnMpO1xuICB0aGlzLlBhcnNlciA9IExvY2FsO1xufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbnZhciB4dGVuZCA9IHJlcXVpcmUoJ3h0ZW5kJylcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcblxubW9kdWxlLmV4cG9ydHMgPSB1bmhlcml0XG5cbi8vIENyZWF0ZSBhIGN1c3RvbSBjb25zdHJ1Y3RvciB3aGljaCBjYW4gYmUgbW9kaWZpZWQgd2l0aG91dCBhZmZlY3RpbmcgdGhlXG4vLyBvcmlnaW5hbCBjbGFzcy5cbmZ1bmN0aW9uIHVuaGVyaXQoU3VwZXIpIHtcbiAgdmFyIHJlc3VsdFxuICB2YXIga2V5XG4gIHZhciB2YWx1ZVxuXG4gIGluaGVyaXRzKE9mLCBTdXBlcilcbiAgaW5oZXJpdHMoRnJvbSwgT2YpXG5cbiAgLy8gQ2xvbmUgdmFsdWVzLlxuICByZXN1bHQgPSBPZi5wcm90b3R5cGVcblxuICBmb3IgKGtleSBpbiByZXN1bHQpIHtcbiAgICB2YWx1ZSA9IHJlc3VsdFtrZXldXG5cbiAgICBpZiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgcmVzdWx0W2tleV0gPSAnY29uY2F0JyBpbiB2YWx1ZSA/IHZhbHVlLmNvbmNhdCgpIDogeHRlbmQodmFsdWUpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIE9mXG5cbiAgLy8gQ29uc3RydWN0b3IgYWNjZXB0aW5nIGEgc2luZ2xlIGFyZ3VtZW50LCB3aGljaCBpdHNlbGYgaXMgYW4gYGFyZ3VtZW50c2BcbiAgLy8gb2JqZWN0LlxuICBmdW5jdGlvbiBGcm9tKHBhcmFtZXRlcnMpIHtcbiAgICByZXR1cm4gU3VwZXIuYXBwbHkodGhpcywgcGFyYW1ldGVycylcbiAgfVxuXG4gIC8vIENvbnN0cnVjdG9yIGFjY2VwdGluZyB2YXJpYWRpYyBhcmd1bWVudHMuXG4gIGZ1bmN0aW9uIE9mKCkge1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBPZikpIHtcbiAgICAgIHJldHVybiBuZXcgRnJvbShhcmd1bWVudHMpXG4gICAgfVxuXG4gICAgcmV0dXJuIFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgeHRlbmQgPSByZXF1aXJlKCd4dGVuZCcpO1xudmFyIHRvZ2dsZSA9IHJlcXVpcmUoJ3N0YXRlLXRvZ2dsZScpO1xudmFyIHZmaWxlTG9jYXRpb24gPSByZXF1aXJlKCd2ZmlsZS1sb2NhdGlvbicpO1xudmFyIHVuZXNjYXBlID0gcmVxdWlyZSgnLi91bmVzY2FwZScpO1xudmFyIGRlY29kZSA9IHJlcXVpcmUoJy4vZGVjb2RlJyk7XG52YXIgdG9rZW5pemVyID0gcmVxdWlyZSgnLi90b2tlbml6ZXInKTtcblxubW9kdWxlLmV4cG9ydHMgPSBQYXJzZXI7XG5cbmZ1bmN0aW9uIFBhcnNlcihkb2MsIGZpbGUpIHtcbiAgdGhpcy5maWxlID0gZmlsZTtcbiAgdGhpcy5vZmZzZXQgPSB7fTtcbiAgdGhpcy5vcHRpb25zID0geHRlbmQodGhpcy5vcHRpb25zKTtcbiAgdGhpcy5zZXRPcHRpb25zKHt9KTtcblxuICB0aGlzLmluTGlzdCA9IGZhbHNlO1xuICB0aGlzLmluQmxvY2sgPSBmYWxzZTtcbiAgdGhpcy5pbkxpbmsgPSBmYWxzZTtcbiAgdGhpcy5hdFN0YXJ0ID0gdHJ1ZTtcblxuICB0aGlzLnRvT2Zmc2V0ID0gdmZpbGVMb2NhdGlvbihmaWxlKS50b09mZnNldDtcbiAgdGhpcy51bmVzY2FwZSA9IHVuZXNjYXBlKHRoaXMsICdlc2NhcGUnKTtcbiAgdGhpcy5kZWNvZGUgPSBkZWNvZGUodGhpcyk7XG59XG5cbnZhciBwcm90byA9IFBhcnNlci5wcm90b3R5cGU7XG5cbi8qIEV4cG9zZSBjb3JlLiAqL1xucHJvdG8uc2V0T3B0aW9ucyA9IHJlcXVpcmUoJy4vc2V0LW9wdGlvbnMnKTtcbnByb3RvLnBhcnNlID0gcmVxdWlyZSgnLi9wYXJzZScpO1xuXG4vKiBFeHBvc2UgYGRlZmF1bHRzYC4gKi9cbnByb3RvLm9wdGlvbnMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbi8qIEVudGVyIGFuZCBleGl0IGhlbHBlcnMuICovXG5wcm90by5leGl0U3RhcnQgPSB0b2dnbGUoJ2F0U3RhcnQnLCB0cnVlKTtcbnByb3RvLmVudGVyTGlzdCA9IHRvZ2dsZSgnaW5MaXN0JywgZmFsc2UpO1xucHJvdG8uZW50ZXJMaW5rID0gdG9nZ2xlKCdpbkxpbmsnLCBmYWxzZSk7XG5wcm90by5lbnRlckJsb2NrID0gdG9nZ2xlKCdpbkJsb2NrJywgZmFsc2UpO1xuXG4vKiBOb2RlcyB0aGF0IGNhbiBpbnRlcnVwdCBhIHBhcmFncmFwaDpcbiAqXG4gKiBgYGBtYXJrZG93blxuICogQSBwYXJhZ3JhcGgsIGZvbGxvd2VkIGJ5IGEgdGhlbWF0aWMgYnJlYWsuXG4gKiBfX19cbiAqIGBgYFxuICpcbiAqIEluIHRoZSBhYm92ZSBleGFtcGxlLCB0aGUgdGhlbWF0aWMgYnJlYWsg4oCcaW50ZXJ1cHRz4oCdXG4gKiB0aGUgcGFyYWdyYXBoLiAqL1xucHJvdG8uaW50ZXJydXB0UGFyYWdyYXBoID0gW1xuICBbJ3RoZW1hdGljQnJlYWsnXSxcbiAgWydhdHhIZWFkaW5nJ10sXG4gIFsnZmVuY2VkQ29kZSddLFxuICBbJ2Jsb2NrcXVvdGUnXSxcbiAgWydodG1sJ10sXG4gIFsnc2V0ZXh0SGVhZGluZycsIHtjb21tb25tYXJrOiBmYWxzZX1dLFxuICBbJ2RlZmluaXRpb24nLCB7Y29tbW9ubWFyazogZmFsc2V9XSxcbiAgWydmb290bm90ZScsIHtjb21tb25tYXJrOiBmYWxzZX1dXG5dO1xuXG4vKiBOb2RlcyB0aGF0IGNhbiBpbnRlcnVwdCBhIGxpc3Q6XG4gKlxuICogYGBgbWFya2Rvd25cbiAqIC0gT25lXG4gKiBfX19cbiAqIGBgYFxuICpcbiAqIEluIHRoZSBhYm92ZSBleGFtcGxlLCB0aGUgdGhlbWF0aWMgYnJlYWsg4oCcaW50ZXJ1cHRz4oCdXG4gKiB0aGUgbGlzdC4gKi9cbnByb3RvLmludGVycnVwdExpc3QgPSBbXG4gIFsnYXR4SGVhZGluZycsIHtwZWRhbnRpYzogZmFsc2V9XSxcbiAgWydmZW5jZWRDb2RlJywge3BlZGFudGljOiBmYWxzZX1dLFxuICBbJ3RoZW1hdGljQnJlYWsnLCB7cGVkYW50aWM6IGZhbHNlfV0sXG4gIFsnZGVmaW5pdGlvbicsIHtjb21tb25tYXJrOiBmYWxzZX1dLFxuICBbJ2Zvb3Rub3RlJywge2NvbW1vbm1hcms6IGZhbHNlfV1cbl07XG5cbi8qIE5vZGVzIHRoYXQgY2FuIGludGVydXB0IGEgYmxvY2txdW90ZTpcbiAqXG4gKiBgYGBtYXJrZG93blxuICogPiBBIHBhcmFncmFwaC5cbiAqIF9fX1xuICogYGBgXG4gKlxuICogSW4gdGhlIGFib3ZlIGV4YW1wbGUsIHRoZSB0aGVtYXRpYyBicmVhayDigJxpbnRlcnVwdHPigJ1cbiAqIHRoZSBibG9ja3F1b3RlLiAqL1xucHJvdG8uaW50ZXJydXB0QmxvY2txdW90ZSA9IFtcbiAgWydpbmRlbnRlZENvZGUnLCB7Y29tbW9ubWFyazogdHJ1ZX1dLFxuICBbJ2ZlbmNlZENvZGUnLCB7Y29tbW9ubWFyazogdHJ1ZX1dLFxuICBbJ2F0eEhlYWRpbmcnLCB7Y29tbW9ubWFyazogdHJ1ZX1dLFxuICBbJ3NldGV4dEhlYWRpbmcnLCB7Y29tbW9ubWFyazogdHJ1ZX1dLFxuICBbJ3RoZW1hdGljQnJlYWsnLCB7Y29tbW9ubWFyazogdHJ1ZX1dLFxuICBbJ2h0bWwnLCB7Y29tbW9ubWFyazogdHJ1ZX1dLFxuICBbJ2xpc3QnLCB7Y29tbW9ubWFyazogdHJ1ZX1dLFxuICBbJ2RlZmluaXRpb24nLCB7Y29tbW9ubWFyazogZmFsc2V9XSxcbiAgWydmb290bm90ZScsIHtjb21tb25tYXJrOiBmYWxzZX1dXG5dO1xuXG4vKiBIYW5kbGVycy4gKi9cbnByb3RvLmJsb2NrVG9rZW5pemVycyA9IHtcbiAgbmV3bGluZTogcmVxdWlyZSgnLi90b2tlbml6ZS9uZXdsaW5lJyksXG4gIGluZGVudGVkQ29kZTogcmVxdWlyZSgnLi90b2tlbml6ZS9jb2RlLWluZGVudGVkJyksXG4gIGZlbmNlZENvZGU6IHJlcXVpcmUoJy4vdG9rZW5pemUvY29kZS1mZW5jZWQnKSxcbiAgYmxvY2txdW90ZTogcmVxdWlyZSgnLi90b2tlbml6ZS9ibG9ja3F1b3RlJyksXG4gIGF0eEhlYWRpbmc6IHJlcXVpcmUoJy4vdG9rZW5pemUvaGVhZGluZy1hdHgnKSxcbiAgdGhlbWF0aWNCcmVhazogcmVxdWlyZSgnLi90b2tlbml6ZS90aGVtYXRpYy1icmVhaycpLFxuICBsaXN0OiByZXF1aXJlKCcuL3Rva2VuaXplL2xpc3QnKSxcbiAgc2V0ZXh0SGVhZGluZzogcmVxdWlyZSgnLi90b2tlbml6ZS9oZWFkaW5nLXNldGV4dCcpLFxuICBodG1sOiByZXF1aXJlKCcuL3Rva2VuaXplL2h0bWwtYmxvY2snKSxcbiAgZm9vdG5vdGU6IHJlcXVpcmUoJy4vdG9rZW5pemUvZm9vdG5vdGUtZGVmaW5pdGlvbicpLFxuICBkZWZpbml0aW9uOiByZXF1aXJlKCcuL3Rva2VuaXplL2RlZmluaXRpb24nKSxcbiAgdGFibGU6IHJlcXVpcmUoJy4vdG9rZW5pemUvdGFibGUnKSxcbiAgcGFyYWdyYXBoOiByZXF1aXJlKCcuL3Rva2VuaXplL3BhcmFncmFwaCcpXG59O1xuXG5wcm90by5pbmxpbmVUb2tlbml6ZXJzID0ge1xuICBlc2NhcGU6IHJlcXVpcmUoJy4vdG9rZW5pemUvZXNjYXBlJyksXG4gIGF1dG9MaW5rOiByZXF1aXJlKCcuL3Rva2VuaXplL2F1dG8tbGluaycpLFxuICB1cmw6IHJlcXVpcmUoJy4vdG9rZW5pemUvdXJsJyksXG4gIGh0bWw6IHJlcXVpcmUoJy4vdG9rZW5pemUvaHRtbC1pbmxpbmUnKSxcbiAgbGluazogcmVxdWlyZSgnLi90b2tlbml6ZS9saW5rJyksXG4gIHJlZmVyZW5jZTogcmVxdWlyZSgnLi90b2tlbml6ZS9yZWZlcmVuY2UnKSxcbiAgc3Ryb25nOiByZXF1aXJlKCcuL3Rva2VuaXplL3N0cm9uZycpLFxuICBlbXBoYXNpczogcmVxdWlyZSgnLi90b2tlbml6ZS9lbXBoYXNpcycpLFxuICBkZWxldGlvbjogcmVxdWlyZSgnLi90b2tlbml6ZS9kZWxldGUnKSxcbiAgY29kZTogcmVxdWlyZSgnLi90b2tlbml6ZS9jb2RlLWlubGluZScpLFxuICBicmVhazogcmVxdWlyZSgnLi90b2tlbml6ZS9icmVhaycpLFxuICB0ZXh0OiByZXF1aXJlKCcuL3Rva2VuaXplL3RleHQnKVxufTtcblxuLyogRXhwb3NlIHByZWNlZGVuY2UuICovXG5wcm90by5ibG9ja01ldGhvZHMgPSBrZXlzKHByb3RvLmJsb2NrVG9rZW5pemVycyk7XG5wcm90by5pbmxpbmVNZXRob2RzID0ga2V5cyhwcm90by5pbmxpbmVUb2tlbml6ZXJzKTtcblxuLyogVG9rZW5pemVycy4gKi9cbnByb3RvLnRva2VuaXplQmxvY2sgPSB0b2tlbml6ZXIoJ2Jsb2NrJyk7XG5wcm90by50b2tlbml6ZUlubGluZSA9IHRva2VuaXplcignaW5saW5lJyk7XG5wcm90by50b2tlbml6ZUZhY3RvcnkgPSB0b2tlbml6ZXI7XG5cbi8qIEdldCBhbGwga2V5cyBpbiBgdmFsdWVgLiAqL1xuZnVuY3Rpb24ga2V5cyh2YWx1ZSkge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBrZXk7XG5cbiAgZm9yIChrZXkgaW4gdmFsdWUpIHtcbiAgICByZXN1bHQucHVzaChrZXkpO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnlcblxuLy8gQ29uc3RydWN0IGEgc3RhdGUgYHRvZ2dsZXJgOiBhIGZ1bmN0aW9uIHdoaWNoIGludmVyc2VzIGBwcm9wZXJ0eWAgaW4gY29udGV4dFxuLy8gYmFzZWQgb24gaXRzIGN1cnJlbnQgdmFsdWUuXG4vLyBUaGUgYnkgYHRvZ2dsZXJgIHJldHVybmVkIGZ1bmN0aW9uIHJlc3RvcmVzIHRoYXQgdmFsdWUuXG5mdW5jdGlvbiBmYWN0b3J5KGtleSwgc3RhdGUsIGN0eCkge1xuICByZXR1cm4gZW50ZXJcblxuICBmdW5jdGlvbiBlbnRlcigpIHtcbiAgICB2YXIgY29udGV4dCA9IGN0eCB8fCB0aGlzXG4gICAgdmFyIGN1cnJlbnQgPSBjb250ZXh0W2tleV1cblxuICAgIGNvbnRleHRba2V5XSA9ICFzdGF0ZVxuXG4gICAgcmV0dXJuIGV4aXRcblxuICAgIGZ1bmN0aW9uIGV4aXQoKSB7XG4gICAgICBjb250ZXh0W2tleV0gPSBjdXJyZW50XG4gICAgfVxuICB9XG59XG4iLCIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5XG5cbmZ1bmN0aW9uIGZhY3RvcnkoZmlsZSkge1xuICB2YXIgY29udGVudHMgPSBpbmRpY2VzKFN0cmluZyhmaWxlKSlcblxuICByZXR1cm4ge1xuICAgIHRvUG9zaXRpb246IG9mZnNldFRvUG9zaXRpb25GYWN0b3J5KGNvbnRlbnRzKSxcbiAgICB0b09mZnNldDogcG9zaXRpb25Ub09mZnNldEZhY3RvcnkoY29udGVudHMpXG4gIH1cbn1cblxuLy8gRmFjdG9yeSB0byBnZXQgdGhlIGxpbmUgYW5kIGNvbHVtbi1iYXNlZCBgcG9zaXRpb25gIGZvciBgb2Zmc2V0YCBpbiB0aGUgYm91bmRcbi8vIGluZGljZXMuXG5mdW5jdGlvbiBvZmZzZXRUb1Bvc2l0aW9uRmFjdG9yeShpbmRpY2VzKSB7XG4gIHJldHVybiBvZmZzZXRUb1Bvc2l0aW9uXG5cbiAgLy8gR2V0IHRoZSBsaW5lIGFuZCBjb2x1bW4tYmFzZWQgYHBvc2l0aW9uYCBmb3IgYG9mZnNldGAgaW4gdGhlIGJvdW5kIGluZGljZXMuXG4gIGZ1bmN0aW9uIG9mZnNldFRvUG9zaXRpb24ob2Zmc2V0KSB7XG4gICAgdmFyIGluZGV4ID0gLTFcbiAgICB2YXIgbGVuZ3RoID0gaW5kaWNlcy5sZW5ndGhcblxuICAgIGlmIChvZmZzZXQgPCAwKSB7XG4gICAgICByZXR1cm4ge31cbiAgICB9XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGluZGljZXNbaW5kZXhdID4gb2Zmc2V0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbGluZTogaW5kZXggKyAxLFxuICAgICAgICAgIGNvbHVtbjogb2Zmc2V0IC0gKGluZGljZXNbaW5kZXggLSAxXSB8fCAwKSArIDEsXG4gICAgICAgICAgb2Zmc2V0OiBvZmZzZXRcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7fVxuICB9XG59XG5cbi8vIEZhY3RvcnkgdG8gZ2V0IHRoZSBgb2Zmc2V0YCBmb3IgYSBsaW5lIGFuZCBjb2x1bW4tYmFzZWQgYHBvc2l0aW9uYCBpbiB0aGVcbi8vIGJvdW5kIGluZGljZXMuXG5mdW5jdGlvbiBwb3NpdGlvblRvT2Zmc2V0RmFjdG9yeShpbmRpY2VzKSB7XG4gIHJldHVybiBwb3NpdGlvblRvT2Zmc2V0XG5cbiAgLy8gR2V0IHRoZSBgb2Zmc2V0YCBmb3IgYSBsaW5lIGFuZCBjb2x1bW4tYmFzZWQgYHBvc2l0aW9uYCBpbiB0aGUgYm91bmRcbiAgLy8gaW5kaWNlcy5cbiAgZnVuY3Rpb24gcG9zaXRpb25Ub09mZnNldChwb3NpdGlvbikge1xuICAgIHZhciBsaW5lID0gcG9zaXRpb24gJiYgcG9zaXRpb24ubGluZVxuICAgIHZhciBjb2x1bW4gPSBwb3NpdGlvbiAmJiBwb3NpdGlvbi5jb2x1bW5cblxuICAgIGlmICghaXNOYU4obGluZSkgJiYgIWlzTmFOKGNvbHVtbikgJiYgbGluZSAtIDEgaW4gaW5kaWNlcykge1xuICAgICAgcmV0dXJuIChpbmRpY2VzW2xpbmUgLSAyXSB8fCAwKSArIGNvbHVtbiAtIDEgfHwgMFxuICAgIH1cblxuICAgIHJldHVybiAtMVxuICB9XG59XG5cbi8vIEdldCBpbmRpY2VzIG9mIGxpbmUtYnJlYWtzIGluIGB2YWx1ZWAuXG5mdW5jdGlvbiBpbmRpY2VzKHZhbHVlKSB7XG4gIHZhciByZXN1bHQgPSBbXVxuICB2YXIgaW5kZXggPSB2YWx1ZS5pbmRleE9mKCdcXG4nKVxuXG4gIHdoaWxlIChpbmRleCAhPT0gLTEpIHtcbiAgICByZXN1bHQucHVzaChpbmRleCArIDEpXG4gICAgaW5kZXggPSB2YWx1ZS5pbmRleE9mKCdcXG4nLCBpbmRleCArIDEpXG4gIH1cblxuICByZXN1bHQucHVzaCh2YWx1ZS5sZW5ndGggKyAxKVxuXG4gIHJldHVybiByZXN1bHRcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5O1xuXG4vKiBGYWN0b3J5IHRvIGRlLWVzY2FwZSBhIHZhbHVlLCBiYXNlZCBvbiBhIGxpc3QgYXQgYGtleWBcbiAqIGluIGBjdHhgLiAqL1xuZnVuY3Rpb24gZmFjdG9yeShjdHgsIGtleSkge1xuICByZXR1cm4gdW5lc2NhcGU7XG5cbiAgLyogRGUtZXNjYXBlIGEgc3RyaW5nIHVzaW5nIHRoZSBleHByZXNzaW9uIGF0IGBrZXlgXG4gICAqIGluIGBjdHhgLiAqL1xuICBmdW5jdGlvbiB1bmVzY2FwZSh2YWx1ZSkge1xuICAgIHZhciBwcmV2ID0gMDtcbiAgICB2YXIgaW5kZXggPSB2YWx1ZS5pbmRleE9mKCdcXFxcJyk7XG4gICAgdmFyIGVzY2FwZSA9IGN0eFtrZXldO1xuICAgIHZhciBxdWV1ZSA9IFtdO1xuICAgIHZhciBjaGFyYWN0ZXI7XG5cbiAgICB3aGlsZSAoaW5kZXggIT09IC0xKSB7XG4gICAgICBxdWV1ZS5wdXNoKHZhbHVlLnNsaWNlKHByZXYsIGluZGV4KSk7XG4gICAgICBwcmV2ID0gaW5kZXggKyAxO1xuICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KHByZXYpO1xuXG4gICAgICAvKiBJZiB0aGUgZm9sbG93aW5nIGNoYXJhY3RlciBpcyBub3QgYSB2YWxpZCBlc2NhcGUsXG4gICAgICAgKiBhZGQgdGhlIHNsYXNoLiAqL1xuICAgICAgaWYgKCFjaGFyYWN0ZXIgfHwgZXNjYXBlLmluZGV4T2YoY2hhcmFjdGVyKSA9PT0gLTEpIHtcbiAgICAgICAgcXVldWUucHVzaCgnXFxcXCcpO1xuICAgICAgfVxuXG4gICAgICBpbmRleCA9IHZhbHVlLmluZGV4T2YoJ1xcXFwnLCBwcmV2KTtcbiAgICB9XG5cbiAgICBxdWV1ZS5wdXNoKHZhbHVlLnNsaWNlKHByZXYpKTtcblxuICAgIHJldHVybiBxdWV1ZS5qb2luKCcnKTtcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgeHRlbmQgPSByZXF1aXJlKCd4dGVuZCcpO1xudmFyIGVudGl0aWVzID0gcmVxdWlyZSgncGFyc2UtZW50aXRpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5O1xuXG4vKiBGYWN0b3J5IHRvIGNyZWF0ZSBhbiBlbnRpdHkgZGVjb2Rlci4gKi9cbmZ1bmN0aW9uIGZhY3RvcnkoY3R4KSB7XG4gIGRlY29kZXIucmF3ID0gZGVjb2RlUmF3O1xuXG4gIHJldHVybiBkZWNvZGVyO1xuXG4gIC8qIE5vcm1hbGl6ZSBgcG9zaXRpb25gIHRvIGFkZCBhbiBgaW5kZW50YC4gKi9cbiAgZnVuY3Rpb24gbm9ybWFsaXplKHBvc2l0aW9uKSB7XG4gICAgdmFyIG9mZnNldHMgPSBjdHgub2Zmc2V0O1xuICAgIHZhciBsaW5lID0gcG9zaXRpb24ubGluZTtcbiAgICB2YXIgcmVzdWx0ID0gW107XG5cbiAgICB3aGlsZSAoKytsaW5lKSB7XG4gICAgICBpZiAoIShsaW5lIGluIG9mZnNldHMpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICByZXN1bHQucHVzaCgob2Zmc2V0c1tsaW5lXSB8fCAwKSArIDEpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBzdGFydDogcG9zaXRpb24sXG4gICAgICBpbmRlbnQ6IHJlc3VsdFxuICAgIH07XG4gIH1cblxuICAvKiBIYW5kbGUgYSB3YXJuaW5nLlxuICAgKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3dvb29ybS9wYXJzZS1lbnRpdGllc1xuICAgKiBmb3IgdGhlIHdhcm5pbmdzLiAqL1xuICBmdW5jdGlvbiBoYW5kbGVXYXJuaW5nKHJlYXNvbiwgcG9zaXRpb24sIGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gMykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGN0eC5maWxlLm1lc3NhZ2UocmVhc29uLCBwb3NpdGlvbik7XG4gIH1cblxuICAvKiBEZWNvZGUgYHZhbHVlYCAoYXQgYHBvc2l0aW9uYCkgaW50byB0ZXh0LW5vZGVzLiAqL1xuICBmdW5jdGlvbiBkZWNvZGVyKHZhbHVlLCBwb3NpdGlvbiwgaGFuZGxlcikge1xuICAgIGVudGl0aWVzKHZhbHVlLCB7XG4gICAgICBwb3NpdGlvbjogbm9ybWFsaXplKHBvc2l0aW9uKSxcbiAgICAgIHdhcm5pbmc6IGhhbmRsZVdhcm5pbmcsXG4gICAgICB0ZXh0OiBoYW5kbGVyLFxuICAgICAgcmVmZXJlbmNlOiBoYW5kbGVyLFxuICAgICAgdGV4dENvbnRleHQ6IGN0eCxcbiAgICAgIHJlZmVyZW5jZUNvbnRleHQ6IGN0eFxuICAgIH0pO1xuICB9XG5cbiAgLyogRGVjb2RlIGB2YWx1ZWAgKGF0IGBwb3NpdGlvbmApIGludG8gYSBzdHJpbmcuICovXG4gIGZ1bmN0aW9uIGRlY29kZVJhdyh2YWx1ZSwgcG9zaXRpb24sIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gZW50aXRpZXModmFsdWUsIHh0ZW5kKG9wdGlvbnMsIHtcbiAgICAgIHBvc2l0aW9uOiBub3JtYWxpemUocG9zaXRpb24pLFxuICAgICAgd2FybmluZzogaGFuZGxlV2FybmluZ1xuICAgIH0pKTtcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gaGV4YWRlY2ltYWxcblxuLy8gQ2hlY2sgaWYgdGhlIGdpdmVuIGNoYXJhY3RlciBjb2RlLCBvciB0aGUgY2hhcmFjdGVyIGNvZGUgYXQgdGhlIGZpcnN0XG4vLyBjaGFyYWN0ZXIsIGlzIGhleGFkZWNpbWFsLlxuZnVuY3Rpb24gaGV4YWRlY2ltYWwoY2hhcmFjdGVyKSB7XG4gIHZhciBjb2RlID0gdHlwZW9mIGNoYXJhY3RlciA9PT0gJ3N0cmluZycgPyBjaGFyYWN0ZXIuY2hhckNvZGVBdCgwKSA6IGNoYXJhY3RlclxuXG4gIHJldHVybiAoXG4gICAgKGNvZGUgPj0gOTcgLyogYSAqLyAmJiBjb2RlIDw9IDEwMikgLyogeiAqLyB8fFxuICAgIChjb2RlID49IDY1IC8qIEEgKi8gJiYgY29kZSA8PSA3MCkgLyogWiAqLyB8fFxuICAgIChjb2RlID49IDQ4IC8qIEEgKi8gJiYgY29kZSA8PSA1NykgLyogWiAqL1xuICApXG59XG4iLCIndXNlIHN0cmljdCdcblxudmFyIGFscGhhYmV0aWNhbCA9IHJlcXVpcmUoJ2lzLWFscGhhYmV0aWNhbCcpXG52YXIgZGVjaW1hbCA9IHJlcXVpcmUoJ2lzLWRlY2ltYWwnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFscGhhbnVtZXJpY2FsXG5cbi8vIENoZWNrIGlmIHRoZSBnaXZlbiBjaGFyYWN0ZXIgY29kZSwgb3IgdGhlIGNoYXJhY3RlciBjb2RlIGF0IHRoZSBmaXJzdFxuLy8gY2hhcmFjdGVyLCBpcyBhbHBoYW51bWVyaWNhbC5cbmZ1bmN0aW9uIGFscGhhbnVtZXJpY2FsKGNoYXJhY3Rlcikge1xuICByZXR1cm4gYWxwaGFiZXRpY2FsKGNoYXJhY3RlcikgfHwgZGVjaW1hbChjaGFyYWN0ZXIpXG59XG4iLCIndXNlIHN0cmljdCdcblxuLyogZXNsaW50LWVudiBicm93c2VyICovXG5cbnZhciBlbFxuXG52YXIgc2VtaWNvbG9uID0gNTkgLy8gICc7J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlY29kZUVudGl0eVxuXG5mdW5jdGlvbiBkZWNvZGVFbnRpdHkoY2hhcmFjdGVycykge1xuICB2YXIgZW50aXR5ID0gJyYnICsgY2hhcmFjdGVycyArICc7J1xuICB2YXIgY2hhclxuXG4gIGVsID0gZWwgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaScpXG4gIGVsLmlubmVySFRNTCA9IGVudGl0eVxuICBjaGFyID0gZWwudGV4dENvbnRlbnRcblxuICAvLyBTb21lIGVudGl0aWVzIGRvIG5vdCByZXF1aXJlIHRoZSBjbG9zaW5nIHNlbWljb2xvbiAoYCZub3RgIC0gZm9yIGluc3RhbmNlKSxcbiAgLy8gd2hpY2ggbGVhZHMgdG8gc2l0dWF0aW9ucyB3aGVyZSBwYXJzaW5nIHRoZSBhc3N1bWVkIGVudGl0eSBvZiAmbm90aXQ7IHdpbGxcbiAgLy8gcmVzdWx0IGluIHRoZSBzdHJpbmcgYMKsaXQ7YC4gIFdoZW4gd2UgZW5jb3VudGVyIGEgdHJhaWxpbmcgc2VtaWNvbG9uIGFmdGVyXG4gIC8vIHBhcnNpbmcgYW5kIHRoZSBlbnRpdHkgdG8gZGVjb2RlIHdhcyBub3QgYSBzZW1pY29sb24gKGAmc2VtaTtgKSwgd2UgY2FuXG4gIC8vIGFzc3VtZSB0aGF0IHRoZSBtYXRjaGluZyB3YXMgaW5jb21wbGV0ZVxuICBpZiAoY2hhci5jaGFyQ29kZUF0KGNoYXIubGVuZ3RoIC0gMSkgPT09IHNlbWljb2xvbiAmJiBjaGFyYWN0ZXJzICE9PSAnc2VtaScpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8vIElmIHRoZSBkZWNvZGVkIHN0cmluZyBpcyBlcXVhbCB0byB0aGUgaW5wdXQsIHRoZSBlbnRpdHkgd2FzIG5vdCB2YWxpZFxuICByZXR1cm4gY2hhciA9PT0gZW50aXR5ID8gZmFsc2UgOiBjaGFyXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZmFjdG9yeTtcblxudmFyIE1FUkdFQUJMRV9OT0RFUyA9IHtcbiAgdGV4dDogbWVyZ2VUZXh0LFxuICBibG9ja3F1b3RlOiBtZXJnZUJsb2NrcXVvdGVcbn07XG5cbi8qIENoZWNrIHdoZXRoZXIgYSBub2RlIGlzIG1lcmdlYWJsZSB3aXRoIGFkamFjZW50IG5vZGVzLiAqL1xuZnVuY3Rpb24gbWVyZ2VhYmxlKG5vZGUpIHtcbiAgdmFyIHN0YXJ0O1xuICB2YXIgZW5kO1xuXG4gIGlmIChub2RlLnR5cGUgIT09ICd0ZXh0JyB8fCAhbm9kZS5wb3NpdGlvbikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgc3RhcnQgPSBub2RlLnBvc2l0aW9uLnN0YXJ0O1xuICBlbmQgPSBub2RlLnBvc2l0aW9uLmVuZDtcblxuICAvKiBPbmx5IG1lcmdlIG5vZGVzIHdoaWNoIG9jY3VweSB0aGUgc2FtZSBzaXplIGFzIHRoZWlyXG4gICAqIGB2YWx1ZWAuICovXG4gIHJldHVybiBzdGFydC5saW5lICE9PSBlbmQubGluZSB8fFxuICAgICAgZW5kLmNvbHVtbiAtIHN0YXJ0LmNvbHVtbiA9PT0gbm9kZS52YWx1ZS5sZW5ndGg7XG59XG5cbi8qIE1lcmdlIHR3byB0ZXh0IG5vZGVzOiBgbm9kZWAgaW50byBgcHJldmAuICovXG5mdW5jdGlvbiBtZXJnZVRleHQocHJldiwgbm9kZSkge1xuICBwcmV2LnZhbHVlICs9IG5vZGUudmFsdWU7XG5cbiAgcmV0dXJuIHByZXY7XG59XG5cbi8qIE1lcmdlIHR3byBibG9ja3F1b3RlczogYG5vZGVgIGludG8gYHByZXZgLCB1bmxlc3MgaW5cbiAqIENvbW1vbk1hcmsgbW9kZS4gKi9cbmZ1bmN0aW9uIG1lcmdlQmxvY2txdW90ZShwcmV2LCBub2RlKSB7XG4gIGlmICh0aGlzLm9wdGlvbnMuY29tbW9ubWFyaykge1xuICAgIHJldHVybiBub2RlO1xuICB9XG5cbiAgcHJldi5jaGlsZHJlbiA9IHByZXYuY2hpbGRyZW4uY29uY2F0KG5vZGUuY2hpbGRyZW4pO1xuXG4gIHJldHVybiBwcmV2O1xufVxuXG4vKiBDb25zdHJ1Y3QgYSB0b2tlbml6ZXIuICBUaGlzIGNyZWF0ZXMgYm90aFxuICogYHRva2VuaXplSW5saW5lYCBhbmQgYHRva2VuaXplQmxvY2tgLiAqL1xuZnVuY3Rpb24gZmFjdG9yeSh0eXBlKSB7XG4gIHJldHVybiB0b2tlbml6ZTtcblxuICAvKiBUb2tlbml6ZXIgZm9yIGEgYm91bmQgYHR5cGVgLiAqL1xuICBmdW5jdGlvbiB0b2tlbml6ZSh2YWx1ZSwgbG9jYXRpb24pIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIG9mZnNldCA9IHNlbGYub2Zmc2V0O1xuICAgIHZhciB0b2tlbnMgPSBbXTtcbiAgICB2YXIgbWV0aG9kcyA9IHNlbGZbdHlwZSArICdNZXRob2RzJ107XG4gICAgdmFyIHRva2VuaXplcnMgPSBzZWxmW3R5cGUgKyAnVG9rZW5pemVycyddO1xuICAgIHZhciBsaW5lID0gbG9jYXRpb24ubGluZTtcbiAgICB2YXIgY29sdW1uID0gbG9jYXRpb24uY29sdW1uO1xuICAgIHZhciBpbmRleDtcbiAgICB2YXIgbGVuZ3RoO1xuICAgIHZhciBtZXRob2Q7XG4gICAgdmFyIG5hbWU7XG4gICAgdmFyIG1hdGNoZWQ7XG4gICAgdmFyIHZhbHVlTGVuZ3RoO1xuXG4gICAgLyogVHJpbSB3aGl0ZSBzcGFjZSBvbmx5IGxpbmVzLiAqL1xuICAgIGlmICghdmFsdWUpIHtcbiAgICAgIHJldHVybiB0b2tlbnM7XG4gICAgfVxuXG4gICAgLyogRXhwb3NlIG9uIGBlYXRgLiAqL1xuICAgIGVhdC5ub3cgPSBub3c7XG4gICAgZWF0LmZpbGUgPSBzZWxmLmZpbGU7XG5cbiAgICAvKiBTeW5jIGluaXRpYWwgb2Zmc2V0LiAqL1xuICAgIHVwZGF0ZVBvc2l0aW9uKCcnKTtcblxuICAgIC8qIEl0ZXJhdGUgb3ZlciBgdmFsdWVgLCBhbmQgaXRlcmF0ZSBvdmVyIGFsbFxuICAgICAqIHRva2VuaXplcnMuICBXaGVuIG9uZSBlYXRzIHNvbWV0aGluZywgcmUtaXRlcmF0ZVxuICAgICAqIHdpdGggdGhlIHJlbWFpbmluZyB2YWx1ZS4gIElmIG5vIHRva2VuaXplciBlYXRzLFxuICAgICAqIHNvbWV0aGluZyBmYWlsZWQgKHNob3VsZCBub3QgaGFwcGVuKSBhbmQgYW5cbiAgICAgKiBleGNlcHRpb24gaXMgdGhyb3duLiAqL1xuICAgIHdoaWxlICh2YWx1ZSkge1xuICAgICAgaW5kZXggPSAtMTtcbiAgICAgIGxlbmd0aCA9IG1ldGhvZHMubGVuZ3RoO1xuICAgICAgbWF0Y2hlZCA9IGZhbHNlO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBuYW1lID0gbWV0aG9kc1tpbmRleF07XG4gICAgICAgIG1ldGhvZCA9IHRva2VuaXplcnNbbmFtZV07XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgIG1ldGhvZCAmJlxuICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovICghbWV0aG9kLm9ubHlBdFN0YXJ0IHx8IHNlbGYuYXRTdGFydCkgJiZcbiAgICAgICAgICAoIW1ldGhvZC5ub3RJbkxpc3QgfHwgIXNlbGYuaW5MaXN0KSAmJlxuICAgICAgICAgICghbWV0aG9kLm5vdEluQmxvY2sgfHwgIXNlbGYuaW5CbG9jaykgJiZcbiAgICAgICAgICAoIW1ldGhvZC5ub3RJbkxpbmsgfHwgIXNlbGYuaW5MaW5rKVxuICAgICAgICApIHtcbiAgICAgICAgICB2YWx1ZUxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcblxuICAgICAgICAgIG1ldGhvZC5hcHBseShzZWxmLCBbZWF0LCB2YWx1ZV0pO1xuXG4gICAgICAgICAgbWF0Y2hlZCA9IHZhbHVlTGVuZ3RoICE9PSB2YWx1ZS5sZW5ndGg7XG5cbiAgICAgICAgICBpZiAobWF0Y2hlZCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKCFtYXRjaGVkKSB7XG4gICAgICAgIHNlbGYuZmlsZS5mYWlsKG5ldyBFcnJvcignSW5maW5pdGUgbG9vcCcpLCBlYXQubm93KCkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHNlbGYuZW9mID0gbm93KCk7XG5cbiAgICByZXR1cm4gdG9rZW5zO1xuXG4gICAgLyogVXBkYXRlIGxpbmUsIGNvbHVtbiwgYW5kIG9mZnNldCBiYXNlZCBvblxuICAgICAqIGB2YWx1ZWAuICovXG4gICAgZnVuY3Rpb24gdXBkYXRlUG9zaXRpb24oc3VidmFsdWUpIHtcbiAgICAgIHZhciBsYXN0SW5kZXggPSAtMTtcbiAgICAgIHZhciBpbmRleCA9IHN1YnZhbHVlLmluZGV4T2YoJ1xcbicpO1xuXG4gICAgICB3aGlsZSAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgIGxpbmUrKztcbiAgICAgICAgbGFzdEluZGV4ID0gaW5kZXg7XG4gICAgICAgIGluZGV4ID0gc3VidmFsdWUuaW5kZXhPZignXFxuJywgaW5kZXggKyAxKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGxhc3RJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgY29sdW1uICs9IHN1YnZhbHVlLmxlbmd0aDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbHVtbiA9IHN1YnZhbHVlLmxlbmd0aCAtIGxhc3RJbmRleDtcbiAgICAgIH1cblxuICAgICAgaWYgKGxpbmUgaW4gb2Zmc2V0KSB7XG4gICAgICAgIGlmIChsYXN0SW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgY29sdW1uICs9IG9mZnNldFtsaW5lXTtcbiAgICAgICAgfSBlbHNlIGlmIChjb2x1bW4gPD0gb2Zmc2V0W2xpbmVdKSB7XG4gICAgICAgICAgY29sdW1uID0gb2Zmc2V0W2xpbmVdICsgMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qIEdldCBvZmZzZXQuICBDYWxsZWQgYmVmb3JlIHRoZSBmaXJzdCBjaGFyYWN0ZXIgaXNcbiAgICAgKiBlYXRlbiB0byByZXRyaWV2ZSB0aGUgcmFuZ2UncyBvZmZzZXRzLiAqL1xuICAgIGZ1bmN0aW9uIGdldE9mZnNldCgpIHtcbiAgICAgIHZhciBpbmRlbnRhdGlvbiA9IFtdO1xuICAgICAgdmFyIHBvcyA9IGxpbmUgKyAxO1xuXG4gICAgICAvKiBEb25lLiAgQ2FsbGVkIHdoZW4gdGhlIGxhc3QgY2hhcmFjdGVyIGlzXG4gICAgICAgKiBlYXRlbiB0byByZXRyaWV2ZSB0aGUgcmFuZ2XigJlzIG9mZnNldHMuICovXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbGFzdCA9IGxpbmUgKyAxO1xuXG4gICAgICAgIHdoaWxlIChwb3MgPCBsYXN0KSB7XG4gICAgICAgICAgaW5kZW50YXRpb24ucHVzaCgob2Zmc2V0W3Bvc10gfHwgMCkgKyAxKTtcblxuICAgICAgICAgIHBvcysrO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGluZGVudGF0aW9uO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKiBHZXQgdGhlIGN1cnJlbnQgcG9zaXRpb24uICovXG4gICAgZnVuY3Rpb24gbm93KCkge1xuICAgICAgdmFyIHBvcyA9IHtsaW5lOiBsaW5lLCBjb2x1bW46IGNvbHVtbn07XG5cbiAgICAgIHBvcy5vZmZzZXQgPSBzZWxmLnRvT2Zmc2V0KHBvcyk7XG5cbiAgICAgIHJldHVybiBwb3M7XG4gICAgfVxuXG4gICAgLyogU3RvcmUgcG9zaXRpb24gaW5mb3JtYXRpb24gZm9yIGEgbm9kZS4gKi9cbiAgICBmdW5jdGlvbiBQb3NpdGlvbihzdGFydCkge1xuICAgICAgdGhpcy5zdGFydCA9IHN0YXJ0O1xuICAgICAgdGhpcy5lbmQgPSBub3coKTtcbiAgICB9XG5cbiAgICAvKiBUaHJvdyB3aGVuIGEgdmFsdWUgaXMgaW5jb3JyZWN0bHkgZWF0ZW4uXG4gICAgICogVGhpcyBzaG91bGRu4oCZdCBoYXBwZW4gYnV0IHdpbGwgdGhyb3cgb24gbmV3LFxuICAgICAqIGluY29ycmVjdCBydWxlcy4gKi9cbiAgICBmdW5jdGlvbiB2YWxpZGF0ZUVhdChzdWJ2YWx1ZSkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAodmFsdWUuc3Vic3RyaW5nKDAsIHN1YnZhbHVlLmxlbmd0aCkgIT09IHN1YnZhbHVlKSB7XG4gICAgICAgIC8qIENhcHR1cmUgc3RhY2stdHJhY2UuICovXG4gICAgICAgIHNlbGYuZmlsZS5mYWlsKFxuICAgICAgICAgIG5ldyBFcnJvcihcbiAgICAgICAgICAgICdJbmNvcnJlY3RseSBlYXRlbiB2YWx1ZTogcGxlYXNlIHJlcG9ydCB0aGlzICcgK1xuICAgICAgICAgICAgJ3dhcm5pbmcgb24gaHR0cDovL2dpdC5pby92ZzVGdCdcbiAgICAgICAgICApLFxuICAgICAgICAgIG5vdygpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyogTWFyayBwb3NpdGlvbiBhbmQgcGF0Y2ggYG5vZGUucG9zaXRpb25gLiAqL1xuICAgIGZ1bmN0aW9uIHBvc2l0aW9uKCkge1xuICAgICAgdmFyIGJlZm9yZSA9IG5vdygpO1xuXG4gICAgICByZXR1cm4gdXBkYXRlO1xuXG4gICAgICAvKiBBZGQgdGhlIHBvc2l0aW9uIHRvIGEgbm9kZS4gKi9cbiAgICAgIGZ1bmN0aW9uIHVwZGF0ZShub2RlLCBpbmRlbnQpIHtcbiAgICAgICAgdmFyIHByZXYgPSBub2RlLnBvc2l0aW9uO1xuICAgICAgICB2YXIgc3RhcnQgPSBwcmV2ID8gcHJldi5zdGFydCA6IGJlZm9yZTtcbiAgICAgICAgdmFyIGNvbWJpbmVkID0gW107XG4gICAgICAgIHZhciBuID0gcHJldiAmJiBwcmV2LmVuZC5saW5lO1xuICAgICAgICB2YXIgbCA9IGJlZm9yZS5saW5lO1xuXG4gICAgICAgIG5vZGUucG9zaXRpb24gPSBuZXcgUG9zaXRpb24oc3RhcnQpO1xuXG4gICAgICAgIC8qIElmIHRoZXJlIHdhcyBhbHJlYWR5IGEgYHBvc2l0aW9uYCwgdGhpc1xuICAgICAgICAgKiBub2RlIHdhcyBtZXJnZWQuICBGaXhpbmcgYHN0YXJ0YCB3YXNu4oCZdFxuICAgICAgICAgKiBoYXJkLCBidXQgdGhlIGluZGVudCBpcyBkaWZmZXJlbnQuXG4gICAgICAgICAqIEVzcGVjaWFsbHkgYmVjYXVzZSBzb21lIGluZm9ybWF0aW9uLCB0aGVcbiAgICAgICAgICogaW5kZW50IGJldHdlZW4gYG5gIGFuZCBgbGAgd2FzbuKAmXRcbiAgICAgICAgICogdHJhY2tlZC4gIEx1Y2tpbHksIHRoYXQgc3BhY2UgaXNcbiAgICAgICAgICogKHNob3VsZCBiZT8pIGVtcHR5LCBzbyB3ZSBjYW4gc2FmZWx5XG4gICAgICAgICAqIGNoZWNrIGZvciBpdCBub3cuICovXG4gICAgICAgIGlmIChwcmV2ICYmIGluZGVudCAmJiBwcmV2LmluZGVudCkge1xuICAgICAgICAgIGNvbWJpbmVkID0gcHJldi5pbmRlbnQ7XG5cbiAgICAgICAgICBpZiAobiA8IGwpIHtcbiAgICAgICAgICAgIHdoaWxlICgrK24gPCBsKSB7XG4gICAgICAgICAgICAgIGNvbWJpbmVkLnB1c2goKG9mZnNldFtuXSB8fCAwKSArIDEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb21iaW5lZC5wdXNoKGJlZm9yZS5jb2x1bW4pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGluZGVudCA9IGNvbWJpbmVkLmNvbmNhdChpbmRlbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgbm9kZS5wb3NpdGlvbi5pbmRlbnQgPSBpbmRlbnQgfHwgW107XG5cbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyogQWRkIGBub2RlYCB0byBgcGFyZW50YHMgY2hpbGRyZW4gb3IgdG8gYHRva2Vuc2AuXG4gICAgICogUGVyZm9ybXMgbWVyZ2VzIHdoZXJlIHBvc3NpYmxlLiAqL1xuICAgIGZ1bmN0aW9uIGFkZChub2RlLCBwYXJlbnQpIHtcbiAgICAgIHZhciBjaGlsZHJlbiA9IHBhcmVudCA/IHBhcmVudC5jaGlsZHJlbiA6IHRva2VucztcbiAgICAgIHZhciBwcmV2ID0gY2hpbGRyZW5bY2hpbGRyZW4ubGVuZ3RoIC0gMV07XG5cbiAgICAgIGlmIChcbiAgICAgICAgcHJldiAmJlxuICAgICAgICBub2RlLnR5cGUgPT09IHByZXYudHlwZSAmJlxuICAgICAgICBub2RlLnR5cGUgaW4gTUVSR0VBQkxFX05PREVTICYmXG4gICAgICAgIG1lcmdlYWJsZShwcmV2KSAmJlxuICAgICAgICBtZXJnZWFibGUobm9kZSlcbiAgICAgICkge1xuICAgICAgICBub2RlID0gTUVSR0VBQkxFX05PREVTW25vZGUudHlwZV0uY2FsbChzZWxmLCBwcmV2LCBub2RlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5vZGUgIT09IHByZXYpIHtcbiAgICAgICAgY2hpbGRyZW4ucHVzaChub2RlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNlbGYuYXRTdGFydCAmJiB0b2tlbnMubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIHNlbGYuZXhpdFN0YXJ0KCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBub2RlO1xuICAgIH1cblxuICAgIC8qIFJlbW92ZSBgc3VidmFsdWVgIGZyb20gYHZhbHVlYC5cbiAgICAgKiBgc3VidmFsdWVgIG11c3QgYmUgYXQgdGhlIHN0YXJ0IG9mIGB2YWx1ZWAuICovXG4gICAgZnVuY3Rpb24gZWF0KHN1YnZhbHVlKSB7XG4gICAgICB2YXIgaW5kZW50ID0gZ2V0T2Zmc2V0KCk7XG4gICAgICB2YXIgcG9zID0gcG9zaXRpb24oKTtcbiAgICAgIHZhciBjdXJyZW50ID0gbm93KCk7XG5cbiAgICAgIHZhbGlkYXRlRWF0KHN1YnZhbHVlKTtcblxuICAgICAgYXBwbHkucmVzZXQgPSByZXNldDtcbiAgICAgIHJlc2V0LnRlc3QgPSB0ZXN0O1xuICAgICAgYXBwbHkudGVzdCA9IHRlc3Q7XG5cbiAgICAgIHZhbHVlID0gdmFsdWUuc3Vic3RyaW5nKHN1YnZhbHVlLmxlbmd0aCk7XG5cbiAgICAgIHVwZGF0ZVBvc2l0aW9uKHN1YnZhbHVlKTtcblxuICAgICAgaW5kZW50ID0gaW5kZW50KCk7XG5cbiAgICAgIHJldHVybiBhcHBseTtcblxuICAgICAgLyogQWRkIHRoZSBnaXZlbiBhcmd1bWVudHMsIGFkZCBgcG9zaXRpb25gIHRvXG4gICAgICAgKiB0aGUgcmV0dXJuZWQgbm9kZSwgYW5kIHJldHVybiB0aGUgbm9kZS4gKi9cbiAgICAgIGZ1bmN0aW9uIGFwcGx5KG5vZGUsIHBhcmVudCkge1xuICAgICAgICByZXR1cm4gcG9zKGFkZChwb3Mobm9kZSksIHBhcmVudCksIGluZGVudCk7XG4gICAgICB9XG5cbiAgICAgIC8qIEZ1bmN0aW9ucyBqdXN0IGxpa2UgYXBwbHksIGJ1dCByZXNldHMgdGhlXG4gICAgICAgKiBjb250ZW50OiAgdGhlIGxpbmUgYW5kIGNvbHVtbiBhcmUgcmV2ZXJzZWQsXG4gICAgICAgKiBhbmQgdGhlIGVhdGVuIHZhbHVlIGlzIHJlLWFkZGVkLlxuICAgICAgICogVGhpcyBpcyB1c2VmdWwgZm9yIG5vZGVzIHdpdGggYSBzaW5nbGVcbiAgICAgICAqIHR5cGUgb2YgY29udGVudCwgc3VjaCBhcyBsaXN0cyBhbmQgdGFibGVzLlxuICAgICAgICogU2VlIGBhcHBseWAgYWJvdmUgZm9yIHdoYXQgcGFyYW1ldGVycyBhcmVcbiAgICAgICAqIGV4cGVjdGVkLiAqL1xuICAgICAgZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgICAgIHZhciBub2RlID0gYXBwbHkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcblxuICAgICAgICBsaW5lID0gY3VycmVudC5saW5lO1xuICAgICAgICBjb2x1bW4gPSBjdXJyZW50LmNvbHVtbjtcbiAgICAgICAgdmFsdWUgPSBzdWJ2YWx1ZSArIHZhbHVlO1xuXG4gICAgICAgIHJldHVybiBub2RlO1xuICAgICAgfVxuXG4gICAgICAvKiBUZXN0IHRoZSBwb3NpdGlvbiwgYWZ0ZXIgZWF0aW5nLCBhbmQgcmV2ZXJzZVxuICAgICAgICogdG8gYSBub3QtZWF0ZW4gc3RhdGUuICovXG4gICAgICBmdW5jdGlvbiB0ZXN0KCkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcG9zKHt9KTtcblxuICAgICAgICBsaW5lID0gY3VycmVudC5saW5lO1xuICAgICAgICBjb2x1bW4gPSBjdXJyZW50LmNvbHVtbjtcbiAgICAgICAgdmFsdWUgPSBzdWJ2YWx1ZSArIHZhbHVlO1xuXG4gICAgICAgIHJldHVybiByZXN1bHQucG9zaXRpb247XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB4dGVuZCA9IHJlcXVpcmUoJ3h0ZW5kJyk7XG52YXIgZXNjYXBlcyA9IHJlcXVpcmUoJ21hcmtkb3duLWVzY2FwZXMnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vZGVmYXVsdHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBzZXRPcHRpb25zO1xuXG5mdW5jdGlvbiBzZXRPcHRpb25zKG9wdGlvbnMpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgY3VycmVudCA9IHNlbGYub3B0aW9ucztcbiAgdmFyIGtleTtcbiAgdmFyIHZhbHVlO1xuXG4gIGlmIChvcHRpb25zID09IG51bGwpIHtcbiAgICBvcHRpb25zID0ge307XG4gIH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdvYmplY3QnKSB7XG4gICAgb3B0aW9ucyA9IHh0ZW5kKG9wdGlvbnMpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdJbnZhbGlkIHZhbHVlIGAnICsgb3B0aW9ucyArICdgICcgK1xuICAgICAgJ2ZvciBzZXR0aW5nIGBvcHRpb25zYCdcbiAgICApO1xuICB9XG5cbiAgZm9yIChrZXkgaW4gZGVmYXVsdHMpIHtcbiAgICB2YWx1ZSA9IG9wdGlvbnNba2V5XTtcblxuICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICB2YWx1ZSA9IGN1cnJlbnRba2V5XTtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICAoa2V5ICE9PSAnYmxvY2tzJyAmJiB0eXBlb2YgdmFsdWUgIT09ICdib29sZWFuJykgfHxcbiAgICAgIChrZXkgPT09ICdibG9ja3MnICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpXG4gICAgKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdmFsdWUgYCcgKyB2YWx1ZSArICdgIGZvciBzZXR0aW5nIGBvcHRpb25zLicgKyBrZXkgKyAnYCcpO1xuICAgIH1cblxuICAgIG9wdGlvbnNba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgc2VsZi5vcHRpb25zID0gb3B0aW9ucztcbiAgc2VsZi5lc2NhcGUgPSBlc2NhcGVzKG9wdGlvbnMpO1xuXG4gIHJldHVybiBzZWxmO1xufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gZXNjYXBlc1xuXG52YXIgZGVmYXVsdHMgPSBbXG4gICdcXFxcJyxcbiAgJ2AnLFxuICAnKicsXG4gICd7JyxcbiAgJ30nLFxuICAnWycsXG4gICddJyxcbiAgJygnLFxuICAnKScsXG4gICcjJyxcbiAgJysnLFxuICAnLScsXG4gICcuJyxcbiAgJyEnLFxuICAnXycsXG4gICc+J1xuXVxuXG52YXIgZ2ZtID0gZGVmYXVsdHMuY29uY2F0KFsnficsICd8J10pXG5cbnZhciBjb21tb25tYXJrID0gZ2ZtLmNvbmNhdChbXG4gICdcXG4nLFxuICAnXCInLFxuICAnJCcsXG4gICclJyxcbiAgJyYnLFxuICBcIidcIixcbiAgJywnLFxuICAnLycsXG4gICc6JyxcbiAgJzsnLFxuICAnPCcsXG4gICc9JyxcbiAgJz8nLFxuICAnQCcsXG4gICdeJ1xuXSlcblxuZXNjYXBlcy5kZWZhdWx0ID0gZGVmYXVsdHNcbmVzY2FwZXMuZ2ZtID0gZ2ZtXG5lc2NhcGVzLmNvbW1vbm1hcmsgPSBjb21tb25tYXJrXG5cbi8vIEdldCBtYXJrZG93biBlc2NhcGVzLlxuZnVuY3Rpb24gZXNjYXBlcyhvcHRpb25zKSB7XG4gIHZhciBzZXR0aW5ncyA9IG9wdGlvbnMgfHwge31cblxuICBpZiAoc2V0dGluZ3MuY29tbW9ubWFyaykge1xuICAgIHJldHVybiBjb21tb25tYXJrXG4gIH1cblxuICByZXR1cm4gc2V0dGluZ3MuZ2ZtID8gZ2ZtIDogZGVmYXVsdHNcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHh0ZW5kID0gcmVxdWlyZSgneHRlbmQnKTtcbnZhciByZW1vdmVQb3NpdGlvbiA9IHJlcXVpcmUoJ3VuaXN0LXV0aWwtcmVtb3ZlLXBvc2l0aW9uJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcGFyc2U7XG5cbnZhciBDX05FV0xJTkUgPSAnXFxuJztcbnZhciBFWFBSRVNTSU9OX0xJTkVfQlJFQUtTID0gL1xcclxcbnxcXHIvZztcblxuLyogUGFyc2UgdGhlIGJvdW5kIGZpbGUuICovXG5mdW5jdGlvbiBwYXJzZSgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgdmFsdWUgPSBTdHJpbmcoc2VsZi5maWxlKTtcbiAgdmFyIHN0YXJ0ID0ge2xpbmU6IDEsIGNvbHVtbjogMSwgb2Zmc2V0OiAwfTtcbiAgdmFyIGNvbnRlbnQgPSB4dGVuZChzdGFydCk7XG4gIHZhciBub2RlO1xuXG4gIC8qIENsZWFuIG5vbi11bml4IG5ld2xpbmVzOiBgXFxyXFxuYCBhbmQgYFxccmAgYXJlIGFsbFxuICAgKiBjaGFuZ2VkIHRvIGBcXG5gLiAgVGhpcyBzaG91bGQgbm90IGFmZmVjdCBwb3NpdGlvbmFsXG4gICAqIGluZm9ybWF0aW9uLiAqL1xuICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoRVhQUkVTU0lPTl9MSU5FX0JSRUFLUywgQ19ORVdMSU5FKTtcblxuICBpZiAodmFsdWUuY2hhckNvZGVBdCgwKSA9PT0gMHhGRUZGKSB7XG4gICAgdmFsdWUgPSB2YWx1ZS5zbGljZSgxKTtcblxuICAgIGNvbnRlbnQuY29sdW1uKys7XG4gICAgY29udGVudC5vZmZzZXQrKztcbiAgfVxuXG4gIG5vZGUgPSB7XG4gICAgdHlwZTogJ3Jvb3QnLFxuICAgIGNoaWxkcmVuOiBzZWxmLnRva2VuaXplQmxvY2sodmFsdWUsIGNvbnRlbnQpLFxuICAgIHBvc2l0aW9uOiB7XG4gICAgICBzdGFydDogc3RhcnQsXG4gICAgICBlbmQ6IHNlbGYuZW9mIHx8IHh0ZW5kKHN0YXJ0KVxuICAgIH1cbiAgfTtcblxuICBpZiAoIXNlbGYub3B0aW9ucy5wb3NpdGlvbikge1xuICAgIHJlbW92ZVBvc2l0aW9uKG5vZGUsIHRydWUpO1xuICB9XG5cbiAgcmV0dXJuIG5vZGU7XG59XG4iLCIndXNlIHN0cmljdCdcblxudmFyIHZpc2l0ID0gcmVxdWlyZSgndW5pc3QtdXRpbC12aXNpdCcpXG5cbm1vZHVsZS5leHBvcnRzID0gcmVtb3ZlUG9zaXRpb25cblxuZnVuY3Rpb24gcmVtb3ZlUG9zaXRpb24obm9kZSwgZm9yY2UpIHtcbiAgdmlzaXQobm9kZSwgZm9yY2UgPyBoYXJkIDogc29mdClcbiAgcmV0dXJuIG5vZGVcbn1cblxuZnVuY3Rpb24gaGFyZChub2RlKSB7XG4gIGRlbGV0ZSBub2RlLnBvc2l0aW9uXG59XG5cbmZ1bmN0aW9uIHNvZnQobm9kZSkge1xuICBub2RlLnBvc2l0aW9uID0gdW5kZWZpbmVkXG59XG4iLCIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSB2aXNpdFBhcmVudHNcblxudmFyIGNvbnZlcnQgPSByZXF1aXJlKCd1bmlzdC11dGlsLWlzL2NvbnZlcnQnKVxuXG52YXIgQ09OVElOVUUgPSB0cnVlXG52YXIgU0tJUCA9ICdza2lwJ1xudmFyIEVYSVQgPSBmYWxzZVxuXG52aXNpdFBhcmVudHMuQ09OVElOVUUgPSBDT05USU5VRVxudmlzaXRQYXJlbnRzLlNLSVAgPSBTS0lQXG52aXNpdFBhcmVudHMuRVhJVCA9IEVYSVRcblxuZnVuY3Rpb24gdmlzaXRQYXJlbnRzKHRyZWUsIHRlc3QsIHZpc2l0b3IsIHJldmVyc2UpIHtcbiAgdmFyIGlzXG5cbiAgaWYgKHR5cGVvZiB0ZXN0ID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB2aXNpdG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV2ZXJzZSA9IHZpc2l0b3JcbiAgICB2aXNpdG9yID0gdGVzdFxuICAgIHRlc3QgPSBudWxsXG4gIH1cblxuICBpcyA9IGNvbnZlcnQodGVzdClcblxuICBvbmUodHJlZSwgbnVsbCwgW10pXG5cbiAgLy8gVmlzaXQgYSBzaW5nbGUgbm9kZS5cbiAgZnVuY3Rpb24gb25lKG5vZGUsIGluZGV4LCBwYXJlbnRzKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdXG4gICAgdmFyIHN1YnJlc3VsdFxuXG4gICAgaWYgKCF0ZXN0IHx8IGlzKG5vZGUsIGluZGV4LCBwYXJlbnRzW3BhcmVudHMubGVuZ3RoIC0gMV0gfHwgbnVsbCkpIHtcbiAgICAgIHJlc3VsdCA9IHRvUmVzdWx0KHZpc2l0b3Iobm9kZSwgcGFyZW50cykpXG5cbiAgICAgIGlmIChyZXN1bHRbMF0gPT09IEVYSVQpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChub2RlLmNoaWxkcmVuICYmIHJlc3VsdFswXSAhPT0gU0tJUCkge1xuICAgICAgc3VicmVzdWx0ID0gdG9SZXN1bHQoYWxsKG5vZGUuY2hpbGRyZW4sIHBhcmVudHMuY29uY2F0KG5vZGUpKSlcbiAgICAgIHJldHVybiBzdWJyZXN1bHRbMF0gPT09IEVYSVQgPyBzdWJyZXN1bHQgOiByZXN1bHRcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICAvLyBWaXNpdCBjaGlsZHJlbiBpbiBgcGFyZW50YC5cbiAgZnVuY3Rpb24gYWxsKGNoaWxkcmVuLCBwYXJlbnRzKSB7XG4gICAgdmFyIG1pbiA9IC0xXG4gICAgdmFyIHN0ZXAgPSByZXZlcnNlID8gLTEgOiAxXG4gICAgdmFyIGluZGV4ID0gKHJldmVyc2UgPyBjaGlsZHJlbi5sZW5ndGggOiBtaW4pICsgc3RlcFxuICAgIHZhciByZXN1bHRcblxuICAgIHdoaWxlIChpbmRleCA+IG1pbiAmJiBpbmRleCA8IGNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgcmVzdWx0ID0gb25lKGNoaWxkcmVuW2luZGV4XSwgaW5kZXgsIHBhcmVudHMpXG5cbiAgICAgIGlmIChyZXN1bHRbMF0gPT09IEVYSVQpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgfVxuXG4gICAgICBpbmRleCA9IHR5cGVvZiByZXN1bHRbMV0gPT09ICdudW1iZXInID8gcmVzdWx0WzFdIDogaW5kZXggKyBzdGVwXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHRvUmVzdWx0KHZhbHVlKSB7XG4gIGlmICh2YWx1ZSAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBbQ09OVElOVUUsIHZhbHVlXVxuICB9XG5cbiAgcmV0dXJuIFt2YWx1ZV1cbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnZlcnRcblxuZnVuY3Rpb24gY29udmVydCh0ZXN0KSB7XG4gIGlmICh0eXBlb2YgdGVzdCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdHlwZUZhY3RvcnkodGVzdClcbiAgfVxuXG4gIGlmICh0ZXN0ID09PSBudWxsIHx8IHRlc3QgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBva1xuICB9XG5cbiAgaWYgKHR5cGVvZiB0ZXN0ID09PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiAoJ2xlbmd0aCcgaW4gdGVzdCA/IGFueUZhY3RvcnkgOiBtYXRjaGVzRmFjdG9yeSkodGVzdClcbiAgfVxuXG4gIGlmICh0eXBlb2YgdGVzdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiB0ZXN0XG4gIH1cblxuICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGZ1bmN0aW9uLCBzdHJpbmcsIG9yIG9iamVjdCBhcyB0ZXN0Jylcbn1cblxuZnVuY3Rpb24gY29udmVydEFsbCh0ZXN0cykge1xuICB2YXIgcmVzdWx0cyA9IFtdXG4gIHZhciBsZW5ndGggPSB0ZXN0cy5sZW5ndGhcbiAgdmFyIGluZGV4ID0gLTFcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHJlc3VsdHNbaW5kZXhdID0gY29udmVydCh0ZXN0c1tpbmRleF0pXG4gIH1cblxuICByZXR1cm4gcmVzdWx0c1xufVxuXG4vLyBVdGlsaXR5IGFzc2VydCBlYWNoIHByb3BlcnR5IGluIGB0ZXN0YCBpcyByZXByZXNlbnRlZCBpbiBgbm9kZWAsIGFuZCBlYWNoXG4vLyB2YWx1ZXMgYXJlIHN0cmljdGx5IGVxdWFsLlxuZnVuY3Rpb24gbWF0Y2hlc0ZhY3RvcnkodGVzdCkge1xuICByZXR1cm4gbWF0Y2hlc1xuXG4gIGZ1bmN0aW9uIG1hdGNoZXMobm9kZSkge1xuICAgIHZhciBrZXlcblxuICAgIGZvciAoa2V5IGluIHRlc3QpIHtcbiAgICAgIGlmIChub2RlW2tleV0gIT09IHRlc3Rba2V5XSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG59XG5cbmZ1bmN0aW9uIGFueUZhY3RvcnkodGVzdHMpIHtcbiAgdmFyIGNoZWNrcyA9IGNvbnZlcnRBbGwodGVzdHMpXG4gIHZhciBsZW5ndGggPSBjaGVja3MubGVuZ3RoXG5cbiAgcmV0dXJuIG1hdGNoZXNcblxuICBmdW5jdGlvbiBtYXRjaGVzKCkge1xuICAgIHZhciBpbmRleCA9IC0xXG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGNoZWNrc1tpbmRleF0uYXBwbHkodGhpcywgYXJndW1lbnRzKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbi8vIFV0aWxpdHkgdG8gY29udmVydCBhIHN0cmluZyBpbnRvIGEgZnVuY3Rpb24gd2hpY2ggY2hlY2tzIGEgZ2l2ZW4gbm9kZeKAmXMgdHlwZVxuLy8gZm9yIHNhaWQgc3RyaW5nLlxuZnVuY3Rpb24gdHlwZUZhY3RvcnkodGVzdCkge1xuICByZXR1cm4gdHlwZVxuXG4gIGZ1bmN0aW9uIHR5cGUobm9kZSkge1xuICAgIHJldHVybiBCb29sZWFuKG5vZGUgJiYgbm9kZS50eXBlID09PSB0ZXN0KVxuICB9XG59XG5cbi8vIFV0aWxpdHkgdG8gcmV0dXJuIHRydWUuXG5mdW5jdGlvbiBvaygpIHtcbiAgcmV0dXJuIHRydWVcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHdoaXRlc3BhY2UgPSByZXF1aXJlKCdpcy13aGl0ZXNwYWNlLWNoYXJhY3RlcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5ld2xpbmU7XG5cbi8qIFRva2VuaXNlIG5ld2xpbmUuICovXG5mdW5jdGlvbiBuZXdsaW5lKGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICB2YXIgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KDApO1xuICB2YXIgbGVuZ3RoO1xuICB2YXIgc3VidmFsdWU7XG4gIHZhciBxdWV1ZTtcbiAgdmFyIGluZGV4O1xuXG4gIGlmIChjaGFyYWN0ZXIgIT09ICdcXG4nKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmIC0gbmV2ZXIgdXNlZCAoeWV0KSAqL1xuICBpZiAoc2lsZW50KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpbmRleCA9IDE7XG4gIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcbiAgc3VidmFsdWUgPSBjaGFyYWN0ZXI7XG4gIHF1ZXVlID0gJyc7XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmICghd2hpdGVzcGFjZShjaGFyYWN0ZXIpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG5cbiAgICBpZiAoY2hhcmFjdGVyID09PSAnXFxuJykge1xuICAgICAgc3VidmFsdWUgKz0gcXVldWU7XG4gICAgICBxdWV1ZSA9ICcnO1xuICAgIH1cblxuICAgIGluZGV4Kys7XG4gIH1cblxuICBlYXQoc3VidmFsdWUpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVwZWF0ID0gcmVxdWlyZSgncmVwZWF0LXN0cmluZycpO1xudmFyIHRyaW0gPSByZXF1aXJlKCd0cmltLXRyYWlsaW5nLWxpbmVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gaW5kZW50ZWRDb2RlO1xuXG52YXIgQ19ORVdMSU5FID0gJ1xcbic7XG52YXIgQ19UQUIgPSAnXFx0JztcbnZhciBDX1NQQUNFID0gJyAnO1xuXG52YXIgQ09ERV9JTkRFTlRfQ09VTlQgPSA0O1xudmFyIENPREVfSU5ERU5UID0gcmVwZWF0KENfU1BBQ0UsIENPREVfSU5ERU5UX0NPVU5UKTtcblxuLyogVG9rZW5pc2UgaW5kZW50ZWQgY29kZS4gKi9cbmZ1bmN0aW9uIGluZGVudGVkQ29kZShlYXQsIHZhbHVlLCBzaWxlbnQpIHtcbiAgdmFyIGluZGV4ID0gLTE7XG4gIHZhciBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gIHZhciBzdWJ2YWx1ZSA9ICcnO1xuICB2YXIgY29udGVudCA9ICcnO1xuICB2YXIgc3VidmFsdWVRdWV1ZSA9ICcnO1xuICB2YXIgY29udGVudFF1ZXVlID0gJyc7XG4gIHZhciBjaGFyYWN0ZXI7XG4gIHZhciBibGFua1F1ZXVlO1xuICB2YXIgaW5kZW50O1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmIChpbmRlbnQpIHtcbiAgICAgIGluZGVudCA9IGZhbHNlO1xuXG4gICAgICBzdWJ2YWx1ZSArPSBzdWJ2YWx1ZVF1ZXVlO1xuICAgICAgY29udGVudCArPSBjb250ZW50UXVldWU7XG4gICAgICBzdWJ2YWx1ZVF1ZXVlID0gJyc7XG4gICAgICBjb250ZW50UXVldWUgPSAnJztcblxuICAgICAgaWYgKGNoYXJhY3RlciA9PT0gQ19ORVdMSU5FKSB7XG4gICAgICAgIHN1YnZhbHVlUXVldWUgPSBjaGFyYWN0ZXI7XG4gICAgICAgIGNvbnRlbnRRdWV1ZSA9IGNoYXJhY3RlcjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN1YnZhbHVlICs9IGNoYXJhY3RlcjtcbiAgICAgICAgY29udGVudCArPSBjaGFyYWN0ZXI7XG5cbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgICAgICAgaWYgKCFjaGFyYWN0ZXIgfHwgY2hhcmFjdGVyID09PSBDX05FV0xJTkUpIHtcbiAgICAgICAgICAgIGNvbnRlbnRRdWV1ZSA9IGNoYXJhY3RlcjtcbiAgICAgICAgICAgIHN1YnZhbHVlUXVldWUgPSBjaGFyYWN0ZXI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzdWJ2YWx1ZSArPSBjaGFyYWN0ZXI7XG4gICAgICAgICAgY29udGVudCArPSBjaGFyYWN0ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKFxuICAgICAgY2hhcmFjdGVyID09PSBDX1NQQUNFICYmXG4gICAgICB2YWx1ZS5jaGFyQXQoaW5kZXggKyAxKSA9PT0gY2hhcmFjdGVyICYmXG4gICAgICB2YWx1ZS5jaGFyQXQoaW5kZXggKyAyKSA9PT0gY2hhcmFjdGVyICYmXG4gICAgICB2YWx1ZS5jaGFyQXQoaW5kZXggKyAzKSA9PT0gY2hhcmFjdGVyXG4gICAgKSB7XG4gICAgICBzdWJ2YWx1ZVF1ZXVlICs9IENPREVfSU5ERU5UO1xuICAgICAgaW5kZXggKz0gMztcbiAgICAgIGluZGVudCA9IHRydWU7XG4gICAgfSBlbHNlIGlmIChjaGFyYWN0ZXIgPT09IENfVEFCKSB7XG4gICAgICBzdWJ2YWx1ZVF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgIGluZGVudCA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJsYW5rUXVldWUgPSAnJztcblxuICAgICAgd2hpbGUgKGNoYXJhY3RlciA9PT0gQ19UQUIgfHwgY2hhcmFjdGVyID09PSBDX1NQQUNFKSB7XG4gICAgICAgIGJsYW5rUXVldWUgKz0gY2hhcmFjdGVyO1xuICAgICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoKytpbmRleCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGFyYWN0ZXIgIT09IENfTkVXTElORSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgc3VidmFsdWVRdWV1ZSArPSBibGFua1F1ZXVlICsgY2hhcmFjdGVyO1xuICAgICAgY29udGVudFF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICB9XG4gIH1cblxuICBpZiAoY29udGVudCkge1xuICAgIGlmIChzaWxlbnQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBlYXQoc3VidmFsdWUpKHtcbiAgICAgIHR5cGU6ICdjb2RlJyxcbiAgICAgIGxhbmc6IG51bGwsXG4gICAgICB2YWx1ZTogdHJpbShjb250ZW50KVxuICAgIH0pO1xuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB0cmltID0gcmVxdWlyZSgndHJpbS10cmFpbGluZy1saW5lcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZlbmNlZENvZGU7XG5cbnZhciBDX05FV0xJTkUgPSAnXFxuJztcbnZhciBDX1RBQiA9ICdcXHQnO1xudmFyIENfU1BBQ0UgPSAnICc7XG52YXIgQ19USUxERSA9ICd+JztcbnZhciBDX1RJQ0sgPSAnYCc7XG5cbnZhciBNSU5fRkVOQ0VfQ09VTlQgPSAzO1xudmFyIENPREVfSU5ERU5UX0NPVU5UID0gNDtcblxuZnVuY3Rpb24gZmVuY2VkQ29kZShlYXQsIHZhbHVlLCBzaWxlbnQpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgc2V0dGluZ3MgPSBzZWxmLm9wdGlvbnM7XG4gIHZhciBsZW5ndGggPSB2YWx1ZS5sZW5ndGggKyAxO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgc3VidmFsdWUgPSAnJztcbiAgdmFyIGZlbmNlQ291bnQ7XG4gIHZhciBtYXJrZXI7XG4gIHZhciBjaGFyYWN0ZXI7XG4gIHZhciBmbGFnO1xuICB2YXIgcXVldWU7XG4gIHZhciBjb250ZW50O1xuICB2YXIgZXhkZW50ZWRDb250ZW50O1xuICB2YXIgY2xvc2luZztcbiAgdmFyIGV4ZGVudGVkQ2xvc2luZztcbiAgdmFyIGluZGVudDtcbiAgdmFyIG5vdztcblxuICBpZiAoIXNldHRpbmdzLmdmbSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qIEVhdCBpbml0aWFsIHNwYWNpbmcuICovXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoY2hhcmFjdGVyICE9PSBDX1NQQUNFICYmIGNoYXJhY3RlciAhPT0gQ19UQUIpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHN1YnZhbHVlICs9IGNoYXJhY3RlcjtcbiAgICBpbmRleCsrO1xuICB9XG5cbiAgaW5kZW50ID0gaW5kZXg7XG5cbiAgLyogRWF0IHRoZSBmZW5jZS4gKi9cbiAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICBpZiAoY2hhcmFjdGVyICE9PSBDX1RJTERFICYmIGNoYXJhY3RlciAhPT0gQ19USUNLKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaW5kZXgrKztcbiAgbWFya2VyID0gY2hhcmFjdGVyO1xuICBmZW5jZUNvdW50ID0gMTtcbiAgc3VidmFsdWUgKz0gY2hhcmFjdGVyO1xuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoY2hhcmFjdGVyICE9PSBtYXJrZXIpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHN1YnZhbHVlICs9IGNoYXJhY3RlcjtcbiAgICBmZW5jZUNvdW50Kys7XG4gICAgaW5kZXgrKztcbiAgfVxuXG4gIGlmIChmZW5jZUNvdW50IDwgTUlOX0ZFTkNFX0NPVU5UKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyogRWF0IHNwYWNpbmcgYmVmb3JlIGZsYWcuICovXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoY2hhcmFjdGVyICE9PSBDX1NQQUNFICYmIGNoYXJhY3RlciAhPT0gQ19UQUIpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHN1YnZhbHVlICs9IGNoYXJhY3RlcjtcbiAgICBpbmRleCsrO1xuICB9XG5cbiAgLyogRWF0IGZsYWcuICovXG4gIGZsYWcgPSAnJztcbiAgcXVldWUgPSAnJztcblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKFxuICAgICAgY2hhcmFjdGVyID09PSBDX05FV0xJTkUgfHxcbiAgICAgIGNoYXJhY3RlciA9PT0gQ19USUxERSB8fFxuICAgICAgY2hhcmFjdGVyID09PSBDX1RJQ0tcbiAgICApIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlmIChjaGFyYWN0ZXIgPT09IENfU1BBQ0UgfHwgY2hhcmFjdGVyID09PSBDX1RBQikge1xuICAgICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgIH0gZWxzZSB7XG4gICAgICBmbGFnICs9IHF1ZXVlICsgY2hhcmFjdGVyO1xuICAgICAgcXVldWUgPSAnJztcbiAgICB9XG5cbiAgICBpbmRleCsrO1xuICB9XG5cbiAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICBpZiAoY2hhcmFjdGVyICYmIGNoYXJhY3RlciAhPT0gQ19ORVdMSU5FKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHNpbGVudCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgbm93ID0gZWF0Lm5vdygpO1xuICBub3cuY29sdW1uICs9IHN1YnZhbHVlLmxlbmd0aDtcbiAgbm93Lm9mZnNldCArPSBzdWJ2YWx1ZS5sZW5ndGg7XG5cbiAgc3VidmFsdWUgKz0gZmxhZztcbiAgZmxhZyA9IHNlbGYuZGVjb2RlLnJhdyhzZWxmLnVuZXNjYXBlKGZsYWcpLCBub3cpO1xuXG4gIGlmIChxdWV1ZSkge1xuICAgIHN1YnZhbHVlICs9IHF1ZXVlO1xuICB9XG5cbiAgcXVldWUgPSAnJztcbiAgY2xvc2luZyA9ICcnO1xuICBleGRlbnRlZENsb3NpbmcgPSAnJztcbiAgY29udGVudCA9ICcnO1xuICBleGRlbnRlZENvbnRlbnQgPSAnJztcblxuICAvKiBFYXQgY29udGVudC4gKi9cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcbiAgICBjb250ZW50ICs9IGNsb3Npbmc7XG4gICAgZXhkZW50ZWRDb250ZW50ICs9IGV4ZGVudGVkQ2xvc2luZztcbiAgICBjbG9zaW5nID0gJyc7XG4gICAgZXhkZW50ZWRDbG9zaW5nID0gJyc7XG5cbiAgICBpZiAoY2hhcmFjdGVyICE9PSBDX05FV0xJTkUpIHtcbiAgICAgIGNvbnRlbnQgKz0gY2hhcmFjdGVyO1xuICAgICAgZXhkZW50ZWRDbG9zaW5nICs9IGNoYXJhY3RlcjtcbiAgICAgIGluZGV4Kys7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvKiBBZGQgdGhlIG5ld2xpbmUgdG8gYHN1YnZhbHVlYCBpZiBpdHMgdGhlIGZpcnN0XG4gICAgICogY2hhcmFjdGVyLiAgT3RoZXJ3aXNlLCBhZGQgaXQgdG8gdGhlIGBjbG9zaW5nYFxuICAgICAqIHF1ZXVlLiAqL1xuICAgIGlmIChjb250ZW50KSB7XG4gICAgICBjbG9zaW5nICs9IGNoYXJhY3RlcjtcbiAgICAgIGV4ZGVudGVkQ2xvc2luZyArPSBjaGFyYWN0ZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN1YnZhbHVlICs9IGNoYXJhY3RlcjtcbiAgICB9XG5cbiAgICBxdWV1ZSA9ICcnO1xuICAgIGluZGV4Kys7XG5cbiAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICAgIGlmIChjaGFyYWN0ZXIgIT09IENfU1BBQ0UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgIGluZGV4Kys7XG4gICAgfVxuXG4gICAgY2xvc2luZyArPSBxdWV1ZTtcbiAgICBleGRlbnRlZENsb3NpbmcgKz0gcXVldWUuc2xpY2UoaW5kZW50KTtcblxuICAgIGlmIChxdWV1ZS5sZW5ndGggPj0gQ09ERV9JTkRFTlRfQ09VTlQpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHF1ZXVlID0gJyc7XG5cbiAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICAgIGlmIChjaGFyYWN0ZXIgIT09IG1hcmtlcikge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgICAgaW5kZXgrKztcbiAgICB9XG5cbiAgICBjbG9zaW5nICs9IHF1ZXVlO1xuICAgIGV4ZGVudGVkQ2xvc2luZyArPSBxdWV1ZTtcblxuICAgIGlmIChxdWV1ZS5sZW5ndGggPCBmZW5jZUNvdW50KSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBxdWV1ZSA9ICcnO1xuXG4gICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgICBpZiAoY2hhcmFjdGVyICE9PSBDX1NQQUNFICYmIGNoYXJhY3RlciAhPT0gQ19UQUIpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGNsb3NpbmcgKz0gY2hhcmFjdGVyO1xuICAgICAgZXhkZW50ZWRDbG9zaW5nICs9IGNoYXJhY3RlcjtcbiAgICAgIGluZGV4Kys7XG4gICAgfVxuXG4gICAgaWYgKCFjaGFyYWN0ZXIgfHwgY2hhcmFjdGVyID09PSBDX05FV0xJTkUpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHN1YnZhbHVlICs9IGNvbnRlbnQgKyBjbG9zaW5nO1xuXG4gIHJldHVybiBlYXQoc3VidmFsdWUpKHtcbiAgICB0eXBlOiAnY29kZScsXG4gICAgbGFuZzogZmxhZyB8fCBudWxsLFxuICAgIHZhbHVlOiB0cmltKGV4ZGVudGVkQ29udGVudClcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB0cmltID0gcmVxdWlyZSgndHJpbScpO1xudmFyIGludGVycnVwdCA9IHJlcXVpcmUoJy4uL3V0aWwvaW50ZXJydXB0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYmxvY2txdW90ZTtcblxudmFyIENfTkVXTElORSA9ICdcXG4nO1xudmFyIENfVEFCID0gJ1xcdCc7XG52YXIgQ19TUEFDRSA9ICcgJztcbnZhciBDX0dUID0gJz4nO1xuXG4vKiBUb2tlbmlzZSBhIGJsb2NrcXVvdGUuICovXG5mdW5jdGlvbiBibG9ja3F1b3RlKGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBvZmZzZXRzID0gc2VsZi5vZmZzZXQ7XG4gIHZhciB0b2tlbml6ZXJzID0gc2VsZi5ibG9ja1Rva2VuaXplcnM7XG4gIHZhciBpbnRlcnJ1cHRvcnMgPSBzZWxmLmludGVycnVwdEJsb2NrcXVvdGU7XG4gIHZhciBub3cgPSBlYXQubm93KCk7XG4gIHZhciBjdXJyZW50TGluZSA9IG5vdy5saW5lO1xuICB2YXIgbGVuZ3RoID0gdmFsdWUubGVuZ3RoO1xuICB2YXIgdmFsdWVzID0gW107XG4gIHZhciBjb250ZW50cyA9IFtdO1xuICB2YXIgaW5kZW50cyA9IFtdO1xuICB2YXIgYWRkO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgY2hhcmFjdGVyO1xuICB2YXIgcmVzdDtcbiAgdmFyIG5leHRJbmRleDtcbiAgdmFyIGNvbnRlbnQ7XG4gIHZhciBsaW5lO1xuICB2YXIgc3RhcnRJbmRleDtcbiAgdmFyIHByZWZpeGVkO1xuICB2YXIgZXhpdDtcblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKGNoYXJhY3RlciAhPT0gQ19TUEFDRSAmJiBjaGFyYWN0ZXIgIT09IENfVEFCKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpbmRleCsrO1xuICB9XG5cbiAgaWYgKHZhbHVlLmNoYXJBdChpbmRleCkgIT09IENfR1QpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoc2lsZW50KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpbmRleCA9IDA7XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgbmV4dEluZGV4ID0gdmFsdWUuaW5kZXhPZihDX05FV0xJTkUsIGluZGV4KTtcbiAgICBzdGFydEluZGV4ID0gaW5kZXg7XG4gICAgcHJlZml4ZWQgPSBmYWxzZTtcblxuICAgIGlmIChuZXh0SW5kZXggPT09IC0xKSB7XG4gICAgICBuZXh0SW5kZXggPSBsZW5ndGg7XG4gICAgfVxuXG4gICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgICBpZiAoY2hhcmFjdGVyICE9PSBDX1NQQUNFICYmIGNoYXJhY3RlciAhPT0gQ19UQUIpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGluZGV4Kys7XG4gICAgfVxuXG4gICAgaWYgKHZhbHVlLmNoYXJBdChpbmRleCkgPT09IENfR1QpIHtcbiAgICAgIGluZGV4Kys7XG4gICAgICBwcmVmaXhlZCA9IHRydWU7XG5cbiAgICAgIGlmICh2YWx1ZS5jaGFyQXQoaW5kZXgpID09PSBDX1NQQUNFKSB7XG4gICAgICAgIGluZGV4Kys7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGluZGV4ID0gc3RhcnRJbmRleDtcbiAgICB9XG5cbiAgICBjb250ZW50ID0gdmFsdWUuc2xpY2UoaW5kZXgsIG5leHRJbmRleCk7XG5cbiAgICBpZiAoIXByZWZpeGVkICYmICF0cmltKGNvbnRlbnQpKSB7XG4gICAgICBpbmRleCA9IHN0YXJ0SW5kZXg7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpZiAoIXByZWZpeGVkKSB7XG4gICAgICByZXN0ID0gdmFsdWUuc2xpY2UoaW5kZXgpO1xuXG4gICAgICAvKiBDaGVjayBpZiB0aGUgZm9sbG93aW5nIGNvZGUgY29udGFpbnMgYSBwb3NzaWJsZVxuICAgICAgICogYmxvY2suICovXG4gICAgICBpZiAoaW50ZXJydXB0KGludGVycnVwdG9ycywgdG9rZW5pemVycywgc2VsZiwgW2VhdCwgcmVzdCwgdHJ1ZV0pKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxpbmUgPSBzdGFydEluZGV4ID09PSBpbmRleCA/IGNvbnRlbnQgOiB2YWx1ZS5zbGljZShzdGFydEluZGV4LCBuZXh0SW5kZXgpO1xuXG4gICAgaW5kZW50cy5wdXNoKGluZGV4IC0gc3RhcnRJbmRleCk7XG4gICAgdmFsdWVzLnB1c2gobGluZSk7XG4gICAgY29udGVudHMucHVzaChjb250ZW50KTtcblxuICAgIGluZGV4ID0gbmV4dEluZGV4ICsgMTtcbiAgfVxuXG4gIGluZGV4ID0gLTE7XG4gIGxlbmd0aCA9IGluZGVudHMubGVuZ3RoO1xuICBhZGQgPSBlYXQodmFsdWVzLmpvaW4oQ19ORVdMSU5FKSk7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBvZmZzZXRzW2N1cnJlbnRMaW5lXSA9IChvZmZzZXRzW2N1cnJlbnRMaW5lXSB8fCAwKSArIGluZGVudHNbaW5kZXhdO1xuICAgIGN1cnJlbnRMaW5lKys7XG4gIH1cblxuICBleGl0ID0gc2VsZi5lbnRlckJsb2NrKCk7XG4gIGNvbnRlbnRzID0gc2VsZi50b2tlbml6ZUJsb2NrKGNvbnRlbnRzLmpvaW4oQ19ORVdMSU5FKSwgbm93KTtcbiAgZXhpdCgpO1xuXG4gIHJldHVybiBhZGQoe1xuICAgIHR5cGU6ICdibG9ja3F1b3RlJyxcbiAgICBjaGlsZHJlbjogY29udGVudHNcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gYXR4SGVhZGluZztcblxudmFyIENfTkVXTElORSA9ICdcXG4nO1xudmFyIENfVEFCID0gJ1xcdCc7XG52YXIgQ19TUEFDRSA9ICcgJztcbnZhciBDX0hBU0ggPSAnIyc7XG5cbnZhciBNQVhfQVRYX0NPVU5UID0gNjtcblxuZnVuY3Rpb24gYXR4SGVhZGluZyhlYXQsIHZhbHVlLCBzaWxlbnQpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgc2V0dGluZ3MgPSBzZWxmLm9wdGlvbnM7XG4gIHZhciBsZW5ndGggPSB2YWx1ZS5sZW5ndGggKyAxO1xuICB2YXIgaW5kZXggPSAtMTtcbiAgdmFyIG5vdyA9IGVhdC5ub3coKTtcbiAgdmFyIHN1YnZhbHVlID0gJyc7XG4gIHZhciBjb250ZW50ID0gJyc7XG4gIHZhciBjaGFyYWN0ZXI7XG4gIHZhciBxdWV1ZTtcbiAgdmFyIGRlcHRoO1xuXG4gIC8qIEVhdCBpbml0aWFsIHNwYWNpbmcuICovXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmIChjaGFyYWN0ZXIgIT09IENfU1BBQ0UgJiYgY2hhcmFjdGVyICE9PSBDX1RBQikge1xuICAgICAgaW5kZXgtLTtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHN1YnZhbHVlICs9IGNoYXJhY3RlcjtcbiAgfVxuXG4gIC8qIEVhdCBoYXNoZXMuICovXG4gIGRlcHRoID0gMDtcblxuICB3aGlsZSAoKytpbmRleCA8PSBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKGNoYXJhY3RlciAhPT0gQ19IQVNIKSB7XG4gICAgICBpbmRleC0tO1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgc3VidmFsdWUgKz0gY2hhcmFjdGVyO1xuICAgIGRlcHRoKys7XG4gIH1cblxuICBpZiAoZGVwdGggPiBNQVhfQVRYX0NPVU5UKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKFxuICAgICFkZXB0aCB8fFxuICAgICghc2V0dGluZ3MucGVkYW50aWMgJiYgdmFsdWUuY2hhckF0KGluZGV4ICsgMSkgPT09IENfSEFTSClcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGVuZ3RoID0gdmFsdWUubGVuZ3RoICsgMTtcblxuICAvKiBFYXQgaW50ZXJtZWRpYXRlIHdoaXRlLXNwYWNlLiAqL1xuICBxdWV1ZSA9ICcnO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmIChjaGFyYWN0ZXIgIT09IENfU1BBQ0UgJiYgY2hhcmFjdGVyICE9PSBDX1RBQikge1xuICAgICAgaW5kZXgtLTtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgfVxuXG4gIC8qIEV4aXQgd2hlbiBub3QgaW4gcGVkYW50aWMgbW9kZSB3aXRob3V0IHNwYWNpbmcuICovXG4gIGlmIChcbiAgICAhc2V0dGluZ3MucGVkYW50aWMgJiZcbiAgICBxdWV1ZS5sZW5ndGggPT09IDAgJiZcbiAgICBjaGFyYWN0ZXIgJiZcbiAgICBjaGFyYWN0ZXIgIT09IENfTkVXTElORVxuICApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoc2lsZW50KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKiBFYXQgY29udGVudC4gKi9cbiAgc3VidmFsdWUgKz0gcXVldWU7XG4gIHF1ZXVlID0gJyc7XG4gIGNvbnRlbnQgPSAnJztcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoIWNoYXJhY3RlciB8fCBjaGFyYWN0ZXIgPT09IENfTkVXTElORSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgY2hhcmFjdGVyICE9PSBDX1NQQUNFICYmXG4gICAgICBjaGFyYWN0ZXIgIT09IENfVEFCICYmXG4gICAgICBjaGFyYWN0ZXIgIT09IENfSEFTSFxuICAgICkge1xuICAgICAgY29udGVudCArPSBxdWV1ZSArIGNoYXJhY3RlcjtcbiAgICAgIHF1ZXVlID0gJyc7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICB3aGlsZSAoY2hhcmFjdGVyID09PSBDX1NQQUNFIHx8IGNoYXJhY3RlciA9PT0gQ19UQUIpIHtcbiAgICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdCgrK2luZGV4KTtcbiAgICB9XG5cbiAgICB3aGlsZSAoY2hhcmFjdGVyID09PSBDX0hBU0gpIHtcbiAgICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdCgrK2luZGV4KTtcbiAgICB9XG5cbiAgICB3aGlsZSAoY2hhcmFjdGVyID09PSBDX1NQQUNFIHx8IGNoYXJhY3RlciA9PT0gQ19UQUIpIHtcbiAgICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdCgrK2luZGV4KTtcbiAgICB9XG5cbiAgICBpbmRleC0tO1xuICB9XG5cbiAgbm93LmNvbHVtbiArPSBzdWJ2YWx1ZS5sZW5ndGg7XG4gIG5vdy5vZmZzZXQgKz0gc3VidmFsdWUubGVuZ3RoO1xuICBzdWJ2YWx1ZSArPSBjb250ZW50ICsgcXVldWU7XG5cbiAgcmV0dXJuIGVhdChzdWJ2YWx1ZSkoe1xuICAgIHR5cGU6ICdoZWFkaW5nJyxcbiAgICBkZXB0aDogZGVwdGgsXG4gICAgY2hpbGRyZW46IHNlbGYudG9rZW5pemVJbmxpbmUoY29udGVudCwgbm93KVxuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB0aGVtYXRpY0JyZWFrO1xuXG52YXIgQ19ORVdMSU5FID0gJ1xcbic7XG52YXIgQ19UQUIgPSAnXFx0JztcbnZhciBDX1NQQUNFID0gJyAnO1xudmFyIENfQVNURVJJU0sgPSAnKic7XG52YXIgQ19VTkRFUlNDT1JFID0gJ18nO1xudmFyIENfREFTSCA9ICctJztcblxudmFyIFRIRU1BVElDX0JSRUFLX01BUktFUl9DT1VOVCA9IDM7XG5cbmZ1bmN0aW9uIHRoZW1hdGljQnJlYWsoZWF0LCB2YWx1ZSwgc2lsZW50KSB7XG4gIHZhciBpbmRleCA9IC0xO1xuICB2YXIgbGVuZ3RoID0gdmFsdWUubGVuZ3RoICsgMTtcbiAgdmFyIHN1YnZhbHVlID0gJyc7XG4gIHZhciBjaGFyYWN0ZXI7XG4gIHZhciBtYXJrZXI7XG4gIHZhciBtYXJrZXJDb3VudDtcbiAgdmFyIHF1ZXVlO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmIChjaGFyYWN0ZXIgIT09IENfVEFCICYmIGNoYXJhY3RlciAhPT0gQ19TUEFDRSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgc3VidmFsdWUgKz0gY2hhcmFjdGVyO1xuICB9XG5cbiAgaWYgKFxuICAgIGNoYXJhY3RlciAhPT0gQ19BU1RFUklTSyAmJlxuICAgIGNoYXJhY3RlciAhPT0gQ19EQVNIICYmXG4gICAgY2hhcmFjdGVyICE9PSBDX1VOREVSU0NPUkVcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbWFya2VyID0gY2hhcmFjdGVyO1xuICBzdWJ2YWx1ZSArPSBjaGFyYWN0ZXI7XG4gIG1hcmtlckNvdW50ID0gMTtcbiAgcXVldWUgPSAnJztcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoY2hhcmFjdGVyID09PSBtYXJrZXIpIHtcbiAgICAgIG1hcmtlckNvdW50Kys7XG4gICAgICBzdWJ2YWx1ZSArPSBxdWV1ZSArIG1hcmtlcjtcbiAgICAgIHF1ZXVlID0gJyc7XG4gICAgfSBlbHNlIGlmIChjaGFyYWN0ZXIgPT09IENfU1BBQ0UpIHtcbiAgICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgbWFya2VyQ291bnQgPj0gVEhFTUFUSUNfQlJFQUtfTUFSS0VSX0NPVU5UICYmXG4gICAgICAoIWNoYXJhY3RlciB8fCBjaGFyYWN0ZXIgPT09IENfTkVXTElORSlcbiAgICApIHtcbiAgICAgIHN1YnZhbHVlICs9IHF1ZXVlO1xuXG4gICAgICBpZiAoc2lsZW50KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZWF0KHN1YnZhbHVlKSh7dHlwZTogJ3RoZW1hdGljQnJlYWsnfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuLyogZXNsaW50LWRpc2FibGUgbWF4LXBhcmFtcyAqL1xuXG52YXIgdHJpbSA9IHJlcXVpcmUoJ3RyaW0nKTtcbnZhciByZXBlYXQgPSByZXF1aXJlKCdyZXBlYXQtc3RyaW5nJyk7XG52YXIgZGVjaW1hbCA9IHJlcXVpcmUoJ2lzLWRlY2ltYWwnKTtcbnZhciBnZXRJbmRlbnQgPSByZXF1aXJlKCcuLi91dGlsL2dldC1pbmRlbnRhdGlvbicpO1xudmFyIHJlbW92ZUluZGVudCA9IHJlcXVpcmUoJy4uL3V0aWwvcmVtb3ZlLWluZGVudGF0aW9uJyk7XG52YXIgaW50ZXJydXB0ID0gcmVxdWlyZSgnLi4vdXRpbC9pbnRlcnJ1cHQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0O1xuXG52YXIgQ19BU1RFUklTSyA9ICcqJztcbnZhciBDX1VOREVSU0NPUkUgPSAnXyc7XG52YXIgQ19QTFVTID0gJysnO1xudmFyIENfREFTSCA9ICctJztcbnZhciBDX0RPVCA9ICcuJztcbnZhciBDX1NQQUNFID0gJyAnO1xudmFyIENfTkVXTElORSA9ICdcXG4nO1xudmFyIENfVEFCID0gJ1xcdCc7XG52YXIgQ19QQVJFTl9DTE9TRSA9ICcpJztcbnZhciBDX1hfTE9XRVIgPSAneCc7XG5cbnZhciBUQUJfU0laRSA9IDQ7XG52YXIgRVhQUkVTU0lPTl9MT09TRV9MSVNUX0lURU0gPSAvXFxuXFxuKD8hXFxzKiQpLztcbnZhciBFWFBSRVNTSU9OX1RBU0tfSVRFTSA9IC9eXFxbKFsgXFx0XXx4fFgpXVsgXFx0XS87XG52YXIgRVhQUkVTU0lPTl9CVUxMRVQgPSAvXihbIFxcdF0qKShbKistXXxcXGQrWy4pXSkoIHsxLDR9KD8hICl8IHxcXHR8JHwoPz1cXG4pKShbXlxcbl0qKS87XG52YXIgRVhQUkVTU0lPTl9QRURBTlRJQ19CVUxMRVQgPSAvXihbIFxcdF0qKShbKistXXxcXGQrWy4pXSkoWyBcXHRdKykvO1xudmFyIEVYUFJFU1NJT05fSU5JVElBTF9JTkRFTlQgPSAvXiggezEsNH18XFx0KT8vZ207XG5cbi8qIE1hcCBvZiBjaGFyYWN0ZXJzIHdoaWNoIGNhbiBiZSB1c2VkIHRvIG1hcmtcbiAqIGxpc3QtaXRlbXMuICovXG52YXIgTElTVF9VTk9SREVSRURfTUFSS0VSUyA9IHt9O1xuXG5MSVNUX1VOT1JERVJFRF9NQVJLRVJTW0NfQVNURVJJU0tdID0gdHJ1ZTtcbkxJU1RfVU5PUkRFUkVEX01BUktFUlNbQ19QTFVTXSA9IHRydWU7XG5MSVNUX1VOT1JERVJFRF9NQVJLRVJTW0NfREFTSF0gPSB0cnVlO1xuXG4vKiBNYXAgb2YgY2hhcmFjdGVycyB3aGljaCBjYW4gYmUgdXNlZCB0byBtYXJrXG4gKiBsaXN0LWl0ZW1zIGFmdGVyIGEgZGlnaXQuICovXG52YXIgTElTVF9PUkRFUkVEX01BUktFUlMgPSB7fTtcblxuTElTVF9PUkRFUkVEX01BUktFUlNbQ19ET1RdID0gdHJ1ZTtcblxuLyogTWFwIG9mIGNoYXJhY3RlcnMgd2hpY2ggY2FuIGJlIHVzZWQgdG8gbWFya1xuICogbGlzdC1pdGVtcyBhZnRlciBhIGRpZ2l0LiAqL1xudmFyIExJU1RfT1JERVJFRF9DT01NT05NQVJLX01BUktFUlMgPSB7fTtcblxuTElTVF9PUkRFUkVEX0NPTU1PTk1BUktfTUFSS0VSU1tDX0RPVF0gPSB0cnVlO1xuTElTVF9PUkRFUkVEX0NPTU1PTk1BUktfTUFSS0VSU1tDX1BBUkVOX0NMT1NFXSA9IHRydWU7XG5cbmZ1bmN0aW9uIGxpc3QoZWF0LCB2YWx1ZSwgc2lsZW50KSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIGNvbW1vbm1hcmsgPSBzZWxmLm9wdGlvbnMuY29tbW9ubWFyaztcbiAgdmFyIHBlZGFudGljID0gc2VsZi5vcHRpb25zLnBlZGFudGljO1xuICB2YXIgdG9rZW5pemVycyA9IHNlbGYuYmxvY2tUb2tlbml6ZXJzO1xuICB2YXIgaW50ZXJ1cHRvcnMgPSBzZWxmLmludGVycnVwdExpc3Q7XG4gIHZhciBtYXJrZXJzO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoID0gdmFsdWUubGVuZ3RoO1xuICB2YXIgc3RhcnQgPSBudWxsO1xuICB2YXIgc2l6ZSA9IDA7XG4gIHZhciBxdWV1ZTtcbiAgdmFyIG9yZGVyZWQ7XG4gIHZhciBjaGFyYWN0ZXI7XG4gIHZhciBtYXJrZXI7XG4gIHZhciBuZXh0SW5kZXg7XG4gIHZhciBzdGFydEluZGV4O1xuICB2YXIgcHJlZml4ZWQ7XG4gIHZhciBjdXJyZW50TWFya2VyO1xuICB2YXIgY29udGVudDtcbiAgdmFyIGxpbmU7XG4gIHZhciBwcmV2RW1wdHk7XG4gIHZhciBlbXB0eTtcbiAgdmFyIGl0ZW1zO1xuICB2YXIgYWxsTGluZXM7XG4gIHZhciBlbXB0eUxpbmVzO1xuICB2YXIgaXRlbTtcbiAgdmFyIGVudGVyVG9wO1xuICB2YXIgZXhpdEJsb2NrcXVvdGU7XG4gIHZhciBpc0xvb3NlO1xuICB2YXIgbm9kZTtcbiAgdmFyIG5vdztcbiAgdmFyIGVuZDtcbiAgdmFyIGluZGVudGVkO1xuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoY2hhcmFjdGVyID09PSBDX1RBQikge1xuICAgICAgc2l6ZSArPSBUQUJfU0laRSAtIChzaXplICUgVEFCX1NJWkUpO1xuICAgIH0gZWxzZSBpZiAoY2hhcmFjdGVyID09PSBDX1NQQUNFKSB7XG4gICAgICBzaXplKys7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGluZGV4Kys7XG4gIH1cblxuICBpZiAoc2l6ZSA+PSBUQUJfU0laRSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgbWFya2VycyA9IGNvbW1vbm1hcmsgP1xuICAgIExJU1RfT1JERVJFRF9DT01NT05NQVJLX01BUktFUlMgOlxuICAgIExJU1RfT1JERVJFRF9NQVJLRVJTO1xuXG4gIGlmIChMSVNUX1VOT1JERVJFRF9NQVJLRVJTW2NoYXJhY3Rlcl0gPT09IHRydWUpIHtcbiAgICBtYXJrZXIgPSBjaGFyYWN0ZXI7XG4gICAgb3JkZXJlZCA9IGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIG9yZGVyZWQgPSB0cnVlO1xuICAgIHF1ZXVlID0gJyc7XG5cbiAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICAgIGlmICghZGVjaW1hbChjaGFyYWN0ZXIpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgICBpbmRleCsrO1xuICAgIH1cblxuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoIXF1ZXVlIHx8IG1hcmtlcnNbY2hhcmFjdGVyXSAhPT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN0YXJ0ID0gcGFyc2VJbnQocXVldWUsIDEwKTtcbiAgICBtYXJrZXIgPSBjaGFyYWN0ZXI7XG4gIH1cblxuICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoKytpbmRleCk7XG5cbiAgaWYgKGNoYXJhY3RlciAhPT0gQ19TUEFDRSAmJiBjaGFyYWN0ZXIgIT09IENfVEFCKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHNpbGVudCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaW5kZXggPSAwO1xuICBpdGVtcyA9IFtdO1xuICBhbGxMaW5lcyA9IFtdO1xuICBlbXB0eUxpbmVzID0gW107XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgbmV4dEluZGV4ID0gdmFsdWUuaW5kZXhPZihDX05FV0xJTkUsIGluZGV4KTtcbiAgICBzdGFydEluZGV4ID0gaW5kZXg7XG4gICAgcHJlZml4ZWQgPSBmYWxzZTtcbiAgICBpbmRlbnRlZCA9IGZhbHNlO1xuXG4gICAgaWYgKG5leHRJbmRleCA9PT0gLTEpIHtcbiAgICAgIG5leHRJbmRleCA9IGxlbmd0aDtcbiAgICB9XG5cbiAgICBlbmQgPSBpbmRleCArIFRBQl9TSVpFO1xuICAgIHNpemUgPSAwO1xuXG4gICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgICBpZiAoY2hhcmFjdGVyID09PSBDX1RBQikge1xuICAgICAgICBzaXplICs9IFRBQl9TSVpFIC0gKHNpemUgJSBUQUJfU0laRSk7XG4gICAgICB9IGVsc2UgaWYgKGNoYXJhY3RlciA9PT0gQ19TUEFDRSkge1xuICAgICAgICBzaXplKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaW5kZXgrKztcbiAgICB9XG5cbiAgICBpZiAoc2l6ZSA+PSBUQUJfU0laRSkge1xuICAgICAgaW5kZW50ZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChpdGVtICYmIHNpemUgPj0gaXRlbS5pbmRlbnQpIHtcbiAgICAgIGluZGVudGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuICAgIGN1cnJlbnRNYXJrZXIgPSBudWxsO1xuXG4gICAgaWYgKCFpbmRlbnRlZCkge1xuICAgICAgaWYgKExJU1RfVU5PUkRFUkVEX01BUktFUlNbY2hhcmFjdGVyXSA9PT0gdHJ1ZSkge1xuICAgICAgICBjdXJyZW50TWFya2VyID0gY2hhcmFjdGVyO1xuICAgICAgICBpbmRleCsrO1xuICAgICAgICBzaXplKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZSA9ICcnO1xuXG4gICAgICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICAgICAgICBpZiAoIWRlY2ltYWwoY2hhcmFjdGVyKSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgICAgICAgIGluZGV4Kys7XG4gICAgICAgIH1cblxuICAgICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuICAgICAgICBpbmRleCsrO1xuXG4gICAgICAgIGlmIChxdWV1ZSAmJiBtYXJrZXJzW2NoYXJhY3Rlcl0gPT09IHRydWUpIHtcbiAgICAgICAgICBjdXJyZW50TWFya2VyID0gY2hhcmFjdGVyO1xuICAgICAgICAgIHNpemUgKz0gcXVldWUubGVuZ3RoICsgMTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoY3VycmVudE1hcmtlcikge1xuICAgICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgICAgIGlmIChjaGFyYWN0ZXIgPT09IENfVEFCKSB7XG4gICAgICAgICAgc2l6ZSArPSBUQUJfU0laRSAtIChzaXplICUgVEFCX1NJWkUpO1xuICAgICAgICAgIGluZGV4Kys7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hhcmFjdGVyID09PSBDX1NQQUNFKSB7XG4gICAgICAgICAgZW5kID0gaW5kZXggKyBUQUJfU0laRTtcblxuICAgICAgICAgIHdoaWxlIChpbmRleCA8IGVuZCkge1xuICAgICAgICAgICAgaWYgKHZhbHVlLmNoYXJBdChpbmRleCkgIT09IENfU1BBQ0UpIHtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGluZGV4Kys7XG4gICAgICAgICAgICBzaXplKys7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGluZGV4ID09PSBlbmQgJiYgdmFsdWUuY2hhckF0KGluZGV4KSA9PT0gQ19TUEFDRSkge1xuICAgICAgICAgICAgaW5kZXggLT0gVEFCX1NJWkUgLSAxO1xuICAgICAgICAgICAgc2l6ZSAtPSBUQUJfU0laRSAtIDE7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGNoYXJhY3RlciAhPT0gQ19ORVdMSU5FICYmIGNoYXJhY3RlciAhPT0gJycpIHtcbiAgICAgICAgICBjdXJyZW50TWFya2VyID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjdXJyZW50TWFya2VyKSB7XG4gICAgICBpZiAoIXBlZGFudGljICYmIG1hcmtlciAhPT0gY3VycmVudE1hcmtlcikge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgcHJlZml4ZWQgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIWNvbW1vbm1hcmsgJiYgIWluZGVudGVkICYmIHZhbHVlLmNoYXJBdChzdGFydEluZGV4KSA9PT0gQ19TUEFDRSkge1xuICAgICAgICBpbmRlbnRlZCA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKGNvbW1vbm1hcmsgJiYgaXRlbSkge1xuICAgICAgICBpbmRlbnRlZCA9IHNpemUgPj0gaXRlbS5pbmRlbnQgfHwgc2l6ZSA+IFRBQl9TSVpFO1xuICAgICAgfVxuXG4gICAgICBwcmVmaXhlZCA9IGZhbHNlO1xuICAgICAgaW5kZXggPSBzdGFydEluZGV4O1xuICAgIH1cblxuICAgIGxpbmUgPSB2YWx1ZS5zbGljZShzdGFydEluZGV4LCBuZXh0SW5kZXgpO1xuICAgIGNvbnRlbnQgPSBzdGFydEluZGV4ID09PSBpbmRleCA/IGxpbmUgOiB2YWx1ZS5zbGljZShpbmRleCwgbmV4dEluZGV4KTtcblxuICAgIGlmIChcbiAgICAgIGN1cnJlbnRNYXJrZXIgPT09IENfQVNURVJJU0sgfHxcbiAgICAgIGN1cnJlbnRNYXJrZXIgPT09IENfVU5ERVJTQ09SRSB8fFxuICAgICAgY3VycmVudE1hcmtlciA9PT0gQ19EQVNIXG4gICAgKSB7XG4gICAgICBpZiAodG9rZW5pemVycy50aGVtYXRpY0JyZWFrLmNhbGwoc2VsZiwgZWF0LCBsaW5lLCB0cnVlKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwcmV2RW1wdHkgPSBlbXB0eTtcbiAgICBlbXB0eSA9ICF0cmltKGNvbnRlbnQpLmxlbmd0aDtcblxuICAgIGlmIChpbmRlbnRlZCAmJiBpdGVtKSB7XG4gICAgICBpdGVtLnZhbHVlID0gaXRlbS52YWx1ZS5jb25jYXQoZW1wdHlMaW5lcywgbGluZSk7XG4gICAgICBhbGxMaW5lcyA9IGFsbExpbmVzLmNvbmNhdChlbXB0eUxpbmVzLCBsaW5lKTtcbiAgICAgIGVtcHR5TGluZXMgPSBbXTtcbiAgICB9IGVsc2UgaWYgKHByZWZpeGVkKSB7XG4gICAgICBpZiAoZW1wdHlMaW5lcy5sZW5ndGggIT09IDApIHtcbiAgICAgICAgaXRlbS52YWx1ZS5wdXNoKCcnKTtcbiAgICAgICAgaXRlbS50cmFpbCA9IGVtcHR5TGluZXMuY29uY2F0KCk7XG4gICAgICB9XG5cbiAgICAgIGl0ZW0gPSB7XG4gICAgICAgIHZhbHVlOiBbbGluZV0sXG4gICAgICAgIGluZGVudDogc2l6ZSxcbiAgICAgICAgdHJhaWw6IFtdXG4gICAgICB9O1xuXG4gICAgICBpdGVtcy5wdXNoKGl0ZW0pO1xuICAgICAgYWxsTGluZXMgPSBhbGxMaW5lcy5jb25jYXQoZW1wdHlMaW5lcywgbGluZSk7XG4gICAgICBlbXB0eUxpbmVzID0gW107XG4gICAgfSBlbHNlIGlmIChlbXB0eSkge1xuICAgICAgaWYgKHByZXZFbXB0eSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgZW1wdHlMaW5lcy5wdXNoKGxpbmUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJldkVtcHR5KSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZiAoaW50ZXJydXB0KGludGVydXB0b3JzLCB0b2tlbml6ZXJzLCBzZWxmLCBbZWF0LCBsaW5lLCB0cnVlXSkpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGl0ZW0udmFsdWUgPSBpdGVtLnZhbHVlLmNvbmNhdChlbXB0eUxpbmVzLCBsaW5lKTtcbiAgICAgIGFsbExpbmVzID0gYWxsTGluZXMuY29uY2F0KGVtcHR5TGluZXMsIGxpbmUpO1xuICAgICAgZW1wdHlMaW5lcyA9IFtdO1xuICAgIH1cblxuICAgIGluZGV4ID0gbmV4dEluZGV4ICsgMTtcbiAgfVxuXG4gIG5vZGUgPSBlYXQoYWxsTGluZXMuam9pbihDX05FV0xJTkUpKS5yZXNldCh7XG4gICAgdHlwZTogJ2xpc3QnLFxuICAgIG9yZGVyZWQ6IG9yZGVyZWQsXG4gICAgc3RhcnQ6IHN0YXJ0LFxuICAgIGxvb3NlOiBudWxsLFxuICAgIGNoaWxkcmVuOiBbXVxuICB9KTtcblxuICBlbnRlclRvcCA9IHNlbGYuZW50ZXJMaXN0KCk7XG4gIGV4aXRCbG9ja3F1b3RlID0gc2VsZi5lbnRlckJsb2NrKCk7XG4gIGlzTG9vc2UgPSBmYWxzZTtcbiAgaW5kZXggPSAtMTtcbiAgbGVuZ3RoID0gaXRlbXMubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgaXRlbSA9IGl0ZW1zW2luZGV4XS52YWx1ZS5qb2luKENfTkVXTElORSk7XG4gICAgbm93ID0gZWF0Lm5vdygpO1xuXG4gICAgaXRlbSA9IGVhdChpdGVtKShsaXN0SXRlbShzZWxmLCBpdGVtLCBub3cpLCBub2RlKTtcblxuICAgIGlmIChpdGVtLmxvb3NlKSB7XG4gICAgICBpc0xvb3NlID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpdGVtID0gaXRlbXNbaW5kZXhdLnRyYWlsLmpvaW4oQ19ORVdMSU5FKTtcblxuICAgIGlmIChpbmRleCAhPT0gbGVuZ3RoIC0gMSkge1xuICAgICAgaXRlbSArPSBDX05FV0xJTkU7XG4gICAgfVxuXG4gICAgZWF0KGl0ZW0pO1xuICB9XG5cbiAgZW50ZXJUb3AoKTtcbiAgZXhpdEJsb2NrcXVvdGUoKTtcblxuICBub2RlLmxvb3NlID0gaXNMb29zZTtcblxuICByZXR1cm4gbm9kZTtcbn1cblxuZnVuY3Rpb24gbGlzdEl0ZW0oY3R4LCB2YWx1ZSwgcG9zaXRpb24pIHtcbiAgdmFyIG9mZnNldHMgPSBjdHgub2Zmc2V0O1xuICB2YXIgZm4gPSBjdHgub3B0aW9ucy5wZWRhbnRpYyA/IHBlZGFudGljTGlzdEl0ZW0gOiBub3JtYWxMaXN0SXRlbTtcbiAgdmFyIGNoZWNrZWQgPSBudWxsO1xuICB2YXIgdGFzaztcbiAgdmFyIGluZGVudDtcblxuICB2YWx1ZSA9IGZuLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG5cbiAgaWYgKGN0eC5vcHRpb25zLmdmbSkge1xuICAgIHRhc2sgPSB2YWx1ZS5tYXRjaChFWFBSRVNTSU9OX1RBU0tfSVRFTSk7XG5cbiAgICBpZiAodGFzaykge1xuICAgICAgaW5kZW50ID0gdGFza1swXS5sZW5ndGg7XG4gICAgICBjaGVja2VkID0gdGFza1sxXS50b0xvd2VyQ2FzZSgpID09PSBDX1hfTE9XRVI7XG4gICAgICBvZmZzZXRzW3Bvc2l0aW9uLmxpbmVdICs9IGluZGVudDtcbiAgICAgIHZhbHVlID0gdmFsdWUuc2xpY2UoaW5kZW50KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHR5cGU6ICdsaXN0SXRlbScsXG4gICAgbG9vc2U6IEVYUFJFU1NJT05fTE9PU0VfTElTVF9JVEVNLnRlc3QodmFsdWUpIHx8XG4gICAgICB2YWx1ZS5jaGFyQXQodmFsdWUubGVuZ3RoIC0gMSkgPT09IENfTkVXTElORSxcbiAgICBjaGVja2VkOiBjaGVja2VkLFxuICAgIGNoaWxkcmVuOiBjdHgudG9rZW5pemVCbG9jayh2YWx1ZSwgcG9zaXRpb24pXG4gIH07XG59XG5cbi8qIENyZWF0ZSBhIGxpc3QtaXRlbSB1c2luZyBvdmVybHkgc2ltcGxlIG1lY2hhbmljcy4gKi9cbmZ1bmN0aW9uIHBlZGFudGljTGlzdEl0ZW0oY3R4LCB2YWx1ZSwgcG9zaXRpb24pIHtcbiAgdmFyIG9mZnNldHMgPSBjdHgub2Zmc2V0O1xuICB2YXIgbGluZSA9IHBvc2l0aW9uLmxpbmU7XG5cbiAgLyogUmVtb3ZlIHRoZSBsaXN0LWl0ZW3igJlzIGJ1bGxldC4gKi9cbiAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKEVYUFJFU1NJT05fUEVEQU5USUNfQlVMTEVULCByZXBsYWNlcik7XG5cbiAgLyogVGhlIGluaXRpYWwgbGluZSB3YXMgYWxzbyBtYXRjaGVkIGJ5IHRoZSBiZWxvdywgc29cbiAgICogd2UgcmVzZXQgdGhlIGBsaW5lYC4gKi9cbiAgbGluZSA9IHBvc2l0aW9uLmxpbmU7XG5cbiAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoRVhQUkVTU0lPTl9JTklUSUFMX0lOREVOVCwgcmVwbGFjZXIpO1xuXG4gIC8qIEEgc2ltcGxlIHJlcGxhY2VyIHdoaWNoIHJlbW92ZWQgYWxsIG1hdGNoZXMsXG4gICAqIGFuZCBhZGRzIHRoZWlyIGxlbmd0aCB0byBgb2Zmc2V0YC4gKi9cbiAgZnVuY3Rpb24gcmVwbGFjZXIoJDApIHtcbiAgICBvZmZzZXRzW2xpbmVdID0gKG9mZnNldHNbbGluZV0gfHwgMCkgKyAkMC5sZW5ndGg7XG4gICAgbGluZSsrO1xuXG4gICAgcmV0dXJuICcnO1xuICB9XG59XG5cbi8qIENyZWF0ZSBhIGxpc3QtaXRlbSB1c2luZyBzYW5lIG1lY2hhbmljcy4gKi9cbmZ1bmN0aW9uIG5vcm1hbExpc3RJdGVtKGN0eCwgdmFsdWUsIHBvc2l0aW9uKSB7XG4gIHZhciBvZmZzZXRzID0gY3R4Lm9mZnNldDtcbiAgdmFyIGxpbmUgPSBwb3NpdGlvbi5saW5lO1xuICB2YXIgbWF4O1xuICB2YXIgYnVsbGV0O1xuICB2YXIgcmVzdDtcbiAgdmFyIGxpbmVzO1xuICB2YXIgdHJpbW1lZExpbmVzO1xuICB2YXIgaW5kZXg7XG4gIHZhciBsZW5ndGg7XG5cbiAgLyogUmVtb3ZlIHRoZSBsaXN0LWl0ZW3igJlzIGJ1bGxldC4gKi9cbiAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKEVYUFJFU1NJT05fQlVMTEVULCByZXBsYWNlcik7XG5cbiAgbGluZXMgPSB2YWx1ZS5zcGxpdChDX05FV0xJTkUpO1xuXG4gIHRyaW1tZWRMaW5lcyA9IHJlbW92ZUluZGVudCh2YWx1ZSwgZ2V0SW5kZW50KG1heCkuaW5kZW50KS5zcGxpdChDX05FV0xJTkUpO1xuXG4gIC8qIFdlIHJlcGxhY2VkIHRoZSBpbml0aWFsIGJ1bGxldCB3aXRoIHNvbWV0aGluZ1xuICAgKiBlbHNlIGFib3ZlLCB3aGljaCB3YXMgdXNlZCB0byB0cmlja1xuICAgKiBgcmVtb3ZlSW5kZW50YXRpb25gIGludG8gcmVtb3Zpbmcgc29tZSBtb3JlXG4gICAqIGNoYXJhY3RlcnMgd2hlbiBwb3NzaWJsZS4gIEhvd2V2ZXIsIHRoYXQgY291bGRcbiAgICogcmVzdWx0IGluIHRoZSBpbml0aWFsIGxpbmUgdG8gYmUgc3RyaXBwZWQgbW9yZVxuICAgKiB0aGFuIGl0IHNob3VsZCBiZS4gKi9cbiAgdHJpbW1lZExpbmVzWzBdID0gcmVzdDtcblxuICBvZmZzZXRzW2xpbmVdID0gKG9mZnNldHNbbGluZV0gfHwgMCkgKyBidWxsZXQubGVuZ3RoO1xuICBsaW5lKys7XG5cbiAgaW5kZXggPSAwO1xuICBsZW5ndGggPSBsaW5lcy5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBvZmZzZXRzW2xpbmVdID0gKG9mZnNldHNbbGluZV0gfHwgMCkgK1xuICAgICAgbGluZXNbaW5kZXhdLmxlbmd0aCAtIHRyaW1tZWRMaW5lc1tpbmRleF0ubGVuZ3RoO1xuICAgIGxpbmUrKztcbiAgfVxuXG4gIHJldHVybiB0cmltbWVkTGluZXMuam9pbihDX05FV0xJTkUpO1xuXG4gIGZ1bmN0aW9uIHJlcGxhY2VyKCQwLCAkMSwgJDIsICQzLCAkNCkge1xuICAgIGJ1bGxldCA9ICQxICsgJDIgKyAkMztcbiAgICByZXN0ID0gJDQ7XG5cbiAgICAvKiBNYWtlIHN1cmUgdGhhdCB0aGUgZmlyc3QgbmluZSBudW1iZXJlZCBsaXN0IGl0ZW1zXG4gICAgICogY2FuIGluZGVudCB3aXRoIGFuIGV4dHJhIHNwYWNlLiAgVGhhdCBpcywgd2hlblxuICAgICAqIHRoZSBidWxsZXQgZGlkIG5vdCByZWNlaXZlIGFuIGV4dHJhIGZpbmFsIHNwYWNlLiAqL1xuICAgIGlmIChOdW1iZXIoJDIpIDwgMTAgJiYgYnVsbGV0Lmxlbmd0aCAlIDIgPT09IDEpIHtcbiAgICAgICQyID0gQ19TUEFDRSArICQyO1xuICAgIH1cblxuICAgIG1heCA9ICQxICsgcmVwZWF0KENfU1BBQ0UsICQyLmxlbmd0aCkgKyAkMztcblxuICAgIHJldHVybiBtYXggKyByZXN0O1xuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB0cmltID0gcmVxdWlyZSgndHJpbScpO1xudmFyIHJlcGVhdCA9IHJlcXVpcmUoJ3JlcGVhdC1zdHJpbmcnKTtcbnZhciBnZXRJbmRlbnQgPSByZXF1aXJlKCcuL2dldC1pbmRlbnRhdGlvbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGluZGVudGF0aW9uO1xuXG52YXIgQ19TUEFDRSA9ICcgJztcbnZhciBDX05FV0xJTkUgPSAnXFxuJztcbnZhciBDX1RBQiA9ICdcXHQnO1xuXG4vKiBSZW1vdmUgdGhlIG1pbmltdW0gaW5kZW50IGZyb20gZXZlcnkgbGluZSBpbiBgdmFsdWVgLlxuICogU3VwcG9ydHMgYm90aCB0YWIsIHNwYWNlZCwgYW5kIG1peGVkIGluZGVudGF0aW9uIChhc1xuICogd2VsbCBhcyBwb3NzaWJsZSkuICovXG5mdW5jdGlvbiBpbmRlbnRhdGlvbih2YWx1ZSwgbWF4aW11bSkge1xuICB2YXIgdmFsdWVzID0gdmFsdWUuc3BsaXQoQ19ORVdMSU5FKTtcbiAgdmFyIHBvc2l0aW9uID0gdmFsdWVzLmxlbmd0aCArIDE7XG4gIHZhciBtaW5JbmRlbnQgPSBJbmZpbml0eTtcbiAgdmFyIG1hdHJpeCA9IFtdO1xuICB2YXIgaW5kZXg7XG4gIHZhciBpbmRlbnRhdGlvbjtcbiAgdmFyIHN0b3BzO1xuICB2YXIgcGFkZGluZztcblxuICB2YWx1ZXMudW5zaGlmdChyZXBlYXQoQ19TUEFDRSwgbWF4aW11bSkgKyAnIScpO1xuXG4gIHdoaWxlIChwb3NpdGlvbi0tKSB7XG4gICAgaW5kZW50YXRpb24gPSBnZXRJbmRlbnQodmFsdWVzW3Bvc2l0aW9uXSk7XG5cbiAgICBtYXRyaXhbcG9zaXRpb25dID0gaW5kZW50YXRpb24uc3RvcHM7XG5cbiAgICBpZiAodHJpbSh2YWx1ZXNbcG9zaXRpb25dKS5sZW5ndGggPT09IDApIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChpbmRlbnRhdGlvbi5pbmRlbnQpIHtcbiAgICAgIGlmIChpbmRlbnRhdGlvbi5pbmRlbnQgPiAwICYmIGluZGVudGF0aW9uLmluZGVudCA8IG1pbkluZGVudCkge1xuICAgICAgICBtaW5JbmRlbnQgPSBpbmRlbnRhdGlvbi5pbmRlbnQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG1pbkluZGVudCA9IEluZmluaXR5O1xuXG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBpZiAobWluSW5kZW50ICE9PSBJbmZpbml0eSkge1xuICAgIHBvc2l0aW9uID0gdmFsdWVzLmxlbmd0aDtcblxuICAgIHdoaWxlIChwb3NpdGlvbi0tKSB7XG4gICAgICBzdG9wcyA9IG1hdHJpeFtwb3NpdGlvbl07XG4gICAgICBpbmRleCA9IG1pbkluZGVudDtcblxuICAgICAgd2hpbGUgKGluZGV4ICYmICEoaW5kZXggaW4gc3RvcHMpKSB7XG4gICAgICAgIGluZGV4LS07XG4gICAgICB9XG5cbiAgICAgIGlmIChcbiAgICAgICAgdHJpbSh2YWx1ZXNbcG9zaXRpb25dKS5sZW5ndGggIT09IDAgJiZcbiAgICAgICAgbWluSW5kZW50ICYmXG4gICAgICAgIGluZGV4ICE9PSBtaW5JbmRlbnRcbiAgICAgICkge1xuICAgICAgICBwYWRkaW5nID0gQ19UQUI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYWRkaW5nID0gJyc7XG4gICAgICB9XG5cbiAgICAgIHZhbHVlc1twb3NpdGlvbl0gPSBwYWRkaW5nICsgdmFsdWVzW3Bvc2l0aW9uXS5zbGljZShcbiAgICAgICAgaW5kZXggaW4gc3RvcHMgPyBzdG9wc1tpbmRleF0gKyAxIDogMFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICB2YWx1ZXMuc2hpZnQoKTtcblxuICByZXR1cm4gdmFsdWVzLmpvaW4oQ19ORVdMSU5FKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBzZXRleHRIZWFkaW5nO1xuXG52YXIgQ19ORVdMSU5FID0gJ1xcbic7XG52YXIgQ19UQUIgPSAnXFx0JztcbnZhciBDX1NQQUNFID0gJyAnO1xudmFyIENfRVFVQUxTID0gJz0nO1xudmFyIENfREFTSCA9ICctJztcblxudmFyIE1BWF9IRUFESU5HX0lOREVOVCA9IDM7XG5cbi8qIE1hcCBvZiBjaGFyYWN0ZXJzIHdoaWNoIGNhbiBiZSB1c2VkIHRvIG1hcmsgc2V0ZXh0XG4gKiBoZWFkZXJzLCBtYXBwaW5nIHRvIHRoZWlyIGNvcnJlc3BvbmRpbmcgZGVwdGguICovXG52YXIgU0VURVhUX01BUktFUlMgPSB7fTtcblxuU0VURVhUX01BUktFUlNbQ19FUVVBTFNdID0gMTtcblNFVEVYVF9NQVJLRVJTW0NfREFTSF0gPSAyO1xuXG5mdW5jdGlvbiBzZXRleHRIZWFkaW5nKGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBub3cgPSBlYXQubm93KCk7XG4gIHZhciBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gIHZhciBpbmRleCA9IC0xO1xuICB2YXIgc3VidmFsdWUgPSAnJztcbiAgdmFyIGNvbnRlbnQ7XG4gIHZhciBxdWV1ZTtcbiAgdmFyIGNoYXJhY3RlcjtcbiAgdmFyIG1hcmtlcjtcbiAgdmFyIGRlcHRoO1xuXG4gIC8qIEVhdCBpbml0aWFsIGluZGVudGF0aW9uLiAqL1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoY2hhcmFjdGVyICE9PSBDX1NQQUNFIHx8IGluZGV4ID49IE1BWF9IRUFESU5HX0lOREVOVCkge1xuICAgICAgaW5kZXgtLTtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHN1YnZhbHVlICs9IGNoYXJhY3RlcjtcbiAgfVxuXG4gIC8qIEVhdCBjb250ZW50LiAqL1xuICBjb250ZW50ID0gJyc7XG4gIHF1ZXVlID0gJyc7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKGNoYXJhY3RlciA9PT0gQ19ORVdMSU5FKSB7XG4gICAgICBpbmRleC0tO1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKGNoYXJhY3RlciA9PT0gQ19TUEFDRSB8fCBjaGFyYWN0ZXIgPT09IENfVEFCKSB7XG4gICAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRlbnQgKz0gcXVldWUgKyBjaGFyYWN0ZXI7XG4gICAgICBxdWV1ZSA9ICcnO1xuICAgIH1cbiAgfVxuXG4gIG5vdy5jb2x1bW4gKz0gc3VidmFsdWUubGVuZ3RoO1xuICBub3cub2Zmc2V0ICs9IHN1YnZhbHVlLmxlbmd0aDtcbiAgc3VidmFsdWUgKz0gY29udGVudCArIHF1ZXVlO1xuXG4gIC8qIEVuc3VyZSB0aGUgY29udGVudCBpcyBmb2xsb3dlZCBieSBhIG5ld2xpbmUgYW5kIGFcbiAgICogdmFsaWQgbWFya2VyLiAqL1xuICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoKytpbmRleCk7XG4gIG1hcmtlciA9IHZhbHVlLmNoYXJBdCgrK2luZGV4KTtcblxuICBpZiAoY2hhcmFjdGVyICE9PSBDX05FV0xJTkUgfHwgIVNFVEVYVF9NQVJLRVJTW21hcmtlcl0pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBzdWJ2YWx1ZSArPSBjaGFyYWN0ZXI7XG5cbiAgLyogRWF0IFNldGV4dC1saW5lLiAqL1xuICBxdWV1ZSA9IG1hcmtlcjtcbiAgZGVwdGggPSBTRVRFWFRfTUFSS0VSU1ttYXJrZXJdO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmIChjaGFyYWN0ZXIgIT09IG1hcmtlcikge1xuICAgICAgaWYgKGNoYXJhY3RlciAhPT0gQ19ORVdMSU5FKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaW5kZXgtLTtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgfVxuXG4gIGlmIChzaWxlbnQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBlYXQoc3VidmFsdWUgKyBxdWV1ZSkoe1xuICAgIHR5cGU6ICdoZWFkaW5nJyxcbiAgICBkZXB0aDogZGVwdGgsXG4gICAgY2hpbGRyZW46IHNlbGYudG9rZW5pemVJbmxpbmUoY29udGVudCwgbm93KVxuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIG9wZW5DbG9zZVRhZyA9IHJlcXVpcmUoJy4uL3V0aWwvaHRtbCcpLm9wZW5DbG9zZVRhZztcblxubW9kdWxlLmV4cG9ydHMgPSBibG9ja0hUTUw7XG5cbnZhciBDX1RBQiA9ICdcXHQnO1xudmFyIENfU1BBQ0UgPSAnICc7XG52YXIgQ19ORVdMSU5FID0gJ1xcbic7XG52YXIgQ19MVCA9ICc8JztcblxuZnVuY3Rpb24gYmxvY2tIVE1MKGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBibG9ja3MgPSBzZWxmLm9wdGlvbnMuYmxvY2tzO1xuICB2YXIgbGVuZ3RoID0gdmFsdWUubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbmV4dDtcbiAgdmFyIGxpbmU7XG4gIHZhciBvZmZzZXQ7XG4gIHZhciBjaGFyYWN0ZXI7XG4gIHZhciBjb3VudDtcbiAgdmFyIHNlcXVlbmNlO1xuICB2YXIgc3VidmFsdWU7XG5cbiAgdmFyIHNlcXVlbmNlcyA9IFtcbiAgICBbL148KHNjcmlwdHxwcmV8c3R5bGUpKD89KFxcc3w+fCQpKS9pLCAvPFxcLyhzY3JpcHR8cHJlfHN0eWxlKT4vaSwgdHJ1ZV0sXG4gICAgWy9ePCEtLS8sIC8tLT4vLCB0cnVlXSxcbiAgICBbL148XFw/LywgL1xcPz4vLCB0cnVlXSxcbiAgICBbL148IVtBLVphLXpdLywgLz4vLCB0cnVlXSxcbiAgICBbL148IVxcW0NEQVRBXFxbLywgL1xcXVxcXT4vLCB0cnVlXSxcbiAgICBbbmV3IFJlZ0V4cCgnXjwvPygnICsgYmxvY2tzLmpvaW4oJ3wnKSArICcpKD89KFxcXFxzfC8/PnwkKSknLCAnaScpLCAvXiQvLCB0cnVlXSxcbiAgICBbbmV3IFJlZ0V4cChvcGVuQ2xvc2VUYWcuc291cmNlICsgJ1xcXFxzKiQnKSwgL14kLywgZmFsc2VdXG4gIF07XG5cbiAgLyogRWF0IGluaXRpYWwgc3BhY2luZy4gKi9cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmIChjaGFyYWN0ZXIgIT09IENfVEFCICYmIGNoYXJhY3RlciAhPT0gQ19TUEFDRSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgaW5kZXgrKztcbiAgfVxuXG4gIGlmICh2YWx1ZS5jaGFyQXQoaW5kZXgpICE9PSBDX0xUKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbmV4dCA9IHZhbHVlLmluZGV4T2YoQ19ORVdMSU5FLCBpbmRleCArIDEpO1xuICBuZXh0ID0gbmV4dCA9PT0gLTEgPyBsZW5ndGggOiBuZXh0O1xuICBsaW5lID0gdmFsdWUuc2xpY2UoaW5kZXgsIG5leHQpO1xuICBvZmZzZXQgPSAtMTtcbiAgY291bnQgPSBzZXF1ZW5jZXMubGVuZ3RoO1xuXG4gIHdoaWxlICgrK29mZnNldCA8IGNvdW50KSB7XG4gICAgaWYgKHNlcXVlbmNlc1tvZmZzZXRdWzBdLnRlc3QobGluZSkpIHtcbiAgICAgIHNlcXVlbmNlID0gc2VxdWVuY2VzW29mZnNldF07XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBpZiAoIXNlcXVlbmNlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHNpbGVudCkge1xuICAgIHJldHVybiBzZXF1ZW5jZVsyXTtcbiAgfVxuXG4gIGluZGV4ID0gbmV4dDtcblxuICBpZiAoIXNlcXVlbmNlWzFdLnRlc3QobGluZSkpIHtcbiAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIG5leHQgPSB2YWx1ZS5pbmRleE9mKENfTkVXTElORSwgaW5kZXggKyAxKTtcbiAgICAgIG5leHQgPSBuZXh0ID09PSAtMSA/IGxlbmd0aCA6IG5leHQ7XG4gICAgICBsaW5lID0gdmFsdWUuc2xpY2UoaW5kZXggKyAxLCBuZXh0KTtcblxuICAgICAgaWYgKHNlcXVlbmNlWzFdLnRlc3QobGluZSkpIHtcbiAgICAgICAgaWYgKGxpbmUpIHtcbiAgICAgICAgICBpbmRleCA9IG5leHQ7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaW5kZXggPSBuZXh0O1xuICAgIH1cbiAgfVxuXG4gIHN1YnZhbHVlID0gdmFsdWUuc2xpY2UoMCwgaW5kZXgpO1xuXG4gIHJldHVybiBlYXQoc3VidmFsdWUpKHt0eXBlOiAnaHRtbCcsIHZhbHVlOiBzdWJ2YWx1ZX0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgd2hpdGVzcGFjZSA9IHJlcXVpcmUoJ2lzLXdoaXRlc3BhY2UtY2hhcmFjdGVyJyk7XG52YXIgbm9ybWFsaXplID0gcmVxdWlyZSgnLi4vdXRpbC9ub3JtYWxpemUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmb290bm90ZURlZmluaXRpb247XG5mb290bm90ZURlZmluaXRpb24ubm90SW5MaXN0ID0gdHJ1ZTtcbmZvb3Rub3RlRGVmaW5pdGlvbi5ub3RJbkJsb2NrID0gdHJ1ZTtcblxudmFyIENfQkFDS1NMQVNIID0gJ1xcXFwnO1xudmFyIENfTkVXTElORSA9ICdcXG4nO1xudmFyIENfVEFCID0gJ1xcdCc7XG52YXIgQ19TUEFDRSA9ICcgJztcbnZhciBDX0JSQUNLRVRfT1BFTiA9ICdbJztcbnZhciBDX0JSQUNLRVRfQ0xPU0UgPSAnXSc7XG52YXIgQ19DQVJFVCA9ICdeJztcbnZhciBDX0NPTE9OID0gJzonO1xuXG52YXIgRVhQUkVTU0lPTl9JTklUSUFMX1RBQiA9IC9eKCB7NH18XFx0KT8vZ207XG5cbmZ1bmN0aW9uIGZvb3Rub3RlRGVmaW5pdGlvbihlYXQsIHZhbHVlLCBzaWxlbnQpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgb2Zmc2V0cyA9IHNlbGYub2Zmc2V0O1xuICB2YXIgaW5kZXg7XG4gIHZhciBsZW5ndGg7XG4gIHZhciBzdWJ2YWx1ZTtcbiAgdmFyIG5vdztcbiAgdmFyIGN1cnJlbnRMaW5lO1xuICB2YXIgY29udGVudDtcbiAgdmFyIHF1ZXVlO1xuICB2YXIgc3VicXVldWU7XG4gIHZhciBjaGFyYWN0ZXI7XG4gIHZhciBpZGVudGlmaWVyO1xuICB2YXIgYWRkO1xuICB2YXIgZXhpdDtcblxuICBpZiAoIXNlbGYub3B0aW9ucy5mb290bm90ZXMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpbmRleCA9IDA7XG4gIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcbiAgc3VidmFsdWUgPSAnJztcbiAgbm93ID0gZWF0Lm5vdygpO1xuICBjdXJyZW50TGluZSA9IG5vdy5saW5lO1xuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoIXdoaXRlc3BhY2UoY2hhcmFjdGVyKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgc3VidmFsdWUgKz0gY2hhcmFjdGVyO1xuICAgIGluZGV4Kys7XG4gIH1cblxuICBpZiAoXG4gICAgdmFsdWUuY2hhckF0KGluZGV4KSAhPT0gQ19CUkFDS0VUX09QRU4gfHxcbiAgICB2YWx1ZS5jaGFyQXQoaW5kZXggKyAxKSAhPT0gQ19DQVJFVFxuICApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBzdWJ2YWx1ZSArPSBDX0JSQUNLRVRfT1BFTiArIENfQ0FSRVQ7XG4gIGluZGV4ID0gc3VidmFsdWUubGVuZ3RoO1xuICBxdWV1ZSA9ICcnO1xuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoY2hhcmFjdGVyID09PSBDX0JSQUNLRVRfQ0xPU0UpIHtcbiAgICAgIGJyZWFrO1xuICAgIH0gZWxzZSBpZiAoY2hhcmFjdGVyID09PSBDX0JBQ0tTTEFTSCkge1xuICAgICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgICAgaW5kZXgrKztcbiAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG4gICAgfVxuXG4gICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgIGluZGV4Kys7XG4gIH1cblxuICBpZiAoXG4gICAgIXF1ZXVlIHx8XG4gICAgdmFsdWUuY2hhckF0KGluZGV4KSAhPT0gQ19CUkFDS0VUX0NMT1NFIHx8XG4gICAgdmFsdWUuY2hhckF0KGluZGV4ICsgMSkgIT09IENfQ09MT05cbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHNpbGVudCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWRlbnRpZmllciA9IG5vcm1hbGl6ZShxdWV1ZSk7XG4gIHN1YnZhbHVlICs9IHF1ZXVlICsgQ19CUkFDS0VUX0NMT1NFICsgQ19DT0xPTjtcbiAgaW5kZXggPSBzdWJ2YWx1ZS5sZW5ndGg7XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmIChjaGFyYWN0ZXIgIT09IENfVEFCICYmIGNoYXJhY3RlciAhPT0gQ19TUEFDRSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgc3VidmFsdWUgKz0gY2hhcmFjdGVyO1xuICAgIGluZGV4Kys7XG4gIH1cblxuICBub3cuY29sdW1uICs9IHN1YnZhbHVlLmxlbmd0aDtcbiAgbm93Lm9mZnNldCArPSBzdWJ2YWx1ZS5sZW5ndGg7XG4gIHF1ZXVlID0gJyc7XG4gIGNvbnRlbnQgPSAnJztcbiAgc3VicXVldWUgPSAnJztcblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKGNoYXJhY3RlciA9PT0gQ19ORVdMSU5FKSB7XG4gICAgICBzdWJxdWV1ZSA9IGNoYXJhY3RlcjtcbiAgICAgIGluZGV4Kys7XG5cbiAgICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgICAgIGlmIChjaGFyYWN0ZXIgIT09IENfTkVXTElORSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgc3VicXVldWUgKz0gY2hhcmFjdGVyO1xuICAgICAgICBpbmRleCsrO1xuICAgICAgfVxuXG4gICAgICBxdWV1ZSArPSBzdWJxdWV1ZTtcbiAgICAgIHN1YnF1ZXVlID0gJyc7XG5cbiAgICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgICAgIGlmIChjaGFyYWN0ZXIgIT09IENfU1BBQ0UpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHN1YnF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgICAgaW5kZXgrKztcbiAgICAgIH1cblxuICAgICAgaWYgKHN1YnF1ZXVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgcXVldWUgKz0gc3VicXVldWU7XG4gICAgfVxuXG4gICAgaWYgKHF1ZXVlKSB7XG4gICAgICBjb250ZW50ICs9IHF1ZXVlO1xuICAgICAgcXVldWUgPSAnJztcbiAgICB9XG5cbiAgICBjb250ZW50ICs9IGNoYXJhY3RlcjtcbiAgICBpbmRleCsrO1xuICB9XG5cbiAgc3VidmFsdWUgKz0gY29udGVudDtcblxuICBjb250ZW50ID0gY29udGVudC5yZXBsYWNlKEVYUFJFU1NJT05fSU5JVElBTF9UQUIsIGZ1bmN0aW9uIChsaW5lKSB7XG4gICAgb2Zmc2V0c1tjdXJyZW50TGluZV0gPSAob2Zmc2V0c1tjdXJyZW50TGluZV0gfHwgMCkgKyBsaW5lLmxlbmd0aDtcbiAgICBjdXJyZW50TGluZSsrO1xuXG4gICAgcmV0dXJuICcnO1xuICB9KTtcblxuICBhZGQgPSBlYXQoc3VidmFsdWUpO1xuXG4gIGV4aXQgPSBzZWxmLmVudGVyQmxvY2soKTtcbiAgY29udGVudCA9IHNlbGYudG9rZW5pemVCbG9jayhjb250ZW50LCBub3cpO1xuICBleGl0KCk7XG5cbiAgcmV0dXJuIGFkZCh7XG4gICAgdHlwZTogJ2Zvb3Rub3RlRGVmaW5pdGlvbicsXG4gICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICBjaGlsZHJlbjogY29udGVudFxuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbGxhcHNlXG5cbi8vIGBjb2xsYXBzZSgnIFxcdFxcbmJhciBcXG5iYXpcXHQnKSAvLyAnIGJhciBiYXogJ2BcbmZ1bmN0aW9uIGNvbGxhcHNlKHZhbHVlKSB7XG4gIHJldHVybiBTdHJpbmcodmFsdWUpLnJlcGxhY2UoL1xccysvZywgJyAnKVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgd2hpdGVzcGFjZSA9IHJlcXVpcmUoJ2lzLXdoaXRlc3BhY2UtY2hhcmFjdGVyJyk7XG52YXIgbm9ybWFsaXplID0gcmVxdWlyZSgnLi4vdXRpbC9ub3JtYWxpemUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZpbml0aW9uO1xuZGVmaW5pdGlvbi5ub3RJbkxpc3QgPSB0cnVlO1xuZGVmaW5pdGlvbi5ub3RJbkJsb2NrID0gdHJ1ZTtcblxudmFyIENfRE9VQkxFX1FVT1RFID0gJ1wiJztcbnZhciBDX1NJTkdMRV9RVU9URSA9ICdcXCcnO1xudmFyIENfQkFDS1NMQVNIID0gJ1xcXFwnO1xudmFyIENfTkVXTElORSA9ICdcXG4nO1xudmFyIENfVEFCID0gJ1xcdCc7XG52YXIgQ19TUEFDRSA9ICcgJztcbnZhciBDX0JSQUNLRVRfT1BFTiA9ICdbJztcbnZhciBDX0JSQUNLRVRfQ0xPU0UgPSAnXSc7XG52YXIgQ19QQVJFTl9PUEVOID0gJygnO1xudmFyIENfUEFSRU5fQ0xPU0UgPSAnKSc7XG52YXIgQ19DT0xPTiA9ICc6JztcbnZhciBDX0xUID0gJzwnO1xudmFyIENfR1QgPSAnPic7XG5cbmZ1bmN0aW9uIGRlZmluaXRpb24oZWF0LCB2YWx1ZSwgc2lsZW50KSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIGNvbW1vbm1hcmsgPSBzZWxmLm9wdGlvbnMuY29tbW9ubWFyaztcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcbiAgdmFyIHN1YnZhbHVlID0gJyc7XG4gIHZhciBiZWZvcmVVUkw7XG4gIHZhciBiZWZvcmVUaXRsZTtcbiAgdmFyIHF1ZXVlO1xuICB2YXIgY2hhcmFjdGVyO1xuICB2YXIgdGVzdDtcbiAgdmFyIGlkZW50aWZpZXI7XG4gIHZhciB1cmw7XG4gIHZhciB0aXRsZTtcblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKGNoYXJhY3RlciAhPT0gQ19TUEFDRSAmJiBjaGFyYWN0ZXIgIT09IENfVEFCKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBzdWJ2YWx1ZSArPSBjaGFyYWN0ZXI7XG4gICAgaW5kZXgrKztcbiAgfVxuXG4gIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgaWYgKGNoYXJhY3RlciAhPT0gQ19CUkFDS0VUX09QRU4pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpbmRleCsrO1xuICBzdWJ2YWx1ZSArPSBjaGFyYWN0ZXI7XG4gIHF1ZXVlID0gJyc7XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmIChjaGFyYWN0ZXIgPT09IENfQlJBQ0tFVF9DTE9TRSkge1xuICAgICAgYnJlYWs7XG4gICAgfSBlbHNlIGlmIChjaGFyYWN0ZXIgPT09IENfQkFDS1NMQVNIKSB7XG4gICAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgICBpbmRleCsrO1xuICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcbiAgICB9XG5cbiAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgaW5kZXgrKztcbiAgfVxuXG4gIGlmIChcbiAgICAhcXVldWUgfHxcbiAgICB2YWx1ZS5jaGFyQXQoaW5kZXgpICE9PSBDX0JSQUNLRVRfQ0xPU0UgfHxcbiAgICB2YWx1ZS5jaGFyQXQoaW5kZXggKyAxKSAhPT0gQ19DT0xPTlxuICApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZGVudGlmaWVyID0gcXVldWU7XG4gIHN1YnZhbHVlICs9IHF1ZXVlICsgQ19CUkFDS0VUX0NMT1NFICsgQ19DT0xPTjtcbiAgaW5kZXggPSBzdWJ2YWx1ZS5sZW5ndGg7XG4gIHF1ZXVlID0gJyc7XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmIChcbiAgICAgIGNoYXJhY3RlciAhPT0gQ19UQUIgJiZcbiAgICAgIGNoYXJhY3RlciAhPT0gQ19TUEFDRSAmJlxuICAgICAgY2hhcmFjdGVyICE9PSBDX05FV0xJTkVcbiAgICApIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHN1YnZhbHVlICs9IGNoYXJhY3RlcjtcbiAgICBpbmRleCsrO1xuICB9XG5cbiAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcbiAgcXVldWUgPSAnJztcbiAgYmVmb3JlVVJMID0gc3VidmFsdWU7XG5cbiAgaWYgKGNoYXJhY3RlciA9PT0gQ19MVCkge1xuICAgIGluZGV4Kys7XG5cbiAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICAgIGlmICghaXNFbmNsb3NlZFVSTENoYXJhY3RlcihjaGFyYWN0ZXIpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgICBpbmRleCsrO1xuICAgIH1cblxuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoY2hhcmFjdGVyID09PSBpc0VuY2xvc2VkVVJMQ2hhcmFjdGVyLmRlbGltaXRlcikge1xuICAgICAgc3VidmFsdWUgKz0gQ19MVCArIHF1ZXVlICsgY2hhcmFjdGVyO1xuICAgICAgaW5kZXgrKztcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGNvbW1vbm1hcmspIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpbmRleCAtPSBxdWV1ZS5sZW5ndGggKyAxO1xuICAgICAgcXVldWUgPSAnJztcbiAgICB9XG4gIH1cblxuICBpZiAoIXF1ZXVlKSB7XG4gICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgICBpZiAoIWlzVW5jbG9zZWRVUkxDaGFyYWN0ZXIoY2hhcmFjdGVyKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgICAgaW5kZXgrKztcbiAgICB9XG5cbiAgICBzdWJ2YWx1ZSArPSBxdWV1ZTtcbiAgfVxuXG4gIGlmICghcXVldWUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB1cmwgPSBxdWV1ZTtcbiAgcXVldWUgPSAnJztcblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKFxuICAgICAgY2hhcmFjdGVyICE9PSBDX1RBQiAmJlxuICAgICAgY2hhcmFjdGVyICE9PSBDX1NQQUNFICYmXG4gICAgICBjaGFyYWN0ZXIgIT09IENfTkVXTElORVxuICAgICkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgIGluZGV4Kys7XG4gIH1cblxuICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuICB0ZXN0ID0gbnVsbDtcblxuICBpZiAoY2hhcmFjdGVyID09PSBDX0RPVUJMRV9RVU9URSkge1xuICAgIHRlc3QgPSBDX0RPVUJMRV9RVU9URTtcbiAgfSBlbHNlIGlmIChjaGFyYWN0ZXIgPT09IENfU0lOR0xFX1FVT1RFKSB7XG4gICAgdGVzdCA9IENfU0lOR0xFX1FVT1RFO1xuICB9IGVsc2UgaWYgKGNoYXJhY3RlciA9PT0gQ19QQVJFTl9PUEVOKSB7XG4gICAgdGVzdCA9IENfUEFSRU5fQ0xPU0U7XG4gIH1cblxuICBpZiAoIXRlc3QpIHtcbiAgICBxdWV1ZSA9ICcnO1xuICAgIGluZGV4ID0gc3VidmFsdWUubGVuZ3RoO1xuICB9IGVsc2UgaWYgKHF1ZXVlKSB7XG4gICAgc3VidmFsdWUgKz0gcXVldWUgKyBjaGFyYWN0ZXI7XG4gICAgaW5kZXggPSBzdWJ2YWx1ZS5sZW5ndGg7XG4gICAgcXVldWUgPSAnJztcblxuICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgICAgaWYgKGNoYXJhY3RlciA9PT0gdGVzdCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaWYgKGNoYXJhY3RlciA9PT0gQ19ORVdMSU5FKSB7XG4gICAgICAgIGluZGV4Kys7XG4gICAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICAgICAgaWYgKGNoYXJhY3RlciA9PT0gQ19ORVdMSU5FIHx8IGNoYXJhY3RlciA9PT0gdGVzdCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHF1ZXVlICs9IENfTkVXTElORTtcbiAgICAgIH1cblxuICAgICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgICAgaW5kZXgrKztcbiAgICB9XG5cbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKGNoYXJhY3RlciAhPT0gdGVzdCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGJlZm9yZVRpdGxlID0gc3VidmFsdWU7XG4gICAgc3VidmFsdWUgKz0gcXVldWUgKyBjaGFyYWN0ZXI7XG4gICAgaW5kZXgrKztcbiAgICB0aXRsZSA9IHF1ZXVlO1xuICAgIHF1ZXVlID0gJyc7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmIChjaGFyYWN0ZXIgIT09IENfVEFCICYmIGNoYXJhY3RlciAhPT0gQ19TUEFDRSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgc3VidmFsdWUgKz0gY2hhcmFjdGVyO1xuICAgIGluZGV4Kys7XG4gIH1cblxuICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gIGlmICghY2hhcmFjdGVyIHx8IGNoYXJhY3RlciA9PT0gQ19ORVdMSU5FKSB7XG4gICAgaWYgKHNpbGVudCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgYmVmb3JlVVJMID0gZWF0KGJlZm9yZVVSTCkudGVzdCgpLmVuZDtcbiAgICB1cmwgPSBzZWxmLmRlY29kZS5yYXcoc2VsZi51bmVzY2FwZSh1cmwpLCBiZWZvcmVVUkwsIHtub25UZXJtaW5hdGVkOiBmYWxzZX0pO1xuXG4gICAgaWYgKHRpdGxlKSB7XG4gICAgICBiZWZvcmVUaXRsZSA9IGVhdChiZWZvcmVUaXRsZSkudGVzdCgpLmVuZDtcbiAgICAgIHRpdGxlID0gc2VsZi5kZWNvZGUucmF3KHNlbGYudW5lc2NhcGUodGl0bGUpLCBiZWZvcmVUaXRsZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVhdChzdWJ2YWx1ZSkoe1xuICAgICAgdHlwZTogJ2RlZmluaXRpb24nLFxuICAgICAgaWRlbnRpZmllcjogbm9ybWFsaXplKGlkZW50aWZpZXIpLFxuICAgICAgdGl0bGU6IHRpdGxlIHx8IG51bGwsXG4gICAgICB1cmw6IHVybFxuICAgIH0pO1xuICB9XG59XG5cbi8qIENoZWNrIGlmIGBjaGFyYWN0ZXJgIGNhbiBiZSBpbnNpZGUgYW4gZW5jbG9zZWQgVVJJLiAqL1xuZnVuY3Rpb24gaXNFbmNsb3NlZFVSTENoYXJhY3RlcihjaGFyYWN0ZXIpIHtcbiAgcmV0dXJuIGNoYXJhY3RlciAhPT0gQ19HVCAmJlxuICAgIGNoYXJhY3RlciAhPT0gQ19CUkFDS0VUX09QRU4gJiZcbiAgICBjaGFyYWN0ZXIgIT09IENfQlJBQ0tFVF9DTE9TRTtcbn1cblxuaXNFbmNsb3NlZFVSTENoYXJhY3Rlci5kZWxpbWl0ZXIgPSBDX0dUO1xuXG4vKiBDaGVjayBpZiBgY2hhcmFjdGVyYCBjYW4gYmUgaW5zaWRlIGFuIHVuY2xvc2VkIFVSSS4gKi9cbmZ1bmN0aW9uIGlzVW5jbG9zZWRVUkxDaGFyYWN0ZXIoY2hhcmFjdGVyKSB7XG4gIHJldHVybiBjaGFyYWN0ZXIgIT09IENfQlJBQ0tFVF9PUEVOICYmXG4gICAgY2hhcmFjdGVyICE9PSBDX0JSQUNLRVRfQ0xPU0UgJiZcbiAgICAhd2hpdGVzcGFjZShjaGFyYWN0ZXIpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgd2hpdGVzcGFjZSA9IHJlcXVpcmUoJ2lzLXdoaXRlc3BhY2UtY2hhcmFjdGVyJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gdGFibGU7XG5cbnZhciBDX0JBQ0tTTEFTSCA9ICdcXFxcJztcbnZhciBDX1RJQ0sgPSAnYCc7XG52YXIgQ19EQVNIID0gJy0nO1xudmFyIENfUElQRSA9ICd8JztcbnZhciBDX0NPTE9OID0gJzonO1xudmFyIENfU1BBQ0UgPSAnICc7XG52YXIgQ19ORVdMSU5FID0gJ1xcbic7XG52YXIgQ19UQUIgPSAnXFx0JztcblxudmFyIE1JTl9UQUJMRV9DT0xVTU5TID0gMTtcbnZhciBNSU5fVEFCTEVfUk9XUyA9IDI7XG5cbnZhciBUQUJMRV9BTElHTl9MRUZUID0gJ2xlZnQnO1xudmFyIFRBQkxFX0FMSUdOX0NFTlRFUiA9ICdjZW50ZXInO1xudmFyIFRBQkxFX0FMSUdOX1JJR0hUID0gJ3JpZ2h0JztcbnZhciBUQUJMRV9BTElHTl9OT05FID0gbnVsbDtcblxuZnVuY3Rpb24gdGFibGUoZWF0LCB2YWx1ZSwgc2lsZW50KSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIGluZGV4O1xuICB2YXIgYWxpZ25tZW50cztcbiAgdmFyIGFsaWdubWVudDtcbiAgdmFyIHN1YnZhbHVlO1xuICB2YXIgcm93O1xuICB2YXIgbGVuZ3RoO1xuICB2YXIgbGluZXM7XG4gIHZhciBxdWV1ZTtcbiAgdmFyIGNoYXJhY3RlcjtcbiAgdmFyIGhhc0Rhc2g7XG4gIHZhciBhbGlnbjtcbiAgdmFyIGNlbGw7XG4gIHZhciBwcmVhbWJsZTtcbiAgdmFyIGNvdW50O1xuICB2YXIgb3BlbmluZztcbiAgdmFyIG5vdztcbiAgdmFyIHBvc2l0aW9uO1xuICB2YXIgbGluZUNvdW50O1xuICB2YXIgbGluZTtcbiAgdmFyIHJvd3M7XG4gIHZhciB0YWJsZTtcbiAgdmFyIGxpbmVJbmRleDtcbiAgdmFyIHBpcGVJbmRleDtcbiAgdmFyIGZpcnN0O1xuXG4gIC8qIEV4aXQgd2hlbiBub3QgaW4gZ2ZtLW1vZGUuICovXG4gIGlmICghc2VsZi5vcHRpb25zLmdmbSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qIEdldCB0aGUgcm93cy5cbiAgICogRGV0ZWN0aW5nIHRhYmxlcyBzb29uIGlzIGhhcmQsIHNvIHRoZXJlIGFyZSBzb21lXG4gICAqIGNoZWNrcyBmb3IgcGVyZm9ybWFuY2UgaGVyZSwgc3VjaCBhcyB0aGUgbWluaW11bVxuICAgKiBudW1iZXIgb2Ygcm93cywgYW5kIGFsbG93ZWQgY2hhcmFjdGVycyBpbiB0aGVcbiAgICogYWxpZ25tZW50IHJvdy4gKi9cbiAgaW5kZXggPSAwO1xuICBsaW5lQ291bnQgPSAwO1xuICBsZW5ndGggPSB2YWx1ZS5sZW5ndGggKyAxO1xuICBsaW5lcyA9IFtdO1xuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGxpbmVJbmRleCA9IHZhbHVlLmluZGV4T2YoQ19ORVdMSU5FLCBpbmRleCk7XG4gICAgcGlwZUluZGV4ID0gdmFsdWUuaW5kZXhPZihDX1BJUEUsIGluZGV4ICsgMSk7XG5cbiAgICBpZiAobGluZUluZGV4ID09PSAtMSkge1xuICAgICAgbGluZUluZGV4ID0gdmFsdWUubGVuZ3RoO1xuICAgIH1cblxuICAgIGlmIChwaXBlSW5kZXggPT09IC0xIHx8IHBpcGVJbmRleCA+IGxpbmVJbmRleCkge1xuICAgICAgaWYgKGxpbmVDb3VudCA8IE1JTl9UQUJMRV9ST1dTKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgbGluZXMucHVzaCh2YWx1ZS5zbGljZShpbmRleCwgbGluZUluZGV4KSk7XG4gICAgbGluZUNvdW50Kys7XG4gICAgaW5kZXggPSBsaW5lSW5kZXggKyAxO1xuICB9XG5cbiAgLyogUGFyc2UgdGhlIGFsaWdubWVudCByb3cuICovXG4gIHN1YnZhbHVlID0gbGluZXMuam9pbihDX05FV0xJTkUpO1xuICBhbGlnbm1lbnRzID0gbGluZXMuc3BsaWNlKDEsIDEpWzBdIHx8IFtdO1xuICBpbmRleCA9IDA7XG4gIGxlbmd0aCA9IGFsaWdubWVudHMubGVuZ3RoO1xuICBsaW5lQ291bnQtLTtcbiAgYWxpZ25tZW50ID0gZmFsc2U7XG4gIGFsaWduID0gW107XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gYWxpZ25tZW50cy5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKGNoYXJhY3RlciA9PT0gQ19QSVBFKSB7XG4gICAgICBoYXNEYXNoID0gbnVsbDtcblxuICAgICAgaWYgKGFsaWdubWVudCA9PT0gZmFsc2UpIHtcbiAgICAgICAgaWYgKGZpcnN0ID09PSBmYWxzZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWxpZ24ucHVzaChhbGlnbm1lbnQpO1xuICAgICAgICBhbGlnbm1lbnQgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgZmlyc3QgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKGNoYXJhY3RlciA9PT0gQ19EQVNIKSB7XG4gICAgICBoYXNEYXNoID0gdHJ1ZTtcbiAgICAgIGFsaWdubWVudCA9IGFsaWdubWVudCB8fCBUQUJMRV9BTElHTl9OT05FO1xuICAgIH0gZWxzZSBpZiAoY2hhcmFjdGVyID09PSBDX0NPTE9OKSB7XG4gICAgICBpZiAoYWxpZ25tZW50ID09PSBUQUJMRV9BTElHTl9MRUZUKSB7XG4gICAgICAgIGFsaWdubWVudCA9IFRBQkxFX0FMSUdOX0NFTlRFUjtcbiAgICAgIH0gZWxzZSBpZiAoaGFzRGFzaCAmJiBhbGlnbm1lbnQgPT09IFRBQkxFX0FMSUdOX05PTkUpIHtcbiAgICAgICAgYWxpZ25tZW50ID0gVEFCTEVfQUxJR05fUklHSFQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhbGlnbm1lbnQgPSBUQUJMRV9BTElHTl9MRUZUO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIXdoaXRlc3BhY2UoY2hhcmFjdGVyKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGluZGV4Kys7XG4gIH1cblxuICBpZiAoYWxpZ25tZW50ICE9PSBmYWxzZSkge1xuICAgIGFsaWduLnB1c2goYWxpZ25tZW50KTtcbiAgfVxuXG4gIC8qIEV4aXQgd2hlbiB3aXRob3V0IGVub3VnaCBjb2x1bW5zLiAqL1xuICBpZiAoYWxpZ24ubGVuZ3RoIDwgTUlOX1RBQkxFX0NPTFVNTlMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgLSBuZXZlciB1c2VkICh5ZXQpICovXG4gIGlmIChzaWxlbnQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qIFBhcnNlIHRoZSByb3dzLiAqL1xuICBwb3NpdGlvbiA9IC0xO1xuICByb3dzID0gW107XG5cbiAgdGFibGUgPSBlYXQoc3VidmFsdWUpLnJlc2V0KHtcbiAgICB0eXBlOiAndGFibGUnLFxuICAgIGFsaWduOiBhbGlnbixcbiAgICBjaGlsZHJlbjogcm93c1xuICB9KTtcblxuICB3aGlsZSAoKytwb3NpdGlvbiA8IGxpbmVDb3VudCkge1xuICAgIGxpbmUgPSBsaW5lc1twb3NpdGlvbl07XG4gICAgcm93ID0ge3R5cGU6ICd0YWJsZVJvdycsIGNoaWxkcmVuOiBbXX07XG5cbiAgICAvKiBFYXQgYSBuZXdsaW5lIGNoYXJhY3RlciB3aGVuIHRoaXMgaXMgbm90IHRoZVxuICAgICAqIGZpcnN0IHJvdy4gKi9cbiAgICBpZiAocG9zaXRpb24pIHtcbiAgICAgIGVhdChDX05FV0xJTkUpO1xuICAgIH1cblxuICAgIC8qIEVhdCB0aGUgcm93LiAqL1xuICAgIGVhdChsaW5lKS5yZXNldChyb3csIHRhYmxlKTtcblxuICAgIGxlbmd0aCA9IGxpbmUubGVuZ3RoICsgMTtcbiAgICBpbmRleCA9IDA7XG4gICAgcXVldWUgPSAnJztcbiAgICBjZWxsID0gJyc7XG4gICAgcHJlYW1ibGUgPSB0cnVlO1xuICAgIGNvdW50ID0gbnVsbDtcbiAgICBvcGVuaW5nID0gbnVsbDtcblxuICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgY2hhcmFjdGVyID0gbGluZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgICBpZiAoY2hhcmFjdGVyID09PSBDX1RBQiB8fCBjaGFyYWN0ZXIgPT09IENfU1BBQ0UpIHtcbiAgICAgICAgaWYgKGNlbGwpIHtcbiAgICAgICAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZWF0KGNoYXJhY3Rlcik7XG4gICAgICAgIH1cblxuICAgICAgICBpbmRleCsrO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNoYXJhY3RlciA9PT0gJycgfHwgY2hhcmFjdGVyID09PSBDX1BJUEUpIHtcbiAgICAgICAgaWYgKHByZWFtYmxlKSB7XG4gICAgICAgICAgZWF0KGNoYXJhY3Rlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGNoYXJhY3RlciAmJiBvcGVuaW5nKSB7XG4gICAgICAgICAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgICAgICAgICBpbmRleCsrO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKChjZWxsIHx8IGNoYXJhY3RlcikgJiYgIXByZWFtYmxlKSB7XG4gICAgICAgICAgICBzdWJ2YWx1ZSA9IGNlbGw7XG5cbiAgICAgICAgICAgIGlmIChxdWV1ZS5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgIGlmIChjaGFyYWN0ZXIpIHtcbiAgICAgICAgICAgICAgICBzdWJ2YWx1ZSArPSBxdWV1ZS5zbGljZSgwLCBxdWV1ZS5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgICAgICBxdWV1ZSA9IHF1ZXVlLmNoYXJBdChxdWV1ZS5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdWJ2YWx1ZSArPSBxdWV1ZTtcbiAgICAgICAgICAgICAgICBxdWV1ZSA9ICcnO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG5vdyA9IGVhdC5ub3coKTtcblxuICAgICAgICAgICAgZWF0KHN1YnZhbHVlKSh7XG4gICAgICAgICAgICAgIHR5cGU6ICd0YWJsZUNlbGwnLFxuICAgICAgICAgICAgICBjaGlsZHJlbjogc2VsZi50b2tlbml6ZUlubGluZShjZWxsLCBub3cpXG4gICAgICAgICAgICB9LCByb3cpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGVhdChxdWV1ZSArIGNoYXJhY3Rlcik7XG5cbiAgICAgICAgICBxdWV1ZSA9ICcnO1xuICAgICAgICAgIGNlbGwgPSAnJztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHF1ZXVlKSB7XG4gICAgICAgICAgY2VsbCArPSBxdWV1ZTtcbiAgICAgICAgICBxdWV1ZSA9ICcnO1xuICAgICAgICB9XG5cbiAgICAgICAgY2VsbCArPSBjaGFyYWN0ZXI7XG5cbiAgICAgICAgaWYgKGNoYXJhY3RlciA9PT0gQ19CQUNLU0xBU0ggJiYgaW5kZXggIT09IGxlbmd0aCAtIDIpIHtcbiAgICAgICAgICBjZWxsICs9IGxpbmUuY2hhckF0KGluZGV4ICsgMSk7XG4gICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjaGFyYWN0ZXIgPT09IENfVElDSykge1xuICAgICAgICAgIGNvdW50ID0gMTtcblxuICAgICAgICAgIHdoaWxlIChsaW5lLmNoYXJBdChpbmRleCArIDEpID09PSBjaGFyYWN0ZXIpIHtcbiAgICAgICAgICAgIGNlbGwgKz0gY2hhcmFjdGVyO1xuICAgICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFvcGVuaW5nKSB7XG4gICAgICAgICAgICBvcGVuaW5nID0gY291bnQ7XG4gICAgICAgICAgfSBlbHNlIGlmIChjb3VudCA+PSBvcGVuaW5nKSB7XG4gICAgICAgICAgICBvcGVuaW5nID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcHJlYW1ibGUgPSBmYWxzZTtcbiAgICAgIGluZGV4Kys7XG4gICAgfVxuXG4gICAgLyogRWF0IHRoZSBhbGlnbm1lbnQgcm93LiAqL1xuICAgIGlmICghcG9zaXRpb24pIHtcbiAgICAgIGVhdChDX05FV0xJTkUgKyBhbGlnbm1lbnRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFibGU7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB0cmltID0gcmVxdWlyZSgndHJpbScpO1xudmFyIGRlY2ltYWwgPSByZXF1aXJlKCdpcy1kZWNpbWFsJyk7XG52YXIgdHJpbVRyYWlsaW5nTGluZXMgPSByZXF1aXJlKCd0cmltLXRyYWlsaW5nLWxpbmVzJyk7XG52YXIgaW50ZXJydXB0ID0gcmVxdWlyZSgnLi4vdXRpbC9pbnRlcnJ1cHQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBwYXJhZ3JhcGg7XG5cbnZhciBDX05FV0xJTkUgPSAnXFxuJztcbnZhciBDX1RBQiA9ICdcXHQnO1xudmFyIENfU1BBQ0UgPSAnICc7XG5cbnZhciBUQUJfU0laRSA9IDQ7XG5cbi8qIFRva2VuaXNlIHBhcmFncmFwaC4gKi9cbmZ1bmN0aW9uIHBhcmFncmFwaChlYXQsIHZhbHVlLCBzaWxlbnQpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgc2V0dGluZ3MgPSBzZWxmLm9wdGlvbnM7XG4gIHZhciBjb21tb25tYXJrID0gc2V0dGluZ3MuY29tbW9ubWFyaztcbiAgdmFyIGdmbSA9IHNldHRpbmdzLmdmbTtcbiAgdmFyIHRva2VuaXplcnMgPSBzZWxmLmJsb2NrVG9rZW5pemVycztcbiAgdmFyIGludGVycnVwdG9ycyA9IHNlbGYuaW50ZXJydXB0UGFyYWdyYXBoO1xuICB2YXIgaW5kZXggPSB2YWx1ZS5pbmRleE9mKENfTkVXTElORSk7XG4gIHZhciBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gIHZhciBwb3NpdGlvbjtcbiAgdmFyIHN1YnZhbHVlO1xuICB2YXIgY2hhcmFjdGVyO1xuICB2YXIgc2l6ZTtcbiAgdmFyIG5vdztcblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAvKiBFYXQgZXZlcnl0aGluZyBpZiB0aGVyZeKAmXMgbm8gZm9sbG93aW5nIG5ld2xpbmUuICovXG4gICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgaW5kZXggPSBsZW5ndGg7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICAvKiBTdG9wIGlmIHRoZSBuZXh0IGNoYXJhY3RlciBpcyBORVdMSU5FLiAqL1xuICAgIGlmICh2YWx1ZS5jaGFyQXQoaW5kZXggKyAxKSA9PT0gQ19ORVdMSU5FKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICAvKiBJbiBjb21tb25tYXJrLW1vZGUsIGZvbGxvd2luZyBpbmRlbnRlZCBsaW5lc1xuICAgICAqIGFyZSBwYXJ0IG9mIHRoZSBwYXJhZ3JhcGguICovXG4gICAgaWYgKGNvbW1vbm1hcmspIHtcbiAgICAgIHNpemUgPSAwO1xuICAgICAgcG9zaXRpb24gPSBpbmRleCArIDE7XG5cbiAgICAgIHdoaWxlIChwb3NpdGlvbiA8IGxlbmd0aCkge1xuICAgICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQocG9zaXRpb24pO1xuXG4gICAgICAgIGlmIChjaGFyYWN0ZXIgPT09IENfVEFCKSB7XG4gICAgICAgICAgc2l6ZSA9IFRBQl9TSVpFO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYXJhY3RlciA9PT0gQ19TUEFDRSkge1xuICAgICAgICAgIHNpemUrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHBvc2l0aW9uKys7XG4gICAgICB9XG5cbiAgICAgIGlmIChzaXplID49IFRBQl9TSVpFKSB7XG4gICAgICAgIGluZGV4ID0gdmFsdWUuaW5kZXhPZihDX05FV0xJTkUsIGluZGV4ICsgMSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHN1YnZhbHVlID0gdmFsdWUuc2xpY2UoaW5kZXggKyAxKTtcblxuICAgIC8qIENoZWNrIGlmIHRoZSBmb2xsb3dpbmcgY29kZSBjb250YWlucyBhIHBvc3NpYmxlXG4gICAgICogYmxvY2suICovXG4gICAgaWYgKGludGVycnVwdChpbnRlcnJ1cHRvcnMsIHRva2VuaXplcnMsIHNlbGYsIFtlYXQsIHN1YnZhbHVlLCB0cnVlXSkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIC8qIEJyZWFrIGlmIHRoZSBmb2xsb3dpbmcgbGluZSBzdGFydHMgYSBsaXN0LCB3aGVuXG4gICAgICogYWxyZWFkeSBpbiBhIGxpc3QsIG9yIHdoZW4gaW4gY29tbW9ubWFyaywgb3Igd2hlblxuICAgICAqIGluIGdmbSBtb2RlIGFuZCB0aGUgYnVsbGV0IGlzICpub3QqIG51bWVyaWMuICovXG4gICAgaWYgKFxuICAgICAgdG9rZW5pemVycy5saXN0LmNhbGwoc2VsZiwgZWF0LCBzdWJ2YWx1ZSwgdHJ1ZSkgJiZcbiAgICAgIChcbiAgICAgICAgc2VsZi5pbkxpc3QgfHxcbiAgICAgICAgY29tbW9ubWFyayB8fFxuICAgICAgICAoZ2ZtICYmICFkZWNpbWFsKHRyaW0ubGVmdChzdWJ2YWx1ZSkuY2hhckF0KDApKSlcbiAgICAgIClcbiAgICApIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHBvc2l0aW9uID0gaW5kZXg7XG4gICAgaW5kZXggPSB2YWx1ZS5pbmRleE9mKENfTkVXTElORSwgaW5kZXggKyAxKTtcblxuICAgIGlmIChpbmRleCAhPT0gLTEgJiYgdHJpbSh2YWx1ZS5zbGljZShwb3NpdGlvbiwgaW5kZXgpKSA9PT0gJycpIHtcbiAgICAgIGluZGV4ID0gcG9zaXRpb247XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBzdWJ2YWx1ZSA9IHZhbHVlLnNsaWNlKDAsIGluZGV4KTtcblxuICBpZiAodHJpbShzdWJ2YWx1ZSkgPT09ICcnKSB7XG4gICAgZWF0KHN1YnZhbHVlKTtcblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmIC0gbmV2ZXIgdXNlZCAoeWV0KSAqL1xuICBpZiAoc2lsZW50KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBub3cgPSBlYXQubm93KCk7XG4gIHN1YnZhbHVlID0gdHJpbVRyYWlsaW5nTGluZXMoc3VidmFsdWUpO1xuXG4gIHJldHVybiBlYXQoc3VidmFsdWUpKHtcbiAgICB0eXBlOiAncGFyYWdyYXBoJyxcbiAgICBjaGlsZHJlbjogc2VsZi50b2tlbml6ZUlubGluZShzdWJ2YWx1ZSwgbm93KVxuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGxvY2F0ZSA9IHJlcXVpcmUoJy4uL2xvY2F0ZS9lc2NhcGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBlc2NhcGU7XG5lc2NhcGUubG9jYXRvciA9IGxvY2F0ZTtcblxuZnVuY3Rpb24gZXNjYXBlKGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBjaGFyYWN0ZXI7XG4gIHZhciBub2RlO1xuXG4gIGlmICh2YWx1ZS5jaGFyQXQoMCkgPT09ICdcXFxcJykge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdCgxKTtcblxuICAgIGlmIChzZWxmLmVzY2FwZS5pbmRleE9mKGNoYXJhY3RlcikgIT09IC0xKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgLSBuZXZlciB1c2VkICh5ZXQpICovXG4gICAgICBpZiAoc2lsZW50KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2hhcmFjdGVyID09PSAnXFxuJykge1xuICAgICAgICBub2RlID0ge3R5cGU6ICdicmVhayd9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZSA9IHtcbiAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgdmFsdWU6IGNoYXJhY3RlclxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZWF0KCdcXFxcJyArIGNoYXJhY3Rlcikobm9kZSk7XG4gICAgfVxuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gbG9jYXRlO1xuXG5mdW5jdGlvbiBsb2NhdGUodmFsdWUsIGZyb21JbmRleCkge1xuICByZXR1cm4gdmFsdWUuaW5kZXhPZignXFxcXCcsIGZyb21JbmRleCk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB3aGl0ZXNwYWNlID0gcmVxdWlyZSgnaXMtd2hpdGVzcGFjZS1jaGFyYWN0ZXInKTtcbnZhciBkZWNvZGUgPSByZXF1aXJlKCdwYXJzZS1lbnRpdGllcycpO1xudmFyIGxvY2F0ZSA9IHJlcXVpcmUoJy4uL2xvY2F0ZS90YWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBhdXRvTGluaztcbmF1dG9MaW5rLmxvY2F0b3IgPSBsb2NhdGU7XG5hdXRvTGluay5ub3RJbkxpbmsgPSB0cnVlO1xuXG52YXIgQ19MVCA9ICc8JztcbnZhciBDX0dUID0gJz4nO1xudmFyIENfQVRfU0lHTiA9ICdAJztcbnZhciBDX1NMQVNIID0gJy8nO1xudmFyIE1BSUxUTyA9ICdtYWlsdG86JztcbnZhciBNQUlMVE9fTEVOR1RIID0gTUFJTFRPLmxlbmd0aDtcblxuLyogVG9rZW5pc2UgYSBsaW5rLiAqL1xuZnVuY3Rpb24gYXV0b0xpbmsoZWF0LCB2YWx1ZSwgc2lsZW50KSB7XG4gIHZhciBzZWxmO1xuICB2YXIgc3VidmFsdWU7XG4gIHZhciBsZW5ndGg7XG4gIHZhciBpbmRleDtcbiAgdmFyIHF1ZXVlO1xuICB2YXIgY2hhcmFjdGVyO1xuICB2YXIgaGFzQXRDaGFyYWN0ZXI7XG4gIHZhciBsaW5rO1xuICB2YXIgbm93O1xuICB2YXIgY29udGVudDtcbiAgdmFyIHRva2VuaXplcnM7XG4gIHZhciBleGl0O1xuXG4gIGlmICh2YWx1ZS5jaGFyQXQoMCkgIT09IENfTFQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBzZWxmID0gdGhpcztcbiAgc3VidmFsdWUgPSAnJztcbiAgbGVuZ3RoID0gdmFsdWUubGVuZ3RoO1xuICBpbmRleCA9IDA7XG4gIHF1ZXVlID0gJyc7XG4gIGhhc0F0Q2hhcmFjdGVyID0gZmFsc2U7XG4gIGxpbmsgPSAnJztcblxuICBpbmRleCsrO1xuICBzdWJ2YWx1ZSA9IENfTFQ7XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmIChcbiAgICAgIHdoaXRlc3BhY2UoY2hhcmFjdGVyKSB8fFxuICAgICAgY2hhcmFjdGVyID09PSBDX0dUIHx8XG4gICAgICBjaGFyYWN0ZXIgPT09IENfQVRfU0lHTiB8fFxuICAgICAgKGNoYXJhY3RlciA9PT0gJzonICYmIHZhbHVlLmNoYXJBdChpbmRleCArIDEpID09PSBDX1NMQVNIKVxuICAgICkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgIGluZGV4Kys7XG4gIH1cblxuICBpZiAoIXF1ZXVlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGluayArPSBxdWV1ZTtcbiAgcXVldWUgPSAnJztcblxuICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuICBsaW5rICs9IGNoYXJhY3RlcjtcbiAgaW5kZXgrKztcblxuICBpZiAoY2hhcmFjdGVyID09PSBDX0FUX1NJR04pIHtcbiAgICBoYXNBdENoYXJhY3RlciA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgaWYgKFxuICAgICAgY2hhcmFjdGVyICE9PSAnOicgfHxcbiAgICAgIHZhbHVlLmNoYXJBdChpbmRleCArIDEpICE9PSBDX1NMQVNIXG4gICAgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGluayArPSBDX1NMQVNIO1xuICAgIGluZGV4Kys7XG4gIH1cblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKHdoaXRlc3BhY2UoY2hhcmFjdGVyKSB8fCBjaGFyYWN0ZXIgPT09IENfR1QpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICBpbmRleCsrO1xuICB9XG5cbiAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICBpZiAoIXF1ZXVlIHx8IGNoYXJhY3RlciAhPT0gQ19HVCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAtIG5ldmVyIHVzZWQgKHlldCkgKi9cbiAgaWYgKHNpbGVudCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgbGluayArPSBxdWV1ZTtcbiAgY29udGVudCA9IGxpbms7XG4gIHN1YnZhbHVlICs9IGxpbmsgKyBjaGFyYWN0ZXI7XG4gIG5vdyA9IGVhdC5ub3coKTtcbiAgbm93LmNvbHVtbisrO1xuICBub3cub2Zmc2V0Kys7XG5cbiAgaWYgKGhhc0F0Q2hhcmFjdGVyKSB7XG4gICAgaWYgKGxpbmsuc2xpY2UoMCwgTUFJTFRPX0xFTkdUSCkudG9Mb3dlckNhc2UoKSA9PT0gTUFJTFRPKSB7XG4gICAgICBjb250ZW50ID0gY29udGVudC5zdWJzdHIoTUFJTFRPX0xFTkdUSCk7XG4gICAgICBub3cuY29sdW1uICs9IE1BSUxUT19MRU5HVEg7XG4gICAgICBub3cub2Zmc2V0ICs9IE1BSUxUT19MRU5HVEg7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxpbmsgPSBNQUlMVE8gKyBsaW5rO1xuICAgIH1cbiAgfVxuXG4gIC8qIFRlbXBvcmFyaWx5IHJlbW92ZSBhbGwgdG9rZW5pemVycyBleGNlcHQgdGV4dCBpbiBhdXRvbGlua3MuICovXG4gIHRva2VuaXplcnMgPSBzZWxmLmlubGluZVRva2VuaXplcnM7XG4gIHNlbGYuaW5saW5lVG9rZW5pemVycyA9IHt0ZXh0OiB0b2tlbml6ZXJzLnRleHR9O1xuXG4gIGV4aXQgPSBzZWxmLmVudGVyTGluaygpO1xuXG4gIGNvbnRlbnQgPSBzZWxmLnRva2VuaXplSW5saW5lKGNvbnRlbnQsIG5vdyk7XG5cbiAgc2VsZi5pbmxpbmVUb2tlbml6ZXJzID0gdG9rZW5pemVycztcbiAgZXhpdCgpO1xuXG4gIHJldHVybiBlYXQoc3VidmFsdWUpKHtcbiAgICB0eXBlOiAnbGluaycsXG4gICAgdGl0bGU6IG51bGwsXG4gICAgdXJsOiBkZWNvZGUobGluaywge25vblRlcm1pbmF0ZWQ6IGZhbHNlfSksXG4gICAgY2hpbGRyZW46IGNvbnRlbnRcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkZWNvZGUgPSByZXF1aXJlKCdwYXJzZS1lbnRpdGllcycpO1xudmFyIHdoaXRlc3BhY2UgPSByZXF1aXJlKCdpcy13aGl0ZXNwYWNlLWNoYXJhY3RlcicpO1xudmFyIGxvY2F0ZSA9IHJlcXVpcmUoJy4uL2xvY2F0ZS91cmwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB1cmw7XG51cmwubG9jYXRvciA9IGxvY2F0ZTtcbnVybC5ub3RJbkxpbmsgPSB0cnVlO1xuXG52YXIgQ19CUkFDS0VUX09QRU4gPSAnWyc7XG52YXIgQ19CUkFDS0VUX0NMT1NFID0gJ10nO1xudmFyIENfUEFSRU5fT1BFTiA9ICcoJztcbnZhciBDX1BBUkVOX0NMT1NFID0gJyknO1xudmFyIENfTFQgPSAnPCc7XG52YXIgQ19BVF9TSUdOID0gJ0AnO1xuXG52YXIgSFRUUF9QUk9UT0NPTCA9ICdodHRwOi8vJztcbnZhciBIVFRQU19QUk9UT0NPTCA9ICdodHRwczovLyc7XG52YXIgTUFJTFRPX1BST1RPQ09MID0gJ21haWx0bzonO1xuXG52YXIgUFJPVE9DT0xTID0gW1xuICBIVFRQX1BST1RPQ09MLFxuICBIVFRQU19QUk9UT0NPTCxcbiAgTUFJTFRPX1BST1RPQ09MXG5dO1xuXG52YXIgUFJPVE9DT0xTX0xFTkdUSCA9IFBST1RPQ09MUy5sZW5ndGg7XG5cbmZ1bmN0aW9uIHVybChlYXQsIHZhbHVlLCBzaWxlbnQpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgc3VidmFsdWU7XG4gIHZhciBjb250ZW50O1xuICB2YXIgY2hhcmFjdGVyO1xuICB2YXIgaW5kZXg7XG4gIHZhciBwb3NpdGlvbjtcbiAgdmFyIHByb3RvY29sO1xuICB2YXIgbWF0Y2g7XG4gIHZhciBsZW5ndGg7XG4gIHZhciBxdWV1ZTtcbiAgdmFyIHBhcmVuQ291bnQ7XG4gIHZhciBuZXh0Q2hhcmFjdGVyO1xuICB2YXIgZXhpdDtcblxuICBpZiAoIXNlbGYub3B0aW9ucy5nZm0pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBzdWJ2YWx1ZSA9ICcnO1xuICBpbmRleCA9IC0xO1xuICBsZW5ndGggPSBQUk9UT0NPTFNfTEVOR1RIO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgcHJvdG9jb2wgPSBQUk9UT0NPTFNbaW5kZXhdO1xuICAgIG1hdGNoID0gdmFsdWUuc2xpY2UoMCwgcHJvdG9jb2wubGVuZ3RoKTtcblxuICAgIGlmIChtYXRjaC50b0xvd2VyQ2FzZSgpID09PSBwcm90b2NvbCkge1xuICAgICAgc3VidmFsdWUgPSBtYXRjaDtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmICghc3VidmFsdWUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpbmRleCA9IHN1YnZhbHVlLmxlbmd0aDtcbiAgbGVuZ3RoID0gdmFsdWUubGVuZ3RoO1xuICBxdWV1ZSA9ICcnO1xuICBwYXJlbkNvdW50ID0gMDtcblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKHdoaXRlc3BhY2UoY2hhcmFjdGVyKSB8fCBjaGFyYWN0ZXIgPT09IENfTFQpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgIGNoYXJhY3RlciA9PT0gJy4nIHx8XG4gICAgICBjaGFyYWN0ZXIgPT09ICcsJyB8fFxuICAgICAgY2hhcmFjdGVyID09PSAnOicgfHxcbiAgICAgIGNoYXJhY3RlciA9PT0gJzsnIHx8XG4gICAgICBjaGFyYWN0ZXIgPT09ICdcIicgfHxcbiAgICAgIGNoYXJhY3RlciA9PT0gJ1xcJycgfHxcbiAgICAgIGNoYXJhY3RlciA9PT0gJyknIHx8XG4gICAgICBjaGFyYWN0ZXIgPT09ICddJ1xuICAgICkge1xuICAgICAgbmV4dENoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCArIDEpO1xuXG4gICAgICBpZiAoIW5leHRDaGFyYWN0ZXIgfHwgd2hpdGVzcGFjZShuZXh0Q2hhcmFjdGVyKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY2hhcmFjdGVyID09PSBDX1BBUkVOX09QRU4gfHwgY2hhcmFjdGVyID09PSBDX0JSQUNLRVRfT1BFTikge1xuICAgICAgcGFyZW5Db3VudCsrO1xuICAgIH1cblxuICAgIGlmIChjaGFyYWN0ZXIgPT09IENfUEFSRU5fQ0xPU0UgfHwgY2hhcmFjdGVyID09PSBDX0JSQUNLRVRfQ0xPU0UpIHtcbiAgICAgIHBhcmVuQ291bnQtLTtcblxuICAgICAgaWYgKHBhcmVuQ291bnQgPCAwKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICBpbmRleCsrO1xuICB9XG5cbiAgaWYgKCFxdWV1ZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHN1YnZhbHVlICs9IHF1ZXVlO1xuICBjb250ZW50ID0gc3VidmFsdWU7XG5cbiAgaWYgKHByb3RvY29sID09PSBNQUlMVE9fUFJPVE9DT0wpIHtcbiAgICBwb3NpdGlvbiA9IHF1ZXVlLmluZGV4T2YoQ19BVF9TSUdOKTtcblxuICAgIGlmIChwb3NpdGlvbiA9PT0gLTEgfHwgcG9zaXRpb24gPT09IGxlbmd0aCAtIDEpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb250ZW50ID0gY29udGVudC5zdWJzdHIoTUFJTFRPX1BST1RPQ09MLmxlbmd0aCk7XG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgLSBuZXZlciB1c2VkICh5ZXQpICovXG4gIGlmIChzaWxlbnQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGV4aXQgPSBzZWxmLmVudGVyTGluaygpO1xuICBjb250ZW50ID0gc2VsZi50b2tlbml6ZUlubGluZShjb250ZW50LCBlYXQubm93KCkpO1xuICBleGl0KCk7XG5cbiAgcmV0dXJuIGVhdChzdWJ2YWx1ZSkoe1xuICAgIHR5cGU6ICdsaW5rJyxcbiAgICB0aXRsZTogbnVsbCxcbiAgICB1cmw6IGRlY29kZShzdWJ2YWx1ZSwge25vblRlcm1pbmF0ZWQ6IGZhbHNlfSksXG4gICAgY2hpbGRyZW46IGNvbnRlbnRcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gbG9jYXRlO1xuXG52YXIgUFJPVE9DT0xTID0gWydodHRwczovLycsICdodHRwOi8vJywgJ21haWx0bzonXTtcblxuZnVuY3Rpb24gbG9jYXRlKHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgdmFyIGxlbmd0aCA9IFBST1RPQ09MUy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IC0xO1xuICB2YXIgbWluID0gLTE7XG4gIHZhciBwb3NpdGlvbjtcblxuICBpZiAoIXRoaXMub3B0aW9ucy5nZm0pIHtcbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHBvc2l0aW9uID0gdmFsdWUuaW5kZXhPZihQUk9UT0NPTFNbaW5kZXhdLCBmcm9tSW5kZXgpO1xuXG4gICAgaWYgKHBvc2l0aW9uICE9PSAtMSAmJiAocG9zaXRpb24gPCBtaW4gfHwgbWluID09PSAtMSkpIHtcbiAgICAgIG1pbiA9IHBvc2l0aW9uO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtaW47XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhbHBoYWJldGljYWwgPSByZXF1aXJlKCdpcy1hbHBoYWJldGljYWwnKTtcbnZhciBsb2NhdGUgPSByZXF1aXJlKCcuLi9sb2NhdGUvdGFnJyk7XG52YXIgdGFnID0gcmVxdWlyZSgnLi4vdXRpbC9odG1sJykudGFnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlubGluZUhUTUw7XG5pbmxpbmVIVE1MLmxvY2F0b3IgPSBsb2NhdGU7XG5cbnZhciBFWFBSRVNTSU9OX0hUTUxfTElOS19PUEVOID0gL148YSAvaTtcbnZhciBFWFBSRVNTSU9OX0hUTUxfTElOS19DTE9TRSA9IC9ePFxcL2E+L2k7XG5cbmZ1bmN0aW9uIGlubGluZUhUTUwoZWF0LCB2YWx1ZSwgc2lsZW50KSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcbiAgdmFyIGNoYXJhY3RlcjtcbiAgdmFyIHN1YnZhbHVlO1xuXG4gIGlmICh2YWx1ZS5jaGFyQXQoMCkgIT09ICc8JyB8fCBsZW5ndGggPCAzKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KDEpO1xuXG4gIGlmIChcbiAgICAhYWxwaGFiZXRpY2FsKGNoYXJhY3RlcikgJiZcbiAgICBjaGFyYWN0ZXIgIT09ICc/JyAmJlxuICAgIGNoYXJhY3RlciAhPT0gJyEnICYmXG4gICAgY2hhcmFjdGVyICE9PSAnLydcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3VidmFsdWUgPSB2YWx1ZS5tYXRjaCh0YWcpO1xuXG4gIGlmICghc3VidmFsdWUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgLSBub3QgdXNlZCB5ZXQuICovXG4gIGlmIChzaWxlbnQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHN1YnZhbHVlID0gc3VidmFsdWVbMF07XG5cbiAgaWYgKCFzZWxmLmluTGluayAmJiBFWFBSRVNTSU9OX0hUTUxfTElOS19PUEVOLnRlc3Qoc3VidmFsdWUpKSB7XG4gICAgc2VsZi5pbkxpbmsgPSB0cnVlO1xuICB9IGVsc2UgaWYgKHNlbGYuaW5MaW5rICYmIEVYUFJFU1NJT05fSFRNTF9MSU5LX0NMT1NFLnRlc3Qoc3VidmFsdWUpKSB7XG4gICAgc2VsZi5pbkxpbmsgPSBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBlYXQoc3VidmFsdWUpKHt0eXBlOiAnaHRtbCcsIHZhbHVlOiBzdWJ2YWx1ZX0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgd2hpdGVzcGFjZSA9IHJlcXVpcmUoJ2lzLXdoaXRlc3BhY2UtY2hhcmFjdGVyJyk7XG52YXIgbG9jYXRlID0gcmVxdWlyZSgnLi4vbG9jYXRlL2xpbmsnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBsaW5rO1xubGluay5sb2NhdG9yID0gbG9jYXRlO1xuXG52YXIgb3duID0ge30uaGFzT3duUHJvcGVydHk7XG5cbnZhciBDX0JBQ0tTTEFTSCA9ICdcXFxcJztcbnZhciBDX0JSQUNLRVRfT1BFTiA9ICdbJztcbnZhciBDX0JSQUNLRVRfQ0xPU0UgPSAnXSc7XG52YXIgQ19QQVJFTl9PUEVOID0gJygnO1xudmFyIENfUEFSRU5fQ0xPU0UgPSAnKSc7XG52YXIgQ19MVCA9ICc8JztcbnZhciBDX0dUID0gJz4nO1xudmFyIENfVElDSyA9ICdgJztcbnZhciBDX0RPVUJMRV9RVU9URSA9ICdcIic7XG52YXIgQ19TSU5HTEVfUVVPVEUgPSAnXFwnJztcblxuLyogTWFwIG9mIGNoYXJhY3RlcnMsIHdoaWNoIGNhbiBiZSB1c2VkIHRvIG1hcmsgbGlua1xuICogYW5kIGltYWdlIHRpdGxlcy4gKi9cbnZhciBMSU5LX01BUktFUlMgPSB7fTtcblxuTElOS19NQVJLRVJTW0NfRE9VQkxFX1FVT1RFXSA9IENfRE9VQkxFX1FVT1RFO1xuTElOS19NQVJLRVJTW0NfU0lOR0xFX1FVT1RFXSA9IENfU0lOR0xFX1FVT1RFO1xuXG4vKiBNYXAgb2YgY2hhcmFjdGVycywgd2hpY2ggY2FuIGJlIHVzZWQgdG8gbWFyayBsaW5rXG4gKiBhbmQgaW1hZ2UgdGl0bGVzIGluIGNvbW1vbm1hcmstbW9kZS4gKi9cbnZhciBDT01NT05NQVJLX0xJTktfTUFSS0VSUyA9IHt9O1xuXG5DT01NT05NQVJLX0xJTktfTUFSS0VSU1tDX0RPVUJMRV9RVU9URV0gPSBDX0RPVUJMRV9RVU9URTtcbkNPTU1PTk1BUktfTElOS19NQVJLRVJTW0NfU0lOR0xFX1FVT1RFXSA9IENfU0lOR0xFX1FVT1RFO1xuQ09NTU9OTUFSS19MSU5LX01BUktFUlNbQ19QQVJFTl9PUEVOXSA9IENfUEFSRU5fQ0xPU0U7XG5cbmZ1bmN0aW9uIGxpbmsoZWF0LCB2YWx1ZSwgc2lsZW50KSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHN1YnZhbHVlID0gJyc7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoMCk7XG4gIHZhciBwZWRhbnRpYyA9IHNlbGYub3B0aW9ucy5wZWRhbnRpYztcbiAgdmFyIGNvbW1vbm1hcmsgPSBzZWxmLm9wdGlvbnMuY29tbW9ubWFyaztcbiAgdmFyIGdmbSA9IHNlbGYub3B0aW9ucy5nZm07XG4gIHZhciBjbG9zZWQ7XG4gIHZhciBjb3VudDtcbiAgdmFyIG9wZW5pbmc7XG4gIHZhciBiZWZvcmVVUkw7XG4gIHZhciBiZWZvcmVUaXRsZTtcbiAgdmFyIHN1YnF1ZXVlO1xuICB2YXIgaGFzTWFya2VyO1xuICB2YXIgbWFya2VycztcbiAgdmFyIGlzSW1hZ2U7XG4gIHZhciBjb250ZW50O1xuICB2YXIgbWFya2VyO1xuICB2YXIgbGVuZ3RoO1xuICB2YXIgdGl0bGU7XG4gIHZhciBkZXB0aDtcbiAgdmFyIHF1ZXVlO1xuICB2YXIgdXJsO1xuICB2YXIgbm93O1xuICB2YXIgZXhpdDtcbiAgdmFyIG5vZGU7XG5cbiAgLyogRGV0ZWN0IHdoZXRoZXIgdGhpcyBpcyBhbiBpbWFnZS4gKi9cbiAgaWYgKGNoYXJhY3RlciA9PT0gJyEnKSB7XG4gICAgaXNJbWFnZSA9IHRydWU7XG4gICAgc3VidmFsdWUgPSBjaGFyYWN0ZXI7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KCsraW5kZXgpO1xuICB9XG5cbiAgLyogRWF0IHRoZSBvcGVuaW5nLiAqL1xuICBpZiAoY2hhcmFjdGVyICE9PSBDX0JSQUNLRVRfT1BFTikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qIEV4aXQgd2hlbiB0aGlzIGlzIGEgbGluayBhbmQgd2XigJlyZSBhbHJlYWR5IGluc2lkZVxuICAgKiBhIGxpbmsuICovXG4gIGlmICghaXNJbWFnZSAmJiBzZWxmLmluTGluaykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHN1YnZhbHVlICs9IGNoYXJhY3RlcjtcbiAgcXVldWUgPSAnJztcbiAgaW5kZXgrKztcblxuICAvKiBFYXQgdGhlIGNvbnRlbnQuICovXG4gIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcbiAgbm93ID0gZWF0Lm5vdygpO1xuICBkZXB0aCA9IDA7XG5cbiAgbm93LmNvbHVtbiArPSBpbmRleDtcbiAgbm93Lm9mZnNldCArPSBpbmRleDtcblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuICAgIHN1YnF1ZXVlID0gY2hhcmFjdGVyO1xuXG4gICAgaWYgKGNoYXJhY3RlciA9PT0gQ19USUNLKSB7XG4gICAgICAvKiBJbmxpbmUtY29kZSBpbiBsaW5rIGNvbnRlbnQuICovXG4gICAgICBjb3VudCA9IDE7XG5cbiAgICAgIHdoaWxlICh2YWx1ZS5jaGFyQXQoaW5kZXggKyAxKSA9PT0gQ19USUNLKSB7XG4gICAgICAgIHN1YnF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgICAgaW5kZXgrKztcbiAgICAgICAgY291bnQrKztcbiAgICAgIH1cblxuICAgICAgaWYgKCFvcGVuaW5nKSB7XG4gICAgICAgIG9wZW5pbmcgPSBjb3VudDtcbiAgICAgIH0gZWxzZSBpZiAoY291bnQgPj0gb3BlbmluZykge1xuICAgICAgICBvcGVuaW5nID0gMDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNoYXJhY3RlciA9PT0gQ19CQUNLU0xBU0gpIHtcbiAgICAgIC8qIEFsbG93IGJyYWNrZXRzIHRvIGJlIGVzY2FwZWQuICovXG4gICAgICBpbmRleCsrO1xuICAgICAgc3VicXVldWUgKz0gdmFsdWUuY2hhckF0KGluZGV4KTtcbiAgICAvKiBJbiBHRk0gbW9kZSwgYnJhY2tldHMgaW4gY29kZSBzdGlsbCBjb3VudC5cbiAgICAgKiBJbiBhbGwgb3RoZXIgbW9kZXMsIHRoZXkgZG9u4oCZdC4gIFRoaXMgZW1wdHlcbiAgICAgKiBibG9jayBwcmV2ZW50cyB0aGUgbmV4dCBzdGF0ZW1lbnRzIGFyZVxuICAgICAqIGVudGVyZWQuICovXG4gICAgfSBlbHNlIGlmICgoIW9wZW5pbmcgfHwgZ2ZtKSAmJiBjaGFyYWN0ZXIgPT09IENfQlJBQ0tFVF9PUEVOKSB7XG4gICAgICBkZXB0aCsrO1xuICAgIH0gZWxzZSBpZiAoKCFvcGVuaW5nIHx8IGdmbSkgJiYgY2hhcmFjdGVyID09PSBDX0JSQUNLRVRfQ0xPU0UpIHtcbiAgICAgIGlmIChkZXB0aCkge1xuICAgICAgICBkZXB0aC0tO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyogQWxsb3cgd2hpdGUtc3BhY2UgYmV0d2VlbiBjb250ZW50IGFuZFxuICAgICAgICAgKiB1cmwgaW4gR0ZNIG1vZGUuICovXG4gICAgICAgIGlmICghcGVkYW50aWMpIHtcbiAgICAgICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCArIDEpO1xuXG4gICAgICAgICAgICBpZiAoIXdoaXRlc3BhY2UoY2hhcmFjdGVyKSkge1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc3VicXVldWUgKz0gY2hhcmFjdGVyO1xuICAgICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUuY2hhckF0KGluZGV4ICsgMSkgIT09IENfUEFSRU5fT1BFTikge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHN1YnF1ZXVlICs9IENfUEFSRU5fT1BFTjtcbiAgICAgICAgY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgaW5kZXgrKztcblxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBxdWV1ZSArPSBzdWJxdWV1ZTtcbiAgICBzdWJxdWV1ZSA9ICcnO1xuICAgIGluZGV4Kys7XG4gIH1cblxuICAvKiBFYXQgdGhlIGNvbnRlbnQgY2xvc2luZy4gKi9cbiAgaWYgKCFjbG9zZWQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb250ZW50ID0gcXVldWU7XG4gIHN1YnZhbHVlICs9IHF1ZXVlICsgc3VicXVldWU7XG4gIGluZGV4Kys7XG5cbiAgLyogRWF0IHdoaXRlLXNwYWNlLiAqL1xuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKCF3aGl0ZXNwYWNlKGNoYXJhY3RlcikpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHN1YnZhbHVlICs9IGNoYXJhY3RlcjtcbiAgICBpbmRleCsrO1xuICB9XG5cbiAgLyogRWF0IHRoZSBVUkwuICovXG4gIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG4gIG1hcmtlcnMgPSBjb21tb25tYXJrID8gQ09NTU9OTUFSS19MSU5LX01BUktFUlMgOiBMSU5LX01BUktFUlM7XG4gIHF1ZXVlID0gJyc7XG4gIGJlZm9yZVVSTCA9IHN1YnZhbHVlO1xuXG4gIGlmIChjaGFyYWN0ZXIgPT09IENfTFQpIHtcbiAgICBpbmRleCsrO1xuICAgIGJlZm9yZVVSTCArPSBDX0xUO1xuXG4gICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgICBpZiAoY2hhcmFjdGVyID09PSBDX0dUKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZiAoY29tbW9ubWFyayAmJiBjaGFyYWN0ZXIgPT09ICdcXG4nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgICAgaW5kZXgrKztcbiAgICB9XG5cbiAgICBpZiAodmFsdWUuY2hhckF0KGluZGV4KSAhPT0gQ19HVCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN1YnZhbHVlICs9IENfTFQgKyBxdWV1ZSArIENfR1Q7XG4gICAgdXJsID0gcXVldWU7XG4gICAgaW5kZXgrKztcbiAgfSBlbHNlIHtcbiAgICBjaGFyYWN0ZXIgPSBudWxsO1xuICAgIHN1YnF1ZXVlID0gJyc7XG5cbiAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICAgIGlmIChzdWJxdWV1ZSAmJiBvd24uY2FsbChtYXJrZXJzLCBjaGFyYWN0ZXIpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZiAod2hpdGVzcGFjZShjaGFyYWN0ZXIpKSB7XG4gICAgICAgIGlmICghcGVkYW50aWMpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHN1YnF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChjaGFyYWN0ZXIgPT09IENfUEFSRU5fT1BFTikge1xuICAgICAgICAgIGRlcHRoKys7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hhcmFjdGVyID09PSBDX1BBUkVOX0NMT1NFKSB7XG4gICAgICAgICAgaWYgKGRlcHRoID09PSAwKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkZXB0aC0tO1xuICAgICAgICB9XG5cbiAgICAgICAgcXVldWUgKz0gc3VicXVldWU7XG4gICAgICAgIHN1YnF1ZXVlID0gJyc7XG5cbiAgICAgICAgaWYgKGNoYXJhY3RlciA9PT0gQ19CQUNLU0xBU0gpIHtcbiAgICAgICAgICBxdWV1ZSArPSBDX0JBQ0tTTEFTSDtcbiAgICAgICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoKytpbmRleCk7XG4gICAgICAgIH1cblxuICAgICAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgICB9XG5cbiAgICAgIGluZGV4Kys7XG4gICAgfVxuXG4gICAgc3VidmFsdWUgKz0gcXVldWU7XG4gICAgdXJsID0gcXVldWU7XG4gICAgaW5kZXggPSBzdWJ2YWx1ZS5sZW5ndGg7XG4gIH1cblxuICAvKiBFYXQgd2hpdGUtc3BhY2UuICovXG4gIHF1ZXVlID0gJyc7XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmICghd2hpdGVzcGFjZShjaGFyYWN0ZXIpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgaW5kZXgrKztcbiAgfVxuXG4gIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG4gIHN1YnZhbHVlICs9IHF1ZXVlO1xuXG4gIC8qIEVhdCB0aGUgdGl0bGUuICovXG4gIGlmIChxdWV1ZSAmJiBvd24uY2FsbChtYXJrZXJzLCBjaGFyYWN0ZXIpKSB7XG4gICAgaW5kZXgrKztcbiAgICBzdWJ2YWx1ZSArPSBjaGFyYWN0ZXI7XG4gICAgcXVldWUgPSAnJztcbiAgICBtYXJrZXIgPSBtYXJrZXJzW2NoYXJhY3Rlcl07XG4gICAgYmVmb3JlVGl0bGUgPSBzdWJ2YWx1ZTtcblxuICAgIC8qIEluIGNvbW1vbm1hcmstbW9kZSwgdGhpbmdzIGFyZSBwcmV0dHkgZWFzeTogdGhlXG4gICAgICogbWFya2VyIGNhbm5vdCBvY2N1ciBpbnNpZGUgdGhlIHRpdGxlLlxuICAgICAqXG4gICAgICogTm9uLWNvbW1vbm1hcmsgZG9lcywgaG93ZXZlciwgc3VwcG9ydCBuZXN0ZWRcbiAgICAgKiBkZWxpbWl0ZXJzLiAqL1xuICAgIGlmIChjb21tb25tYXJrKSB7XG4gICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgICAgICBpZiAoY2hhcmFjdGVyID09PSBtYXJrZXIpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjaGFyYWN0ZXIgPT09IENfQkFDS1NMQVNIKSB7XG4gICAgICAgICAgcXVldWUgKz0gQ19CQUNLU0xBU0g7XG4gICAgICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KCsraW5kZXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaW5kZXgrKztcbiAgICAgICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgICAgfVxuXG4gICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgICBpZiAoY2hhcmFjdGVyICE9PSBtYXJrZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aXRsZSA9IHF1ZXVlO1xuICAgICAgc3VidmFsdWUgKz0gcXVldWUgKyBjaGFyYWN0ZXI7XG4gICAgICBpbmRleCsrO1xuXG4gICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgICAgICBpZiAoIXdoaXRlc3BhY2UoY2hhcmFjdGVyKSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgc3VidmFsdWUgKz0gY2hhcmFjdGVyO1xuICAgICAgICBpbmRleCsrO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzdWJxdWV1ZSA9ICcnO1xuXG4gICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgICAgICBpZiAoY2hhcmFjdGVyID09PSBtYXJrZXIpIHtcbiAgICAgICAgICBpZiAoaGFzTWFya2VyKSB7XG4gICAgICAgICAgICBxdWV1ZSArPSBtYXJrZXIgKyBzdWJxdWV1ZTtcbiAgICAgICAgICAgIHN1YnF1ZXVlID0gJyc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaGFzTWFya2VyID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmICghaGFzTWFya2VyKSB7XG4gICAgICAgICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYXJhY3RlciA9PT0gQ19QQVJFTl9DTE9TRSkge1xuICAgICAgICAgIHN1YnZhbHVlICs9IHF1ZXVlICsgbWFya2VyICsgc3VicXVldWU7XG4gICAgICAgICAgdGl0bGUgPSBxdWV1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfSBlbHNlIGlmICh3aGl0ZXNwYWNlKGNoYXJhY3RlcikpIHtcbiAgICAgICAgICBzdWJxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcXVldWUgKz0gbWFya2VyICsgc3VicXVldWUgKyBjaGFyYWN0ZXI7XG4gICAgICAgICAgc3VicXVldWUgPSAnJztcbiAgICAgICAgICBoYXNNYXJrZXIgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGluZGV4Kys7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKHZhbHVlLmNoYXJBdChpbmRleCkgIT09IENfUEFSRU5fQ0xPU0UpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgLSBuZXZlciB1c2VkICh5ZXQpICovXG4gIGlmIChzaWxlbnQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHN1YnZhbHVlICs9IENfUEFSRU5fQ0xPU0U7XG5cbiAgdXJsID0gc2VsZi5kZWNvZGUucmF3KHNlbGYudW5lc2NhcGUodXJsKSwgZWF0KGJlZm9yZVVSTCkudGVzdCgpLmVuZCwge25vblRlcm1pbmF0ZWQ6IGZhbHNlfSk7XG5cbiAgaWYgKHRpdGxlKSB7XG4gICAgYmVmb3JlVGl0bGUgPSBlYXQoYmVmb3JlVGl0bGUpLnRlc3QoKS5lbmQ7XG4gICAgdGl0bGUgPSBzZWxmLmRlY29kZS5yYXcoc2VsZi51bmVzY2FwZSh0aXRsZSksIGJlZm9yZVRpdGxlKTtcbiAgfVxuXG4gIG5vZGUgPSB7XG4gICAgdHlwZTogaXNJbWFnZSA/ICdpbWFnZScgOiAnbGluaycsXG4gICAgdGl0bGU6IHRpdGxlIHx8IG51bGwsXG4gICAgdXJsOiB1cmxcbiAgfTtcblxuICBpZiAoaXNJbWFnZSkge1xuICAgIG5vZGUuYWx0ID0gc2VsZi5kZWNvZGUucmF3KHNlbGYudW5lc2NhcGUoY29udGVudCksIG5vdykgfHwgbnVsbDtcbiAgfSBlbHNlIHtcbiAgICBleGl0ID0gc2VsZi5lbnRlckxpbmsoKTtcbiAgICBub2RlLmNoaWxkcmVuID0gc2VsZi50b2tlbml6ZUlubGluZShjb250ZW50LCBub3cpO1xuICAgIGV4aXQoKTtcbiAgfVxuXG4gIHJldHVybiBlYXQoc3VidmFsdWUpKG5vZGUpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgd2hpdGVzcGFjZSA9IHJlcXVpcmUoJ2lzLXdoaXRlc3BhY2UtY2hhcmFjdGVyJyk7XG52YXIgbG9jYXRlID0gcmVxdWlyZSgnLi4vbG9jYXRlL2xpbmsnKTtcbnZhciBub3JtYWxpemUgPSByZXF1aXJlKCcuLi91dGlsL25vcm1hbGl6ZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlZmVyZW5jZTtcbnJlZmVyZW5jZS5sb2NhdG9yID0gbG9jYXRlO1xuXG52YXIgVF9MSU5LID0gJ2xpbmsnO1xudmFyIFRfSU1BR0UgPSAnaW1hZ2UnO1xudmFyIFRfRk9PVE5PVEUgPSAnZm9vdG5vdGUnO1xudmFyIFJFRkVSRU5DRV9UWVBFX1NIT1JUQ1VUID0gJ3Nob3J0Y3V0JztcbnZhciBSRUZFUkVOQ0VfVFlQRV9DT0xMQVBTRUQgPSAnY29sbGFwc2VkJztcbnZhciBSRUZFUkVOQ0VfVFlQRV9GVUxMID0gJ2Z1bGwnO1xudmFyIENfQ0FSRVQgPSAnXic7XG52YXIgQ19CQUNLU0xBU0ggPSAnXFxcXCc7XG52YXIgQ19CUkFDS0VUX09QRU4gPSAnWyc7XG52YXIgQ19CUkFDS0VUX0NMT1NFID0gJ10nO1xuXG5mdW5jdGlvbiByZWZlcmVuY2UoZWF0LCB2YWx1ZSwgc2lsZW50KSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdCgwKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcbiAgdmFyIHN1YnZhbHVlID0gJyc7XG4gIHZhciBpbnRybyA9ICcnO1xuICB2YXIgdHlwZSA9IFRfTElOSztcbiAgdmFyIHJlZmVyZW5jZVR5cGUgPSBSRUZFUkVOQ0VfVFlQRV9TSE9SVENVVDtcbiAgdmFyIGNvbnRlbnQ7XG4gIHZhciBpZGVudGlmaWVyO1xuICB2YXIgbm93O1xuICB2YXIgbm9kZTtcbiAgdmFyIGV4aXQ7XG4gIHZhciBxdWV1ZTtcbiAgdmFyIGJyYWNrZXRlZDtcbiAgdmFyIGRlcHRoO1xuXG4gIC8qIENoZWNrIHdoZXRoZXIgd2XigJlyZSBlYXRpbmcgYW4gaW1hZ2UuICovXG4gIGlmIChjaGFyYWN0ZXIgPT09ICchJykge1xuICAgIHR5cGUgPSBUX0lNQUdFO1xuICAgIGludHJvID0gY2hhcmFjdGVyO1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdCgrK2luZGV4KTtcbiAgfVxuXG4gIGlmIChjaGFyYWN0ZXIgIT09IENfQlJBQ0tFVF9PUEVOKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaW5kZXgrKztcbiAgaW50cm8gKz0gY2hhcmFjdGVyO1xuICBxdWV1ZSA9ICcnO1xuXG4gIC8qIENoZWNrIHdoZXRoZXIgd2XigJlyZSBlYXRpbmcgYSBmb290bm90ZS4gKi9cbiAgaWYgKHNlbGYub3B0aW9ucy5mb290bm90ZXMgJiYgdmFsdWUuY2hhckF0KGluZGV4KSA9PT0gQ19DQVJFVCkge1xuICAgIC8qIEV4aXQgaWYgYCFbXmAgaXMgZm91bmQsIHNvIHRoZSBgIWAgd2lsbCBiZSBzZWVuIGFzIHRleHQgYWZ0ZXIgdGhpcyxcbiAgICAgKiBhbmQgd2XigJlsbCBlbnRlciB0aGlzIGZ1bmN0aW9uIGFnYWluIHdoZW4gYFteYCBpcyBmb3VuZC4gKi9cbiAgICBpZiAodHlwZSA9PT0gVF9JTUFHRSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGludHJvICs9IENfQ0FSRVQ7XG4gICAgaW5kZXgrKztcbiAgICB0eXBlID0gVF9GT09UTk9URTtcbiAgfVxuXG4gIC8qIEVhdCB0aGUgdGV4dC4gKi9cbiAgZGVwdGggPSAwO1xuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoY2hhcmFjdGVyID09PSBDX0JSQUNLRVRfT1BFTikge1xuICAgICAgYnJhY2tldGVkID0gdHJ1ZTtcbiAgICAgIGRlcHRoKys7XG4gICAgfSBlbHNlIGlmIChjaGFyYWN0ZXIgPT09IENfQlJBQ0tFVF9DTE9TRSkge1xuICAgICAgaWYgKCFkZXB0aCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgZGVwdGgtLTtcbiAgICB9XG5cbiAgICBpZiAoY2hhcmFjdGVyID09PSBDX0JBQ0tTTEFTSCkge1xuICAgICAgcXVldWUgKz0gQ19CQUNLU0xBU0g7XG4gICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoKytpbmRleCk7XG4gICAgfVxuXG4gICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgIGluZGV4Kys7XG4gIH1cblxuICBzdWJ2YWx1ZSA9IHF1ZXVlO1xuICBjb250ZW50ID0gcXVldWU7XG4gIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgaWYgKGNoYXJhY3RlciAhPT0gQ19CUkFDS0VUX0NMT1NFKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaW5kZXgrKztcbiAgc3VidmFsdWUgKz0gY2hhcmFjdGVyO1xuICBxdWV1ZSA9ICcnO1xuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoIXdoaXRlc3BhY2UoY2hhcmFjdGVyKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgIGluZGV4Kys7XG4gIH1cblxuICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gIC8qIElubGluZSBmb290bm90ZXMgY2Fubm90IGhhdmUgYW4gaWRlbnRpZmllci4gKi9cbiAgaWYgKHR5cGUgIT09IFRfRk9PVE5PVEUgJiYgY2hhcmFjdGVyID09PSBDX0JSQUNLRVRfT1BFTikge1xuICAgIGlkZW50aWZpZXIgPSAnJztcbiAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgaW5kZXgrKztcblxuICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgICAgaWYgKGNoYXJhY3RlciA9PT0gQ19CUkFDS0VUX09QRU4gfHwgY2hhcmFjdGVyID09PSBDX0JSQUNLRVRfQ0xPU0UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGFyYWN0ZXIgPT09IENfQkFDS1NMQVNIKSB7XG4gICAgICAgIGlkZW50aWZpZXIgKz0gQ19CQUNLU0xBU0g7XG4gICAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdCgrK2luZGV4KTtcbiAgICAgIH1cblxuICAgICAgaWRlbnRpZmllciArPSBjaGFyYWN0ZXI7XG4gICAgICBpbmRleCsrO1xuICAgIH1cblxuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoY2hhcmFjdGVyID09PSBDX0JSQUNLRVRfQ0xPU0UpIHtcbiAgICAgIHJlZmVyZW5jZVR5cGUgPSBpZGVudGlmaWVyID8gUkVGRVJFTkNFX1RZUEVfRlVMTCA6IFJFRkVSRU5DRV9UWVBFX0NPTExBUFNFRDtcbiAgICAgIHF1ZXVlICs9IGlkZW50aWZpZXIgKyBjaGFyYWN0ZXI7XG4gICAgICBpbmRleCsrO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZGVudGlmaWVyID0gJyc7XG4gICAgfVxuXG4gICAgc3VidmFsdWUgKz0gcXVldWU7XG4gICAgcXVldWUgPSAnJztcbiAgfSBlbHNlIHtcbiAgICBpZiAoIWNvbnRlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVyID0gY29udGVudDtcbiAgfVxuXG4gIC8qIEJyYWNrZXRzIGNhbm5vdCBiZSBpbnNpZGUgdGhlIGlkZW50aWZpZXIuICovXG4gIGlmIChyZWZlcmVuY2VUeXBlICE9PSBSRUZFUkVOQ0VfVFlQRV9GVUxMICYmIGJyYWNrZXRlZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHN1YnZhbHVlID0gaW50cm8gKyBzdWJ2YWx1ZTtcblxuICBpZiAodHlwZSA9PT0gVF9MSU5LICYmIHNlbGYuaW5MaW5rKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgLSBuZXZlciB1c2VkICh5ZXQpICovXG4gIGlmIChzaWxlbnQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0eXBlID09PSBUX0ZPT1ROT1RFICYmIGNvbnRlbnQuaW5kZXhPZignICcpICE9PSAtMSkge1xuICAgIHJldHVybiBlYXQoc3VidmFsdWUpKHtcbiAgICAgIHR5cGU6ICdmb290bm90ZScsXG4gICAgICBjaGlsZHJlbjogdGhpcy50b2tlbml6ZUlubGluZShjb250ZW50LCBlYXQubm93KCkpXG4gICAgfSk7XG4gIH1cblxuICBub3cgPSBlYXQubm93KCk7XG4gIG5vdy5jb2x1bW4gKz0gaW50cm8ubGVuZ3RoO1xuICBub3cub2Zmc2V0ICs9IGludHJvLmxlbmd0aDtcbiAgaWRlbnRpZmllciA9IHJlZmVyZW5jZVR5cGUgPT09IFJFRkVSRU5DRV9UWVBFX0ZVTEwgPyBpZGVudGlmaWVyIDogY29udGVudDtcblxuICBub2RlID0ge1xuICAgIHR5cGU6IHR5cGUgKyAnUmVmZXJlbmNlJyxcbiAgICBpZGVudGlmaWVyOiBub3JtYWxpemUoaWRlbnRpZmllcilcbiAgfTtcblxuICBpZiAodHlwZSA9PT0gVF9MSU5LIHx8IHR5cGUgPT09IFRfSU1BR0UpIHtcbiAgICBub2RlLnJlZmVyZW5jZVR5cGUgPSByZWZlcmVuY2VUeXBlO1xuICB9XG5cbiAgaWYgKHR5cGUgPT09IFRfTElOSykge1xuICAgIGV4aXQgPSBzZWxmLmVudGVyTGluaygpO1xuICAgIG5vZGUuY2hpbGRyZW4gPSBzZWxmLnRva2VuaXplSW5saW5lKGNvbnRlbnQsIG5vdyk7XG4gICAgZXhpdCgpO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09IFRfSU1BR0UpIHtcbiAgICBub2RlLmFsdCA9IHNlbGYuZGVjb2RlLnJhdyhzZWxmLnVuZXNjYXBlKGNvbnRlbnQpLCBub3cpIHx8IG51bGw7XG4gIH1cblxuICByZXR1cm4gZWF0KHN1YnZhbHVlKShub2RlKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHRyaW0gPSByZXF1aXJlKCd0cmltJyk7XG52YXIgd2hpdGVzcGFjZSA9IHJlcXVpcmUoJ2lzLXdoaXRlc3BhY2UtY2hhcmFjdGVyJyk7XG52YXIgbG9jYXRlID0gcmVxdWlyZSgnLi4vbG9jYXRlL3N0cm9uZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN0cm9uZztcbnN0cm9uZy5sb2NhdG9yID0gbG9jYXRlO1xuXG52YXIgQ19BU1RFUklTSyA9ICcqJztcbnZhciBDX1VOREVSU0NPUkUgPSAnXyc7XG5cbmZ1bmN0aW9uIHN0cm9uZyhlYXQsIHZhbHVlLCBzaWxlbnQpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcbiAgdmFyIG5vdztcbiAgdmFyIHBlZGFudGljO1xuICB2YXIgbWFya2VyO1xuICB2YXIgcXVldWU7XG4gIHZhciBzdWJ2YWx1ZTtcbiAgdmFyIGxlbmd0aDtcbiAgdmFyIHByZXY7XG5cbiAgaWYgKFxuICAgIChjaGFyYWN0ZXIgIT09IENfQVNURVJJU0sgJiYgY2hhcmFjdGVyICE9PSBDX1VOREVSU0NPUkUpIHx8XG4gICAgdmFsdWUuY2hhckF0KCsraW5kZXgpICE9PSBjaGFyYWN0ZXJcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcGVkYW50aWMgPSBzZWxmLm9wdGlvbnMucGVkYW50aWM7XG4gIG1hcmtlciA9IGNoYXJhY3RlcjtcbiAgc3VidmFsdWUgPSBtYXJrZXIgKyBtYXJrZXI7XG4gIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcbiAgaW5kZXgrKztcbiAgcXVldWUgPSAnJztcbiAgY2hhcmFjdGVyID0gJyc7XG5cbiAgaWYgKHBlZGFudGljICYmIHdoaXRlc3BhY2UodmFsdWUuY2hhckF0KGluZGV4KSkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBwcmV2ID0gY2hhcmFjdGVyO1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoXG4gICAgICBjaGFyYWN0ZXIgPT09IG1hcmtlciAmJlxuICAgICAgdmFsdWUuY2hhckF0KGluZGV4ICsgMSkgPT09IG1hcmtlciAmJlxuICAgICAgKCFwZWRhbnRpYyB8fCAhd2hpdGVzcGFjZShwcmV2KSlcbiAgICApIHtcbiAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCArIDIpO1xuXG4gICAgICBpZiAoY2hhcmFjdGVyICE9PSBtYXJrZXIpIHtcbiAgICAgICAgaWYgKCF0cmltKHF1ZXVlKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAtIG5ldmVyIHVzZWQgKHlldCkgKi9cbiAgICAgICAgaWYgKHNpbGVudCkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgbm93ID0gZWF0Lm5vdygpO1xuICAgICAgICBub3cuY29sdW1uICs9IDI7XG4gICAgICAgIG5vdy5vZmZzZXQgKz0gMjtcblxuICAgICAgICByZXR1cm4gZWF0KHN1YnZhbHVlICsgcXVldWUgKyBzdWJ2YWx1ZSkoe1xuICAgICAgICAgIHR5cGU6ICdzdHJvbmcnLFxuICAgICAgICAgIGNoaWxkcmVuOiBzZWxmLnRva2VuaXplSW5saW5lKHF1ZXVlLCBub3cpXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghcGVkYW50aWMgJiYgY2hhcmFjdGVyID09PSAnXFxcXCcpIHtcbiAgICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdCgrK2luZGV4KTtcbiAgICB9XG5cbiAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgaW5kZXgrKztcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGxvY2F0ZTtcblxuZnVuY3Rpb24gbG9jYXRlKHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgdmFyIGFzdGVyaXNrID0gdmFsdWUuaW5kZXhPZignKionLCBmcm9tSW5kZXgpO1xuICB2YXIgdW5kZXJzY29yZSA9IHZhbHVlLmluZGV4T2YoJ19fJywgZnJvbUluZGV4KTtcblxuICBpZiAodW5kZXJzY29yZSA9PT0gLTEpIHtcbiAgICByZXR1cm4gYXN0ZXJpc2s7XG4gIH1cblxuICBpZiAoYXN0ZXJpc2sgPT09IC0xKSB7XG4gICAgcmV0dXJuIHVuZGVyc2NvcmU7XG4gIH1cblxuICByZXR1cm4gdW5kZXJzY29yZSA8IGFzdGVyaXNrID8gdW5kZXJzY29yZSA6IGFzdGVyaXNrO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdHJpbSA9IHJlcXVpcmUoJ3RyaW0nKTtcbnZhciB3b3JkID0gcmVxdWlyZSgnaXMtd29yZC1jaGFyYWN0ZXInKTtcbnZhciB3aGl0ZXNwYWNlID0gcmVxdWlyZSgnaXMtd2hpdGVzcGFjZS1jaGFyYWN0ZXInKTtcbnZhciBsb2NhdGUgPSByZXF1aXJlKCcuLi9sb2NhdGUvZW1waGFzaXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBlbXBoYXNpcztcbmVtcGhhc2lzLmxvY2F0b3IgPSBsb2NhdGU7XG5cbnZhciBDX0FTVEVSSVNLID0gJyonO1xudmFyIENfVU5ERVJTQ09SRSA9ICdfJztcblxuZnVuY3Rpb24gZW1waGFzaXMoZWF0LCB2YWx1ZSwgc2lsZW50KSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG4gIHZhciBub3c7XG4gIHZhciBwZWRhbnRpYztcbiAgdmFyIG1hcmtlcjtcbiAgdmFyIHF1ZXVlO1xuICB2YXIgc3VidmFsdWU7XG4gIHZhciBsZW5ndGg7XG4gIHZhciBwcmV2O1xuXG4gIGlmIChjaGFyYWN0ZXIgIT09IENfQVNURVJJU0sgJiYgY2hhcmFjdGVyICE9PSBDX1VOREVSU0NPUkUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBwZWRhbnRpYyA9IHNlbGYub3B0aW9ucy5wZWRhbnRpYztcbiAgc3VidmFsdWUgPSBjaGFyYWN0ZXI7XG4gIG1hcmtlciA9IGNoYXJhY3RlcjtcbiAgbGVuZ3RoID0gdmFsdWUubGVuZ3RoO1xuICBpbmRleCsrO1xuICBxdWV1ZSA9ICcnO1xuICBjaGFyYWN0ZXIgPSAnJztcblxuICBpZiAocGVkYW50aWMgJiYgd2hpdGVzcGFjZSh2YWx1ZS5jaGFyQXQoaW5kZXgpKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIHByZXYgPSBjaGFyYWN0ZXI7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmIChjaGFyYWN0ZXIgPT09IG1hcmtlciAmJiAoIXBlZGFudGljIHx8ICF3aGl0ZXNwYWNlKHByZXYpKSkge1xuICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KCsraW5kZXgpO1xuXG4gICAgICBpZiAoY2hhcmFjdGVyICE9PSBtYXJrZXIpIHtcbiAgICAgICAgaWYgKCF0cmltKHF1ZXVlKSB8fCBwcmV2ID09PSBtYXJrZXIpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXBlZGFudGljICYmIG1hcmtlciA9PT0gQ19VTkRFUlNDT1JFICYmIHdvcmQoY2hhcmFjdGVyKSkge1xuICAgICAgICAgIHF1ZXVlICs9IG1hcmtlcjtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAtIG5ldmVyIHVzZWQgKHlldCkgKi9cbiAgICAgICAgaWYgKHNpbGVudCkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgbm93ID0gZWF0Lm5vdygpO1xuICAgICAgICBub3cuY29sdW1uKys7XG4gICAgICAgIG5vdy5vZmZzZXQrKztcblxuICAgICAgICByZXR1cm4gZWF0KHN1YnZhbHVlICsgcXVldWUgKyBtYXJrZXIpKHtcbiAgICAgICAgICB0eXBlOiAnZW1waGFzaXMnLFxuICAgICAgICAgIGNoaWxkcmVuOiBzZWxmLnRva2VuaXplSW5saW5lKHF1ZXVlLCBub3cpXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBxdWV1ZSArPSBtYXJrZXI7XG4gICAgfVxuXG4gICAgaWYgKCFwZWRhbnRpYyAmJiBjaGFyYWN0ZXIgPT09ICdcXFxcJykge1xuICAgICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KCsraW5kZXgpO1xuICAgIH1cblxuICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICBpbmRleCsrO1xuICB9XG59XG4iLCIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSB3b3JkQ2hhcmFjdGVyXG5cbnZhciBmcm9tQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGVcbnZhciByZSA9IC9cXHcvXG5cbi8vIENoZWNrIGlmIHRoZSBnaXZlbiBjaGFyYWN0ZXIgY29kZSwgb3IgdGhlIGNoYXJhY3RlciBjb2RlIGF0IHRoZSBmaXJzdFxuLy8gY2hhcmFjdGVyLCBpcyBhIHdvcmQgY2hhcmFjdGVyLlxuZnVuY3Rpb24gd29yZENoYXJhY3RlcihjaGFyYWN0ZXIpIHtcbiAgcmV0dXJuIHJlLnRlc3QoXG4gICAgdHlwZW9mIGNoYXJhY3RlciA9PT0gJ251bWJlcicgPyBmcm9tQ29kZShjaGFyYWN0ZXIpIDogY2hhcmFjdGVyLmNoYXJBdCgwKVxuICApXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gbG9jYXRlO1xuXG5mdW5jdGlvbiBsb2NhdGUodmFsdWUsIGZyb21JbmRleCkge1xuICB2YXIgYXN0ZXJpc2sgPSB2YWx1ZS5pbmRleE9mKCcqJywgZnJvbUluZGV4KTtcbiAgdmFyIHVuZGVyc2NvcmUgPSB2YWx1ZS5pbmRleE9mKCdfJywgZnJvbUluZGV4KTtcblxuICBpZiAodW5kZXJzY29yZSA9PT0gLTEpIHtcbiAgICByZXR1cm4gYXN0ZXJpc2s7XG4gIH1cblxuICBpZiAoYXN0ZXJpc2sgPT09IC0xKSB7XG4gICAgcmV0dXJuIHVuZGVyc2NvcmU7XG4gIH1cblxuICByZXR1cm4gdW5kZXJzY29yZSA8IGFzdGVyaXNrID8gdW5kZXJzY29yZSA6IGFzdGVyaXNrO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgd2hpdGVzcGFjZSA9IHJlcXVpcmUoJ2lzLXdoaXRlc3BhY2UtY2hhcmFjdGVyJyk7XG52YXIgbG9jYXRlID0gcmVxdWlyZSgnLi4vbG9jYXRlL2RlbGV0ZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN0cmlrZXRocm91Z2g7XG5zdHJpa2V0aHJvdWdoLmxvY2F0b3IgPSBsb2NhdGU7XG5cbnZhciBDX1RJTERFID0gJ34nO1xudmFyIERPVUJMRSA9ICd+fic7XG5cbmZ1bmN0aW9uIHN0cmlrZXRocm91Z2goZWF0LCB2YWx1ZSwgc2lsZW50KSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIGNoYXJhY3RlciA9ICcnO1xuICB2YXIgcHJldmlvdXMgPSAnJztcbiAgdmFyIHByZWNlZGluZyA9ICcnO1xuICB2YXIgc3VidmFsdWUgPSAnJztcbiAgdmFyIGluZGV4O1xuICB2YXIgbGVuZ3RoO1xuICB2YXIgbm93O1xuXG4gIGlmIChcbiAgICAhc2VsZi5vcHRpb25zLmdmbSB8fFxuICAgIHZhbHVlLmNoYXJBdCgwKSAhPT0gQ19USUxERSB8fFxuICAgIHZhbHVlLmNoYXJBdCgxKSAhPT0gQ19USUxERSB8fFxuICAgIHdoaXRlc3BhY2UodmFsdWUuY2hhckF0KDIpKVxuICApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpbmRleCA9IDE7XG4gIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcbiAgbm93ID0gZWF0Lm5vdygpO1xuICBub3cuY29sdW1uICs9IDI7XG4gIG5vdy5vZmZzZXQgKz0gMjtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoXG4gICAgICBjaGFyYWN0ZXIgPT09IENfVElMREUgJiZcbiAgICAgIHByZXZpb3VzID09PSBDX1RJTERFICYmXG4gICAgICAoIXByZWNlZGluZyB8fCAhd2hpdGVzcGFjZShwcmVjZWRpbmcpKVxuICAgICkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmIC0gbmV2ZXIgdXNlZCAoeWV0KSAqL1xuICAgICAgaWYgKHNpbGVudCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGVhdChET1VCTEUgKyBzdWJ2YWx1ZSArIERPVUJMRSkoe1xuICAgICAgICB0eXBlOiAnZGVsZXRlJyxcbiAgICAgICAgY2hpbGRyZW46IHNlbGYudG9rZW5pemVJbmxpbmUoc3VidmFsdWUsIG5vdylcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHN1YnZhbHVlICs9IHByZXZpb3VzO1xuICAgIHByZWNlZGluZyA9IHByZXZpb3VzO1xuICAgIHByZXZpb3VzID0gY2hhcmFjdGVyO1xuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gbG9jYXRlO1xuXG5mdW5jdGlvbiBsb2NhdGUodmFsdWUsIGZyb21JbmRleCkge1xuICByZXR1cm4gdmFsdWUuaW5kZXhPZignfn4nLCBmcm9tSW5kZXgpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgd2hpdGVzcGFjZSA9IHJlcXVpcmUoJ2lzLXdoaXRlc3BhY2UtY2hhcmFjdGVyJyk7XG52YXIgbG9jYXRlID0gcmVxdWlyZSgnLi4vbG9jYXRlL2NvZGUtaW5saW5lJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gaW5saW5lQ29kZTtcbmlubGluZUNvZGUubG9jYXRvciA9IGxvY2F0ZTtcblxudmFyIENfVElDSyA9ICdgJztcblxuLyogVG9rZW5pc2UgaW5saW5lIGNvZGUuICovXG5mdW5jdGlvbiBpbmxpbmVDb2RlKGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICB2YXIgbGVuZ3RoID0gdmFsdWUubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgcXVldWUgPSAnJztcbiAgdmFyIHRpY2tRdWV1ZSA9ICcnO1xuICB2YXIgY29udGVudFF1ZXVlO1xuICB2YXIgc3VicXVldWU7XG4gIHZhciBjb3VudDtcbiAgdmFyIG9wZW5pbmdDb3VudDtcbiAgdmFyIHN1YnZhbHVlO1xuICB2YXIgY2hhcmFjdGVyO1xuICB2YXIgZm91bmQ7XG4gIHZhciBuZXh0O1xuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmICh2YWx1ZS5jaGFyQXQoaW5kZXgpICE9PSBDX1RJQ0spIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHF1ZXVlICs9IENfVElDSztcbiAgICBpbmRleCsrO1xuICB9XG5cbiAgaWYgKCFxdWV1ZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHN1YnZhbHVlID0gcXVldWU7XG4gIG9wZW5pbmdDb3VudCA9IGluZGV4O1xuICBxdWV1ZSA9ICcnO1xuICBuZXh0ID0gdmFsdWUuY2hhckF0KGluZGV4KTtcbiAgY291bnQgPSAwO1xuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IG5leHQ7XG4gICAgbmV4dCA9IHZhbHVlLmNoYXJBdChpbmRleCArIDEpO1xuXG4gICAgaWYgKGNoYXJhY3RlciA9PT0gQ19USUNLKSB7XG4gICAgICBjb3VudCsrO1xuICAgICAgdGlja1F1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgY291bnQgPSAwO1xuICAgICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgIH1cblxuICAgIGlmIChjb3VudCAmJiBuZXh0ICE9PSBDX1RJQ0spIHtcbiAgICAgIGlmIChjb3VudCA9PT0gb3BlbmluZ0NvdW50KSB7XG4gICAgICAgIHN1YnZhbHVlICs9IHF1ZXVlICsgdGlja1F1ZXVlO1xuICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBxdWV1ZSArPSB0aWNrUXVldWU7XG4gICAgICB0aWNrUXVldWUgPSAnJztcbiAgICB9XG5cbiAgICBpbmRleCsrO1xuICB9XG5cbiAgaWYgKCFmb3VuZCkge1xuICAgIGlmIChvcGVuaW5nQ291bnQgJSAyICE9PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcXVldWUgPSAnJztcbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAtIG5ldmVyIHVzZWQgKHlldCkgKi9cbiAgaWYgKHNpbGVudCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgY29udGVudFF1ZXVlID0gJyc7XG4gIHN1YnF1ZXVlID0gJyc7XG4gIGxlbmd0aCA9IHF1ZXVlLmxlbmd0aDtcbiAgaW5kZXggPSAtMTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHF1ZXVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAod2hpdGVzcGFjZShjaGFyYWN0ZXIpKSB7XG4gICAgICBzdWJxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoc3VicXVldWUpIHtcbiAgICAgIGlmIChjb250ZW50UXVldWUpIHtcbiAgICAgICAgY29udGVudFF1ZXVlICs9IHN1YnF1ZXVlO1xuICAgICAgfVxuXG4gICAgICBzdWJxdWV1ZSA9ICcnO1xuICAgIH1cblxuICAgIGNvbnRlbnRRdWV1ZSArPSBjaGFyYWN0ZXI7XG4gIH1cblxuICByZXR1cm4gZWF0KHN1YnZhbHVlKSh7XG4gICAgdHlwZTogJ2lubGluZUNvZGUnLFxuICAgIHZhbHVlOiBjb250ZW50UXVldWVcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gbG9jYXRlO1xuXG5mdW5jdGlvbiBsb2NhdGUodmFsdWUsIGZyb21JbmRleCkge1xuICByZXR1cm4gdmFsdWUuaW5kZXhPZignYCcsIGZyb21JbmRleCk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBsb2NhdGUgPSByZXF1aXJlKCcuLi9sb2NhdGUvYnJlYWsnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBoYXJkQnJlYWs7XG5oYXJkQnJlYWsubG9jYXRvciA9IGxvY2F0ZTtcblxudmFyIE1JTl9CUkVBS19MRU5HVEggPSAyO1xuXG5mdW5jdGlvbiBoYXJkQnJlYWsoZWF0LCB2YWx1ZSwgc2lsZW50KSB7XG4gIHZhciBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gIHZhciBpbmRleCA9IC0xO1xuICB2YXIgcXVldWUgPSAnJztcbiAgdmFyIGNoYXJhY3RlcjtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoY2hhcmFjdGVyID09PSAnXFxuJykge1xuICAgICAgaWYgKGluZGV4IDwgTUlOX0JSRUFLX0xFTkdUSCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAtIG5ldmVyIHVzZWQgKHlldCkgKi9cbiAgICAgIGlmIChzaWxlbnQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcblxuICAgICAgcmV0dXJuIGVhdChxdWV1ZSkoe3R5cGU6ICdicmVhayd9KTtcbiAgICB9XG5cbiAgICBpZiAoY2hhcmFjdGVyICE9PSAnICcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBsb2NhdGU7XG5cbmZ1bmN0aW9uIGxvY2F0ZSh2YWx1ZSwgZnJvbUluZGV4KSB7XG4gIHZhciBpbmRleCA9IHZhbHVlLmluZGV4T2YoJ1xcbicsIGZyb21JbmRleCk7XG5cbiAgd2hpbGUgKGluZGV4ID4gZnJvbUluZGV4KSB7XG4gICAgaWYgKHZhbHVlLmNoYXJBdChpbmRleCAtIDEpICE9PSAnICcpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGluZGV4LS07XG4gIH1cblxuICByZXR1cm4gaW5kZXg7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gdGV4dDtcblxuZnVuY3Rpb24gdGV4dChlYXQsIHZhbHVlLCBzaWxlbnQpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgbWV0aG9kcztcbiAgdmFyIHRva2VuaXplcnM7XG4gIHZhciBpbmRleDtcbiAgdmFyIGxlbmd0aDtcbiAgdmFyIHN1YnZhbHVlO1xuICB2YXIgcG9zaXRpb247XG4gIHZhciB0b2tlbml6ZXI7XG4gIHZhciBuYW1lO1xuICB2YXIgbWluO1xuICB2YXIgbm93O1xuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAtIG5ldmVyIHVzZWQgKHlldCkgKi9cbiAgaWYgKHNpbGVudCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgbWV0aG9kcyA9IHNlbGYuaW5saW5lTWV0aG9kcztcbiAgbGVuZ3RoID0gbWV0aG9kcy5sZW5ndGg7XG4gIHRva2VuaXplcnMgPSBzZWxmLmlubGluZVRva2VuaXplcnM7XG4gIGluZGV4ID0gLTE7XG4gIG1pbiA9IHZhbHVlLmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIG5hbWUgPSBtZXRob2RzW2luZGV4XTtcblxuICAgIGlmIChuYW1lID09PSAndGV4dCcgfHwgIXRva2VuaXplcnNbbmFtZV0pIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHRva2VuaXplciA9IHRva2VuaXplcnNbbmFtZV0ubG9jYXRvcjtcblxuICAgIGlmICghdG9rZW5pemVyKSB7XG4gICAgICBlYXQuZmlsZS5mYWlsKCdNaXNzaW5nIGxvY2F0b3I6IGAnICsgbmFtZSArICdgJyk7XG4gICAgfVxuXG4gICAgcG9zaXRpb24gPSB0b2tlbml6ZXIuY2FsbChzZWxmLCB2YWx1ZSwgMSk7XG5cbiAgICBpZiAocG9zaXRpb24gIT09IC0xICYmIHBvc2l0aW9uIDwgbWluKSB7XG4gICAgICBtaW4gPSBwb3NpdGlvbjtcbiAgICB9XG4gIH1cblxuICBzdWJ2YWx1ZSA9IHZhbHVlLnNsaWNlKDAsIG1pbik7XG4gIG5vdyA9IGVhdC5ub3coKTtcblxuICBzZWxmLmRlY29kZShzdWJ2YWx1ZSwgbm93LCBmdW5jdGlvbiAoY29udGVudCwgcG9zaXRpb24sIHNvdXJjZSkge1xuICAgIGVhdChzb3VyY2UgfHwgY29udGVudCkoe1xuICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgdmFsdWU6IGNvbnRlbnRcbiAgICB9KTtcbiAgfSk7XG59XG4iLCJ2YXIgdmlzaXRXaXRoUGFyZW50cyA9IHJlcXVpcmUoJ3VuaXN0LXV0aWwtdmlzaXQtcGFyZW50cycpO1xuXG5mdW5jdGlvbiBhZGRMaXN0TWV0YWRhdGEoKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoYXN0KSB7XG4gICAgdmlzaXRXaXRoUGFyZW50cyhhc3QsICdsaXN0JywgZnVuY3Rpb24gKGxpc3ROb2RlLCBwYXJlbnRzKSB7XG4gICAgICB2YXIgZGVwdGggPSAwLCBpLCBuO1xuICAgICAgZm9yIChpID0gMCwgbiA9IHBhcmVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgIGlmIChwYXJlbnRzW2ldLnR5cGUgPT09ICdsaXN0JykgZGVwdGggKz0gMTtcbiAgICAgIH1cbiAgICAgIGZvciAoaSA9IDAsIG4gPSBsaXN0Tm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgdmFyIGNoaWxkID0gbGlzdE5vZGUuY2hpbGRyZW5baV07XG4gICAgICAgIGNoaWxkLmluZGV4ID0gaTtcbiAgICAgICAgY2hpbGQub3JkZXJlZCA9IGxpc3ROb2RlLm9yZGVyZWQ7XG4gICAgICB9XG4gICAgICBsaXN0Tm9kZS5kZXB0aCA9IGRlcHRoO1xuICAgIH0pO1xuICAgIHJldHVybiBhc3Q7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYWRkTGlzdE1ldGFkYXRhO1xuIiwiJ3VzZSBzdHJpY3QnXG5cbi8qIEV4cG9zZS4gKi9cbm1vZHVsZS5leHBvcnRzID0gdmlzaXRQYXJlbnRzXG5cbi8qIFZpc2l0LiAqL1xuZnVuY3Rpb24gdmlzaXRQYXJlbnRzKHRyZWUsIHR5cGUsIHZpc2l0b3IpIHtcbiAgdmFyIHN0YWNrID0gW11cblxuICBpZiAodHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2aXNpdG9yID0gdHlwZVxuICAgIHR5cGUgPSBudWxsXG4gIH1cblxuICBvbmUodHJlZSlcblxuICAvKiBWaXNpdCBhIHNpbmdsZSBub2RlLiAqL1xuICBmdW5jdGlvbiBvbmUobm9kZSkge1xuICAgIHZhciByZXN1bHRcblxuICAgIGlmICghdHlwZSB8fCBub2RlLnR5cGUgPT09IHR5cGUpIHtcbiAgICAgIHJlc3VsdCA9IHZpc2l0b3Iobm9kZSwgc3RhY2suY29uY2F0KCkpXG4gICAgfVxuXG4gICAgaWYgKG5vZGUuY2hpbGRyZW4gJiYgcmVzdWx0ICE9PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIGFsbChub2RlLmNoaWxkcmVuLCBub2RlKVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHRcbiAgfVxuXG4gIC8qIFZpc2l0IGNoaWxkcmVuIGluIGBwYXJlbnRgLiAqL1xuICBmdW5jdGlvbiBhbGwoY2hpbGRyZW4sIHBhcmVudCkge1xuICAgIHZhciBsZW5ndGggPSBjaGlsZHJlbi5sZW5ndGhcbiAgICB2YXIgaW5kZXggPSAtMVxuICAgIHZhciBjaGlsZFxuXG4gICAgc3RhY2sucHVzaChwYXJlbnQpXG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgY2hpbGQgPSBjaGlsZHJlbltpbmRleF1cblxuICAgICAgaWYgKGNoaWxkICYmIG9uZShjaGlsZCkgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH1cblxuICAgIHN0YWNrLnBvcCgpXG5cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBOYWl2ZSwgc2ltcGxlIHBsdWdpbiB0byBtYXRjaCBpbmxpbmUgbm9kZXMgd2l0aG91dCBhdHRyaWJ1dGVzXG4gKiBUaGlzIGFsbG93cyBzYXkgPHN0cm9uZz5mb288L3N0cm9uZz4sIGJ1dCBub3QgPHN0cm9uZyBjbGFzcz1cInZlcnlcIj5mb288L3N0cm9uZz5cbiAqIEZvciBwcm9wZXIgSFRNTCBzdXBwb3J0LCB5b3UnbGwgd2FudCBhIGRpZmZlcmVudCBwbHVnaW5cbiAqKi9cbnZhciB2aXNpdCA9IHJlcXVpcmUoJ3VuaXN0LXV0aWwtdmlzaXQnKTtcblxudmFyIHR5cGUgPSAndmlydHVhbEh0bWwnO1xudmFyIHNlbGZDbG9zaW5nUmUgPSAvXjwoYXJlYXxiYXNlfGJyfGNvbHxlbWJlZHxocnxpbWd8aW5wdXR8a2V5Z2VufGxpbmt8bWV0YXxwYXJhbXxzb3VyY2V8dHJhY2t8d2JyKVxccypcXC8/PiQvaTtcbnZhciBzaW1wbGVUYWdSZSA9IC9ePChcXC8/KShbYS16XSspXFxzKj4kLztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodHJlZSkge1xuICB2YXIgb3BlbjtcbiAgdmFyIGN1cnJlbnRQYXJlbnQ7XG4gIHZpc2l0KHRyZWUsICdodG1sJywgZnVuY3Rpb24gKG5vZGUsIGluZGV4LCBwYXJlbnQpIHtcbiAgICBpZiAoY3VycmVudFBhcmVudCAhPT0gcGFyZW50KSB7XG4gICAgICBvcGVuID0gW107XG4gICAgICBjdXJyZW50UGFyZW50ID0gcGFyZW50O1xuICAgIH1cblxuICAgIHZhciBzZWxmQ2xvc2luZyA9IGdldFNlbGZDbG9zaW5nKG5vZGUpO1xuXG4gICAgaWYgKHNlbGZDbG9zaW5nKSB7XG4gICAgICBwYXJlbnQuY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAxLCB7XG4gICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgIHRhZzogc2VsZkNsb3NpbmcsXG4gICAgICAgIHBvc2l0aW9uOiBub2RlLnBvc2l0aW9uXG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHZhciBjdXJyZW50ID0gZ2V0U2ltcGxlVGFnKG5vZGUsIHBhcmVudCk7XG5cbiAgICBpZiAoIWN1cnJlbnQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHZhciBtYXRjaGluZyA9IGZpbmRBbmRQdWxsKG9wZW4sIGN1cnJlbnQudGFnKTtcblxuICAgIGlmIChtYXRjaGluZykge1xuICAgICAgcGFyZW50LmNoaWxkcmVuLnNwbGljZShpbmRleCwgMCwgdmlydHVhbChjdXJyZW50LCBtYXRjaGluZywgcGFyZW50KSk7XG4gICAgfSBlbHNlIGlmICghY3VycmVudC5vcGVuaW5nKSB7XG4gICAgICBvcGVuLnB1c2goY3VycmVudCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH0sIHRydWUgLy8gSXRlcmF0ZSBpbiByZXZlcnNlXG4gICk7XG4gIHJldHVybiB0cmVlO1xufTtcblxuZnVuY3Rpb24gZmluZEFuZFB1bGwob3BlbiwgbWF0Y2hpbmdUYWcpIHtcbiAgdmFyIGkgPSBvcGVuLmxlbmd0aDtcblxuICB3aGlsZSAoaS0tKSB7XG4gICAgaWYgKG9wZW5baV0udGFnID09PSBtYXRjaGluZ1RhZykge1xuICAgICAgcmV0dXJuIG9wZW4uc3BsaWNlKGksIDEpWzBdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gZ2V0U2ltcGxlVGFnKG5vZGUsIHBhcmVudCkge1xuICB2YXIgbWF0Y2ggPSBub2RlLnZhbHVlLm1hdGNoKHNpbXBsZVRhZ1JlKTtcbiAgcmV0dXJuIG1hdGNoID8ge1xuICAgIHRhZzogbWF0Y2hbMl0sXG4gICAgb3BlbmluZzogIW1hdGNoWzFdLFxuICAgIG5vZGU6IG5vZGVcbiAgfSA6IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBnZXRTZWxmQ2xvc2luZyhub2RlKSB7XG4gIHZhciBtYXRjaCA9IG5vZGUudmFsdWUubWF0Y2goc2VsZkNsb3NpbmdSZSk7XG4gIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdIDogZmFsc2U7XG59XG5cbmZ1bmN0aW9uIHZpcnR1YWwoZnJvbU5vZGUsIHRvTm9kZSwgcGFyZW50KSB7XG4gIHZhciBmcm9tSW5kZXggPSBwYXJlbnQuY2hpbGRyZW4uaW5kZXhPZihmcm9tTm9kZS5ub2RlKTtcbiAgdmFyIHRvSW5kZXggPSBwYXJlbnQuY2hpbGRyZW4uaW5kZXhPZih0b05vZGUubm9kZSk7XG4gIHZhciBleHRyYWN0ZWQgPSBwYXJlbnQuY2hpbGRyZW4uc3BsaWNlKGZyb21JbmRleCwgdG9JbmRleCAtIGZyb21JbmRleCArIDEpO1xuICB2YXIgY2hpbGRyZW4gPSBleHRyYWN0ZWQuc2xpY2UoMSwgLTEpO1xuICByZXR1cm4ge1xuICAgIHR5cGU6IHR5cGUsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIHRhZzogZnJvbU5vZGUudGFnLFxuICAgIHBvc2l0aW9uOiB7XG4gICAgICBzdGFydDogZnJvbU5vZGUubm9kZS5wb3NpdGlvbi5zdGFydCxcbiAgICAgIGVuZDogdG9Ob2RlLm5vZGUucG9zaXRpb24uZW5kLFxuICAgICAgaW5kZW50OiBbXVxuICAgIH1cbiAgfTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHZpc2l0ID0gcmVxdWlyZSgndW5pc3QtdXRpbC12aXNpdCcpO1xuXG5leHBvcnRzLm9mVHlwZSA9IGZ1bmN0aW9uICh0eXBlcywgbW9kZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICB0eXBlcy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICByZXR1cm4gdmlzaXQobm9kZSwgdHlwZSwgZGlzYWxsb3csIHRydWUpO1xuICAgIH0pO1xuICAgIHJldHVybiBub2RlO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGRpc2FsbG93KG5vZGUsIGluZGV4LCBwYXJlbnQpIHtcbiAgICBpZiAocGFyZW50KSB7XG4gICAgICB1bnRhbmdsZShub2RlLCBpbmRleCwgcGFyZW50LCBtb2RlKTtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydHMuaWZOb3RNYXRjaCA9IGZ1bmN0aW9uIChhbGxvd05vZGUsIG1vZGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgdmlzaXQobm9kZSwgZGlzYWxsb3csIHRydWUpO1xuICAgIHJldHVybiBub2RlO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGRpc2FsbG93KG5vZGUsIGluZGV4LCBwYXJlbnQpIHtcbiAgICBpZiAocGFyZW50ICYmICFhbGxvd05vZGUobm9kZSwgaW5kZXgsIHBhcmVudCkpIHtcbiAgICAgIHVudGFuZ2xlKG5vZGUsIGluZGV4LCBwYXJlbnQsIG1vZGUpO1xuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gdW50YW5nbGUobm9kZSwgaW5kZXgsIHBhcmVudCwgbW9kZSkge1xuICBpZiAobW9kZSA9PT0gJ3JlbW92ZScpIHtcbiAgICBwYXJlbnQuY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAxKTtcbiAgfSBlbHNlIGlmIChtb2RlID09PSAndW53cmFwJykge1xuICAgIHZhciBhcmdzID0gW2luZGV4LCAxXTtcblxuICAgIGlmIChub2RlLmNoaWxkcmVuKSB7XG4gICAgICBhcmdzID0gYXJncy5jb25jYXQobm9kZS5jaGlsZHJlbik7XG4gICAgfVxuXG4gICAgQXJyYXkucHJvdG90eXBlLnNwbGljZS5hcHBseShwYXJlbnQuY2hpbGRyZW4sIGFyZ3MpO1xuICB9XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgeHRlbmQgPSByZXF1aXJlKCd4dGVuZCcpO1xuXG5mdW5jdGlvbiBhc3RUb1JlYWN0KG5vZGUsIG9wdGlvbnMpIHtcbiAgdmFyIHBhcmVudCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gIHZhciBpbmRleCA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogMDtcbiAgdmFyIHJlbmRlcmVyID0gb3B0aW9ucy5yZW5kZXJlcnNbbm9kZS50eXBlXTtcbiAgdmFyIHBvcyA9IG5vZGUucG9zaXRpb24uc3RhcnQ7XG4gIHZhciBrZXkgPSBbbm9kZS50eXBlLCBwb3MubGluZSwgcG9zLmNvbHVtbl0uam9pbignLScpO1xuXG4gIGlmICh0eXBlb2YgcmVuZGVyZXIgIT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHJlbmRlcmVyICE9PSAnc3RyaW5nJyAmJiAhaXNSZWFjdEZyYWdtZW50KHJlbmRlcmVyKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlJlbmRlcmVyIGZvciB0eXBlIGBcIi5jb25jYXQobm9kZS50eXBlLCBcImAgbm90IGRlZmluZWQgb3IgaXMgbm90IHJlbmRlcmFibGVcIikpO1xuICB9XG5cbiAgdmFyIG5vZGVQcm9wcyA9IGdldE5vZGVQcm9wcyhub2RlLCBrZXksIG9wdGlvbnMsIHJlbmRlcmVyLCBwYXJlbnQsIGluZGV4KTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQocmVuZGVyZXIsIG5vZGVQcm9wcywgbm9kZVByb3BzLmNoaWxkcmVuIHx8IHJlc29sdmVDaGlsZHJlbigpIHx8IHVuZGVmaW5lZCk7XG5cbiAgZnVuY3Rpb24gcmVzb2x2ZUNoaWxkcmVuKCkge1xuICAgIHJldHVybiBub2RlLmNoaWxkcmVuICYmIG5vZGUuY2hpbGRyZW4ubWFwKGZ1bmN0aW9uIChjaGlsZE5vZGUsIGkpIHtcbiAgICAgIHJldHVybiBhc3RUb1JlYWN0KGNoaWxkTm9kZSwgb3B0aW9ucywge1xuICAgICAgICBub2RlOiBub2RlLFxuICAgICAgICBwcm9wczogbm9kZVByb3BzXG4gICAgICB9LCBpKTtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc1JlYWN0RnJhZ21lbnQocmVuZGVyZXIpIHtcbiAgcmV0dXJuIFJlYWN0LkZyYWdtZW50ICYmIFJlYWN0LkZyYWdtZW50ID09PSByZW5kZXJlcjtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1wYXJhbXMsIGNvbXBsZXhpdHlcblxuXG5mdW5jdGlvbiBnZXROb2RlUHJvcHMobm9kZSwga2V5LCBvcHRzLCByZW5kZXJlciwgcGFyZW50LCBpbmRleCkge1xuICB2YXIgcHJvcHMgPSB7XG4gICAga2V5OiBrZXlcbiAgfTtcbiAgdmFyIGlzVGFnUmVuZGVyZXIgPSB0eXBlb2YgcmVuZGVyZXIgPT09ICdzdHJpbmcnOyAvLyBgc291cmNlUG9zYCBpcyB0cnVlIGlmIHRoZSB1c2VyIHdhbnRzIHNvdXJjZSBpbmZvcm1hdGlvbiAobGluZS9jb2x1bW4gaW5mbyBmcm9tIG1hcmtkb3duIHNvdXJjZSlcblxuICBpZiAob3B0cy5zb3VyY2VQb3MgJiYgbm9kZS5wb3NpdGlvbikge1xuICAgIHByb3BzWydkYXRhLXNvdXJjZXBvcyddID0gZmxhdHRlblBvc2l0aW9uKG5vZGUucG9zaXRpb24pO1xuICB9XG5cbiAgaWYgKG9wdHMucmF3U291cmNlUG9zICYmICFpc1RhZ1JlbmRlcmVyKSB7XG4gICAgcHJvcHMuc291cmNlUG9zaXRpb24gPSBub2RlLnBvc2l0aW9uO1xuICB9IC8vIElmIGBpbmNsdWRlTm9kZUluZGV4YCBpcyB0cnVlLCBwYXNzIG5vZGUgaW5kZXggaW5mbyB0byBhbGwgbm9uLXRhZyByZW5kZXJlcnNcblxuXG4gIGlmIChvcHRzLmluY2x1ZGVOb2RlSW5kZXggJiYgcGFyZW50Lm5vZGUgJiYgcGFyZW50Lm5vZGUuY2hpbGRyZW4gJiYgIWlzVGFnUmVuZGVyZXIpIHtcbiAgICBwcm9wcy5pbmRleCA9IHBhcmVudC5ub2RlLmNoaWxkcmVuLmluZGV4T2Yobm9kZSk7XG4gICAgcHJvcHMucGFyZW50Q2hpbGRDb3VudCA9IHBhcmVudC5ub2RlLmNoaWxkcmVuLmxlbmd0aDtcbiAgfVxuXG4gIHZhciByZWYgPSBub2RlLmlkZW50aWZpZXIgIT09IG51bGwgJiYgbm9kZS5pZGVudGlmaWVyICE9PSB1bmRlZmluZWQgPyBvcHRzLmRlZmluaXRpb25zW25vZGUuaWRlbnRpZmllcl0gfHwge30gOiBudWxsO1xuXG4gIHN3aXRjaCAobm9kZS50eXBlKSB7XG4gICAgY2FzZSAncm9vdCc6XG4gICAgICBhc3NpZ25EZWZpbmVkKHByb3BzLCB7XG4gICAgICAgIGNsYXNzTmFtZTogb3B0cy5jbGFzc05hbWVcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICd0ZXh0JzpcbiAgICAgIHByb3BzLm5vZGVLZXkgPSBrZXk7XG4gICAgICBwcm9wcy5jaGlsZHJlbiA9IG5vZGUudmFsdWU7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2hlYWRpbmcnOlxuICAgICAgcHJvcHMubGV2ZWwgPSBub2RlLmRlcHRoO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdsaXN0JzpcbiAgICAgIHByb3BzLnN0YXJ0ID0gbm9kZS5zdGFydDtcbiAgICAgIHByb3BzLm9yZGVyZWQgPSBub2RlLm9yZGVyZWQ7XG4gICAgICBwcm9wcy50aWdodCA9ICFub2RlLmxvb3NlO1xuICAgICAgcHJvcHMuZGVwdGggPSBub2RlLmRlcHRoO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdsaXN0SXRlbSc6XG4gICAgICBwcm9wcy5jaGVja2VkID0gbm9kZS5jaGVja2VkO1xuICAgICAgcHJvcHMudGlnaHQgPSAhbm9kZS5sb29zZTtcbiAgICAgIHByb3BzLm9yZGVyZWQgPSBub2RlLm9yZGVyZWQ7XG4gICAgICBwcm9wcy5pbmRleCA9IG5vZGUuaW5kZXg7XG4gICAgICBwcm9wcy5jaGlsZHJlbiA9IGdldExpc3RJdGVtQ2hpbGRyZW4obm9kZSwgcGFyZW50KS5tYXAoZnVuY3Rpb24gKGNoaWxkTm9kZSwgaSkge1xuICAgICAgICByZXR1cm4gYXN0VG9SZWFjdChjaGlsZE5vZGUsIG9wdHMsIHtcbiAgICAgICAgICBub2RlOiBub2RlLFxuICAgICAgICAgIHByb3BzOiBwcm9wc1xuICAgICAgICB9LCBpKTtcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdkZWZpbml0aW9uJzpcbiAgICAgIGFzc2lnbkRlZmluZWQocHJvcHMsIHtcbiAgICAgICAgaWRlbnRpZmllcjogbm9kZS5pZGVudGlmaWVyLFxuICAgICAgICB0aXRsZTogbm9kZS50aXRsZSxcbiAgICAgICAgdXJsOiBub2RlLnVybFxuICAgICAgfSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2NvZGUnOlxuICAgICAgYXNzaWduRGVmaW5lZChwcm9wcywge1xuICAgICAgICBsYW5ndWFnZTogbm9kZS5sYW5nICYmIG5vZGUubGFuZy5zcGxpdCgvXFxzLywgMSlbMF1cbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdpbmxpbmVDb2RlJzpcbiAgICAgIHByb3BzLmNoaWxkcmVuID0gbm9kZS52YWx1ZTtcbiAgICAgIHByb3BzLmlubGluZSA9IHRydWU7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2xpbmsnOlxuICAgICAgYXNzaWduRGVmaW5lZChwcm9wcywge1xuICAgICAgICB0aXRsZTogbm9kZS50aXRsZSB8fCB1bmRlZmluZWQsXG4gICAgICAgIHRhcmdldDogdHlwZW9mIG9wdHMubGlua1RhcmdldCA9PT0gJ2Z1bmN0aW9uJyA/IG9wdHMubGlua1RhcmdldChub2RlLnVybCwgbm9kZS5jaGlsZHJlbiwgbm9kZS50aXRsZSkgOiBvcHRzLmxpbmtUYXJnZXQsXG4gICAgICAgIGhyZWY6IG9wdHMudHJhbnNmb3JtTGlua1VyaSA/IG9wdHMudHJhbnNmb3JtTGlua1VyaShub2RlLnVybCwgbm9kZS5jaGlsZHJlbiwgbm9kZS50aXRsZSkgOiBub2RlLnVybFxuICAgICAgfSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2ltYWdlJzpcbiAgICAgIGFzc2lnbkRlZmluZWQocHJvcHMsIHtcbiAgICAgICAgYWx0OiBub2RlLmFsdCB8fCB1bmRlZmluZWQsXG4gICAgICAgIHRpdGxlOiBub2RlLnRpdGxlIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgc3JjOiBvcHRzLnRyYW5zZm9ybUltYWdlVXJpID8gb3B0cy50cmFuc2Zvcm1JbWFnZVVyaShub2RlLnVybCwgbm9kZS5jaGlsZHJlbiwgbm9kZS50aXRsZSwgbm9kZS5hbHQpIDogbm9kZS51cmxcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdsaW5rUmVmZXJlbmNlJzpcbiAgICAgIGFzc2lnbkRlZmluZWQocHJvcHMsIHh0ZW5kKHJlZiwge1xuICAgICAgICBocmVmOiBvcHRzLnRyYW5zZm9ybUxpbmtVcmkgPyBvcHRzLnRyYW5zZm9ybUxpbmtVcmkocmVmLmhyZWYpIDogcmVmLmhyZWZcbiAgICAgIH0pKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnaW1hZ2VSZWZlcmVuY2UnOlxuICAgICAgYXNzaWduRGVmaW5lZChwcm9wcywge1xuICAgICAgICBzcmM6IG9wdHMudHJhbnNmb3JtSW1hZ2VVcmkgJiYgcmVmLmhyZWYgPyBvcHRzLnRyYW5zZm9ybUltYWdlVXJpKHJlZi5ocmVmLCBub2RlLmNoaWxkcmVuLCByZWYudGl0bGUsIG5vZGUuYWx0KSA6IHJlZi5ocmVmLFxuICAgICAgICB0aXRsZTogcmVmLnRpdGxlIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgYWx0OiBub2RlLmFsdCB8fCB1bmRlZmluZWRcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICd0YWJsZSc6XG4gICAgY2FzZSAndGFibGVIZWFkJzpcbiAgICBjYXNlICd0YWJsZUJvZHknOlxuICAgICAgcHJvcHMuY29sdW1uQWxpZ25tZW50ID0gbm9kZS5hbGlnbjtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAndGFibGVSb3cnOlxuICAgICAgcHJvcHMuaXNIZWFkZXIgPSBwYXJlbnQubm9kZS50eXBlID09PSAndGFibGVIZWFkJztcbiAgICAgIHByb3BzLmNvbHVtbkFsaWdubWVudCA9IHBhcmVudC5wcm9wcy5jb2x1bW5BbGlnbm1lbnQ7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3RhYmxlQ2VsbCc6XG4gICAgICBhc3NpZ25EZWZpbmVkKHByb3BzLCB7XG4gICAgICAgIGlzSGVhZGVyOiBwYXJlbnQucHJvcHMuaXNIZWFkZXIsXG4gICAgICAgIGFsaWduOiBwYXJlbnQucHJvcHMuY29sdW1uQWxpZ25tZW50W2luZGV4XVxuICAgICAgfSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3ZpcnR1YWxIdG1sJzpcbiAgICAgIHByb3BzLnRhZyA9IG5vZGUudGFnO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdodG1sJzpcbiAgICAgIC8vIEB0b2RvIGZpbmQgYSBiZXR0ZXIgd2F5IHRoYW4gdGhpc1xuICAgICAgcHJvcHMuaXNCbG9jayA9IG5vZGUucG9zaXRpb24uc3RhcnQubGluZSAhPT0gbm9kZS5wb3NpdGlvbi5lbmQubGluZTtcbiAgICAgIHByb3BzLmVzY2FwZUh0bWwgPSBvcHRzLmVzY2FwZUh0bWw7XG4gICAgICBwcm9wcy5za2lwSHRtbCA9IG9wdHMuc2tpcEh0bWw7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3BhcnNlZEh0bWwnOlxuICAgICAge1xuICAgICAgICB2YXIgcGFyc2VkQ2hpbGRyZW47XG5cbiAgICAgICAgaWYgKG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgICBwYXJzZWRDaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4ubWFwKGZ1bmN0aW9uIChjaGlsZCwgaSkge1xuICAgICAgICAgICAgcmV0dXJuIGFzdFRvUmVhY3QoY2hpbGQsIG9wdHMsIHtcbiAgICAgICAgICAgICAgbm9kZTogbm9kZSxcbiAgICAgICAgICAgICAgcHJvcHM6IHByb3BzXG4gICAgICAgICAgICB9LCBpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3BzLmVzY2FwZUh0bWwgPSBvcHRzLmVzY2FwZUh0bWw7XG4gICAgICAgIHByb3BzLnNraXBIdG1sID0gb3B0cy5za2lwSHRtbDtcbiAgICAgICAgcHJvcHMuZWxlbWVudCA9IG1lcmdlTm9kZUNoaWxkcmVuKG5vZGUsIHBhcnNlZENoaWxkcmVuKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICBkZWZhdWx0OlxuICAgICAgYXNzaWduRGVmaW5lZChwcm9wcywgeHRlbmQobm9kZSwge1xuICAgICAgICB0eXBlOiB1bmRlZmluZWQsXG4gICAgICAgIHBvc2l0aW9uOiB1bmRlZmluZWQsXG4gICAgICAgIGNoaWxkcmVuOiB1bmRlZmluZWRcbiAgICAgIH0pKTtcbiAgfVxuXG4gIGlmICghaXNUYWdSZW5kZXJlciAmJiBub2RlLnZhbHVlKSB7XG4gICAgcHJvcHMudmFsdWUgPSBub2RlLnZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHByb3BzO1xufVxuXG5mdW5jdGlvbiBhc3NpZ25EZWZpbmVkKHRhcmdldCwgYXR0cnMpIHtcbiAgZm9yICh2YXIga2V5IGluIGF0dHJzKSB7XG4gICAgaWYgKHR5cGVvZiBhdHRyc1trZXldICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgdGFyZ2V0W2tleV0gPSBhdHRyc1trZXldO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBtZXJnZU5vZGVDaGlsZHJlbihub2RlLCBwYXJzZWRDaGlsZHJlbikge1xuICB2YXIgZWwgPSBub2RlLmVsZW1lbnQ7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoZWwpKSB7XG4gICAgdmFyIEZyYWdtZW50ID0gUmVhY3QuRnJhZ21lbnQgfHwgJ2Rpdic7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRnJhZ21lbnQsIG51bGwsIGVsKTtcbiAgfVxuXG4gIGlmIChlbC5wcm9wcy5jaGlsZHJlbiB8fCBwYXJzZWRDaGlsZHJlbikge1xuICAgIHZhciBjaGlsZHJlbiA9IFJlYWN0LkNoaWxkcmVuLnRvQXJyYXkoZWwucHJvcHMuY2hpbGRyZW4pLmNvbmNhdChwYXJzZWRDaGlsZHJlbik7XG4gICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChlbCwgbnVsbCwgY2hpbGRyZW4pO1xuICB9XG5cbiAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChlbCwgbnVsbCk7XG59XG5cbmZ1bmN0aW9uIGZsYXR0ZW5Qb3NpdGlvbihwb3MpIHtcbiAgcmV0dXJuIFtwb3Muc3RhcnQubGluZSwgJzonLCBwb3Muc3RhcnQuY29sdW1uLCAnLScsIHBvcy5lbmQubGluZSwgJzonLCBwb3MuZW5kLmNvbHVtbl0ubWFwKFN0cmluZykuam9pbignJyk7XG59XG5cbmZ1bmN0aW9uIGdldExpc3RJdGVtQ2hpbGRyZW4obm9kZSwgcGFyZW50KSB7XG4gIGlmIChub2RlLmxvb3NlKSB7XG4gICAgcmV0dXJuIG5vZGUuY2hpbGRyZW47XG4gIH1cblxuICBpZiAocGFyZW50Lm5vZGUgJiYgbm9kZS5pbmRleCA+IDAgJiYgcGFyZW50Lm5vZGUuY2hpbGRyZW5bbm9kZS5pbmRleCAtIDFdLmxvb3NlKSB7XG4gICAgcmV0dXJuIG5vZGUuY2hpbGRyZW47XG4gIH1cblxuICByZXR1cm4gdW53cmFwUGFyYWdyYXBocyhub2RlKTtcbn1cblxuZnVuY3Rpb24gdW53cmFwUGFyYWdyYXBocyhub2RlKSB7XG4gIHJldHVybiBub2RlLmNoaWxkcmVuLnJlZHVjZShmdW5jdGlvbiAoYXJyYXksIGNoaWxkKSB7XG4gICAgcmV0dXJuIGFycmF5LmNvbmNhdChjaGlsZC50eXBlID09PSAncGFyYWdyYXBoJyA/IGNoaWxkLmNoaWxkcmVuIHx8IFtdIDogW2NoaWxkXSk7XG4gIH0sIFtdKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhc3RUb1JlYWN0OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHZpc2l0ID0gcmVxdWlyZSgndW5pc3QtdXRpbC12aXNpdCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChub2RlKSB7XG4gIHZpc2l0KG5vZGUsICd0YWJsZScsIHdyYXApO1xuICByZXR1cm4gbm9kZTtcbn07XG5cbmZ1bmN0aW9uIHdyYXAodGFibGUpIHtcbiAgdmFyIGNoaWxkcmVuID0gdGFibGUuY2hpbGRyZW47XG4gIHRhYmxlLmNoaWxkcmVuID0gW3tcbiAgICB0eXBlOiAndGFibGVIZWFkJyxcbiAgICBhbGlnbjogdGFibGUuYWxpZ24sXG4gICAgY2hpbGRyZW46IFtjaGlsZHJlblswXV0sXG4gICAgcG9zaXRpb246IGNoaWxkcmVuWzBdLnBvc2l0aW9uXG4gIH1dO1xuXG4gIGlmIChjaGlsZHJlbi5sZW5ndGggPiAxKSB7XG4gICAgdGFibGUuY2hpbGRyZW4ucHVzaCh7XG4gICAgICB0eXBlOiAndGFibGVCb2R5JyxcbiAgICAgIGFsaWduOiB0YWJsZS5hbGlnbixcbiAgICAgIGNoaWxkcmVuOiBjaGlsZHJlbi5zbGljZSgxKSxcbiAgICAgIHBvc2l0aW9uOiB7XG4gICAgICAgIHN0YXJ0OiBjaGlsZHJlblsxXS5wb3NpdGlvbi5zdGFydCxcbiAgICAgICAgZW5kOiBjaGlsZHJlbltjaGlsZHJlbi5sZW5ndGggLSAxXS5wb3NpdGlvbi5lbmRcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXREZWZpbml0aW9ucyhub2RlKSB7XG4gIHZhciBkZWZzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgcmV0dXJuIChub2RlLmNoaWxkcmVuIHx8IFtdKS5yZWR1Y2UoZnVuY3Rpb24gKGRlZmluaXRpb25zLCBjaGlsZCkge1xuICAgIGlmIChjaGlsZC50eXBlID09PSAnZGVmaW5pdGlvbicpIHtcbiAgICAgIGRlZmluaXRpb25zW2NoaWxkLmlkZW50aWZpZXJdID0ge1xuICAgICAgICBocmVmOiBjaGlsZC51cmwsXG4gICAgICAgIHRpdGxlOiBjaGlsZC50aXRsZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2V0RGVmaW5pdGlvbnMoY2hpbGQsIGRlZmluaXRpb25zKTtcbiAgfSwgZGVmcyk7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgcHJvdG9jb2xzID0gWydodHRwJywgJ2h0dHBzJywgJ21haWx0bycsICd0ZWwnXTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB1cmlUcmFuc2Zvcm1lcih1cmkpIHtcbiAgdmFyIHVybCA9ICh1cmkgfHwgJycpLnRyaW0oKTtcbiAgdmFyIGZpcnN0ID0gdXJsLmNoYXJBdCgwKTtcblxuICBpZiAoZmlyc3QgPT09ICcjJyB8fCBmaXJzdCA9PT0gJy8nKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHZhciBjb2xvbiA9IHVybC5pbmRleE9mKCc6Jyk7XG5cbiAgaWYgKGNvbG9uID09PSAtMSkge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB2YXIgbGVuZ3RoID0gcHJvdG9jb2xzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gLTE7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgcHJvdG9jb2wgPSBwcm90b2NvbHNbaW5kZXhdO1xuXG4gICAgaWYgKGNvbG9uID09PSBwcm90b2NvbC5sZW5ndGggJiYgdXJsLnNsaWNlKDAsIHByb3RvY29sLmxlbmd0aCkudG9Mb3dlckNhc2UoKSA9PT0gcHJvdG9jb2wpIHtcbiAgICAgIHJldHVybiB1cmw7XG4gICAgfVxuICB9XG5cbiAgaW5kZXggPSB1cmwuaW5kZXhPZignPycpO1xuXG4gIGlmIChpbmRleCAhPT0gLTEgJiYgY29sb24gPiBpbmRleCkge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICBpbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG5cbiAgaWYgKGluZGV4ICE9PSAtMSAmJiBjb2xvbiA+IGluZGV4KSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2NyaXB0LXVybFxuXG5cbiAgcmV0dXJuICdqYXZhc2NyaXB0OnZvaWQoMCknO1xufTsiLCIvKiBlc2xpbnQtZGlzYWJsZSByZWFjdC9wcm9wLXR5cGVzLCByZWFjdC9uby1tdWx0aS1jb21wICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciB4dGVuZCA9IHJlcXVpcmUoJ3h0ZW5kJyk7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBzdXBwb3J0c1N0cmluZ1JlbmRlciA9IHBhcnNlSW50KChSZWFjdC52ZXJzaW9uIHx8ICcxNicpLnNsaWNlKDAsIDIpLCAxMCkgPj0gMTY7XG52YXIgY3JlYXRlRWxlbWVudCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQ7XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgYnJlYWs6ICdicicsXG4gIHBhcmFncmFwaDogJ3AnLFxuICBlbXBoYXNpczogJ2VtJyxcbiAgc3Ryb25nOiAnc3Ryb25nJyxcbiAgdGhlbWF0aWNCcmVhazogJ2hyJyxcbiAgYmxvY2txdW90ZTogJ2Jsb2NrcXVvdGUnLFxuICBkZWxldGU6ICdkZWwnLFxuICBsaW5rOiAnYScsXG4gIGltYWdlOiAnaW1nJyxcbiAgbGlua1JlZmVyZW5jZTogJ2EnLFxuICBpbWFnZVJlZmVyZW5jZTogJ2ltZycsXG4gIHRhYmxlOiBTaW1wbGVSZW5kZXJlci5iaW5kKG51bGwsICd0YWJsZScpLFxuICB0YWJsZUhlYWQ6IFNpbXBsZVJlbmRlcmVyLmJpbmQobnVsbCwgJ3RoZWFkJyksXG4gIHRhYmxlQm9keTogU2ltcGxlUmVuZGVyZXIuYmluZChudWxsLCAndGJvZHknKSxcbiAgdGFibGVSb3c6IFNpbXBsZVJlbmRlcmVyLmJpbmQobnVsbCwgJ3RyJyksXG4gIHRhYmxlQ2VsbDogVGFibGVDZWxsLFxuICByb290OiBSb290LFxuICB0ZXh0OiBUZXh0UmVuZGVyZXIsXG4gIGxpc3Q6IExpc3QsXG4gIGxpc3RJdGVtOiBMaXN0SXRlbSxcbiAgZGVmaW5pdGlvbjogTnVsbFJlbmRlcmVyLFxuICBoZWFkaW5nOiBIZWFkaW5nLFxuICBpbmxpbmVDb2RlOiBJbmxpbmVDb2RlLFxuICBjb2RlOiBDb2RlQmxvY2ssXG4gIGh0bWw6IEh0bWwsXG4gIHZpcnR1YWxIdG1sOiBWaXJ0dWFsSHRtbCxcbiAgcGFyc2VkSHRtbDogUGFyc2VkSHRtbFxufTtcblxuZnVuY3Rpb24gVGV4dFJlbmRlcmVyKHByb3BzKSB7XG4gIHJldHVybiBzdXBwb3J0c1N0cmluZ1JlbmRlciA/IHByb3BzLmNoaWxkcmVuIDogY3JlYXRlRWxlbWVudCgnc3BhbicsIG51bGwsIHByb3BzLmNoaWxkcmVuKTtcbn1cblxuZnVuY3Rpb24gUm9vdChwcm9wcykge1xuICB2YXIgdXNlRnJhZ21lbnQgPSAhcHJvcHMuY2xhc3NOYW1lO1xuICB2YXIgcm9vdCA9IHVzZUZyYWdtZW50ID8gUmVhY3QuRnJhZ21lbnQgfHwgJ2RpdicgOiAnZGl2JztcbiAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQocm9vdCwgdXNlRnJhZ21lbnQgPyBudWxsIDogcHJvcHMsIHByb3BzLmNoaWxkcmVuKTtcbn1cblxuZnVuY3Rpb24gU2ltcGxlUmVuZGVyZXIodGFnLCBwcm9wcykge1xuICByZXR1cm4gY3JlYXRlRWxlbWVudCh0YWcsIGdldENvcmVQcm9wcyhwcm9wcyksIHByb3BzLmNoaWxkcmVuKTtcbn1cblxuZnVuY3Rpb24gVGFibGVDZWxsKHByb3BzKSB7XG4gIHZhciBzdHlsZSA9IHByb3BzLmFsaWduID8ge1xuICAgIHRleHRBbGlnbjogcHJvcHMuYWxpZ25cbiAgfSA6IHVuZGVmaW5lZDtcbiAgdmFyIGNvcmVQcm9wcyA9IGdldENvcmVQcm9wcyhwcm9wcyk7XG4gIHJldHVybiBjcmVhdGVFbGVtZW50KHByb3BzLmlzSGVhZGVyID8gJ3RoJyA6ICd0ZCcsIHN0eWxlID8geHRlbmQoe1xuICAgIHN0eWxlOiBzdHlsZVxuICB9LCBjb3JlUHJvcHMpIDogY29yZVByb3BzLCBwcm9wcy5jaGlsZHJlbik7XG59XG5cbmZ1bmN0aW9uIEhlYWRpbmcocHJvcHMpIHtcbiAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoXCJoXCIuY29uY2F0KHByb3BzLmxldmVsKSwgZ2V0Q29yZVByb3BzKHByb3BzKSwgcHJvcHMuY2hpbGRyZW4pO1xufVxuXG5mdW5jdGlvbiBMaXN0KHByb3BzKSB7XG4gIHZhciBhdHRycyA9IGdldENvcmVQcm9wcyhwcm9wcyk7XG5cbiAgaWYgKHByb3BzLnN0YXJ0ICE9PSBudWxsICYmIHByb3BzLnN0YXJ0ICE9PSAxKSB7XG4gICAgYXR0cnMuc3RhcnQgPSBwcm9wcy5zdGFydC50b1N0cmluZygpO1xuICB9XG5cbiAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQocHJvcHMub3JkZXJlZCA/ICdvbCcgOiAndWwnLCBhdHRycywgcHJvcHMuY2hpbGRyZW4pO1xufVxuXG5mdW5jdGlvbiBMaXN0SXRlbShwcm9wcykge1xuICB2YXIgY2hlY2tib3ggPSBudWxsO1xuXG4gIGlmIChwcm9wcy5jaGVja2VkICE9PSBudWxsKSB7XG4gICAgdmFyIGNoZWNrZWQgPSBwcm9wcy5jaGVja2VkO1xuICAgIGNoZWNrYm94ID0gY3JlYXRlRWxlbWVudCgnaW5wdXQnLCB7XG4gICAgICB0eXBlOiAnY2hlY2tib3gnLFxuICAgICAgY2hlY2tlZDogY2hlY2tlZCxcbiAgICAgIHJlYWRPbmx5OiB0cnVlXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gY3JlYXRlRWxlbWVudCgnbGknLCBnZXRDb3JlUHJvcHMocHJvcHMpLCBjaGVja2JveCwgcHJvcHMuY2hpbGRyZW4pO1xufVxuXG5mdW5jdGlvbiBDb2RlQmxvY2socHJvcHMpIHtcbiAgdmFyIGNsYXNzTmFtZSA9IHByb3BzLmxhbmd1YWdlICYmIFwibGFuZ3VhZ2UtXCIuY29uY2F0KHByb3BzLmxhbmd1YWdlKTtcbiAgdmFyIGNvZGUgPSBjcmVhdGVFbGVtZW50KCdjb2RlJywgY2xhc3NOYW1lID8ge1xuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lXG4gIH0gOiBudWxsLCBwcm9wcy52YWx1ZSk7XG4gIHJldHVybiBjcmVhdGVFbGVtZW50KCdwcmUnLCBnZXRDb3JlUHJvcHMocHJvcHMpLCBjb2RlKTtcbn1cblxuZnVuY3Rpb24gSW5saW5lQ29kZShwcm9wcykge1xuICByZXR1cm4gY3JlYXRlRWxlbWVudCgnY29kZScsIGdldENvcmVQcm9wcyhwcm9wcyksIHByb3BzLmNoaWxkcmVuKTtcbn1cblxuZnVuY3Rpb24gSHRtbChwcm9wcykge1xuICBpZiAocHJvcHMuc2tpcEh0bWwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciB0YWcgPSBwcm9wcy5pc0Jsb2NrID8gJ2RpdicgOiAnc3Bhbic7XG5cbiAgaWYgKHByb3BzLmVzY2FwZUh0bWwpIHtcbiAgICB2YXIgY29tcCA9IFJlYWN0LkZyYWdtZW50IHx8IHRhZztcbiAgICByZXR1cm4gY3JlYXRlRWxlbWVudChjb21wLCBudWxsLCBwcm9wcy52YWx1ZSk7XG4gIH1cblxuICB2YXIgbm9kZVByb3BzID0ge1xuICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiB7XG4gICAgICBfX2h0bWw6IHByb3BzLnZhbHVlXG4gICAgfVxuICB9O1xuICByZXR1cm4gY3JlYXRlRWxlbWVudCh0YWcsIG5vZGVQcm9wcyk7XG59XG5cbmZ1bmN0aW9uIFBhcnNlZEh0bWwocHJvcHMpIHtcbiAgcmV0dXJuIHByb3BzWydkYXRhLXNvdXJjZXBvcyddID8gUmVhY3QuY2xvbmVFbGVtZW50KHByb3BzLmVsZW1lbnQsIHtcbiAgICAnZGF0YS1zb3VyY2Vwb3MnOiBwcm9wc1snZGF0YS1zb3VyY2Vwb3MnXVxuICB9KSA6IHByb3BzLmVsZW1lbnQ7XG59XG5cbmZ1bmN0aW9uIFZpcnR1YWxIdG1sKHByb3BzKSB7XG4gIHJldHVybiBjcmVhdGVFbGVtZW50KHByb3BzLnRhZywgZ2V0Q29yZVByb3BzKHByb3BzKSwgcHJvcHMuY2hpbGRyZW4pO1xufVxuXG5mdW5jdGlvbiBOdWxsUmVuZGVyZXIoKSB7XG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBnZXRDb3JlUHJvcHMocHJvcHMpIHtcbiAgcmV0dXJuIHByb3BzWydkYXRhLXNvdXJjZXBvcyddID8ge1xuICAgICdkYXRhLXNvdXJjZXBvcyc6IHByb3BzWydkYXRhLXNvdXJjZXBvcyddXG4gIH0gOiB7fTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIEh0bWxQYXJzZXIgPSAnX19STURfSFRNTF9QQVJTRVJfXyc7XG5leHBvcnRzLkh0bWxQYXJzZXIgPSB0eXBlb2YgU3ltYm9sID09PSAndW5kZWZpbmVkJyA/IEh0bWxQYXJzZXIgOiBTeW1ib2woSHRtbFBhcnNlcik7IiwiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gd2hpdGVzcGFjZVxuXG52YXIgZnJvbUNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlXG52YXIgcmUgPSAvXFxzL1xuXG4vLyBDaGVjayBpZiB0aGUgZ2l2ZW4gY2hhcmFjdGVyIGNvZGUsIG9yIHRoZSBjaGFyYWN0ZXIgY29kZSBhdCB0aGUgZmlyc3Rcbi8vIGNoYXJhY3RlciwgaXMgYSB3aGl0ZXNwYWNlIGNoYXJhY3Rlci5cbmZ1bmN0aW9uIHdoaXRlc3BhY2UoY2hhcmFjdGVyKSB7XG4gIHJldHVybiByZS50ZXN0KFxuICAgIHR5cGVvZiBjaGFyYWN0ZXIgPT09ICdudW1iZXInID8gZnJvbUNvZGUoY2hhcmFjdGVyKSA6IGNoYXJhY3Rlci5jaGFyQXQoMClcbiAgKVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBleHRlbmRcblxudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuZnVuY3Rpb24gZXh0ZW5kKCkge1xuICAgIHZhciB0YXJnZXQgPSB7fVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXVxuXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXRcbn1cbiIsIlxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gdHJpbTtcblxuZnVuY3Rpb24gdHJpbShzdHIpe1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMqfFxccyokL2csICcnKTtcbn1cblxuZXhwb3J0cy5sZWZ0ID0gZnVuY3Rpb24oc3RyKXtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzKi8sICcnKTtcbn07XG5cbmV4cG9ydHMucmlnaHQgPSBmdW5jdGlvbihzdHIpe1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL1xccyokLywgJycpO1xufTtcbiIsIi8qIVxuICogcmVwZWF0LXN0cmluZyA8aHR0cHM6Ly9naXRodWIuY29tL2pvbnNjaGxpbmtlcnQvcmVwZWF0LXN0cmluZz5cbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtMjAxNSwgSm9uIFNjaGxpbmtlcnQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFJlc3VsdHMgY2FjaGVcbiAqL1xuXG52YXIgcmVzID0gJyc7XG52YXIgY2FjaGU7XG5cbi8qKlxuICogRXhwb3NlIGByZXBlYXRgXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSByZXBlYXQ7XG5cbi8qKlxuICogUmVwZWF0IHRoZSBnaXZlbiBgc3RyaW5nYCB0aGUgc3BlY2lmaWVkIGBudW1iZXJgXG4gKiBvZiB0aW1lcy5cbiAqXG4gKiAqKkV4YW1wbGU6KipcbiAqXG4gKiBgYGBqc1xuICogdmFyIHJlcGVhdCA9IHJlcXVpcmUoJ3JlcGVhdC1zdHJpbmcnKTtcbiAqIHJlcGVhdCgnQScsIDUpO1xuICogLy89PiBBQUFBQVxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGBzdHJpbmdgIFRoZSBzdHJpbmcgdG8gcmVwZWF0XG4gKiBAcGFyYW0ge051bWJlcn0gYG51bWJlcmAgVGhlIG51bWJlciBvZiB0aW1lcyB0byByZXBlYXQgdGhlIHN0cmluZ1xuICogQHJldHVybiB7U3RyaW5nfSBSZXBlYXRlZCBzdHJpbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gcmVwZWF0KHN0ciwgbnVtKSB7XG4gIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2V4cGVjdGVkIGEgc3RyaW5nJyk7XG4gIH1cblxuICAvLyBjb3ZlciBjb21tb24sIHF1aWNrIHVzZSBjYXNlc1xuICBpZiAobnVtID09PSAxKSByZXR1cm4gc3RyO1xuICBpZiAobnVtID09PSAyKSByZXR1cm4gc3RyICsgc3RyO1xuXG4gIHZhciBtYXggPSBzdHIubGVuZ3RoICogbnVtO1xuICBpZiAoY2FjaGUgIT09IHN0ciB8fCB0eXBlb2YgY2FjaGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgY2FjaGUgPSBzdHI7XG4gICAgcmVzID0gJyc7XG4gIH0gZWxzZSBpZiAocmVzLmxlbmd0aCA+PSBtYXgpIHtcbiAgICByZXR1cm4gcmVzLnN1YnN0cigwLCBtYXgpO1xuICB9XG5cbiAgd2hpbGUgKG1heCA+IHJlcy5sZW5ndGggJiYgbnVtID4gMSkge1xuICAgIGlmIChudW0gJiAxKSB7XG4gICAgICByZXMgKz0gc3RyO1xuICAgIH1cblxuICAgIG51bSA+Pj0gMTtcbiAgICBzdHIgKz0gc3RyO1xuICB9XG5cbiAgcmVzICs9IHN0cjtcbiAgcmVzID0gcmVzLnN1YnN0cigwLCBtYXgpO1xuICByZXR1cm4gcmVzO1xufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gZGVjaW1hbFxuXG4vLyBDaGVjayBpZiB0aGUgZ2l2ZW4gY2hhcmFjdGVyIGNvZGUsIG9yIHRoZSBjaGFyYWN0ZXIgY29kZSBhdCB0aGUgZmlyc3Rcbi8vIGNoYXJhY3RlciwgaXMgZGVjaW1hbC5cbmZ1bmN0aW9uIGRlY2ltYWwoY2hhcmFjdGVyKSB7XG4gIHZhciBjb2RlID0gdHlwZW9mIGNoYXJhY3RlciA9PT0gJ3N0cmluZycgPyBjaGFyYWN0ZXIuY2hhckNvZGVBdCgwKSA6IGNoYXJhY3RlclxuXG4gIHJldHVybiBjb2RlID49IDQ4ICYmIGNvZGUgPD0gNTcgLyogMC05ICovXG59XG4iLCIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSB2aXNpdFxuXG52YXIgdmlzaXRQYXJlbnRzID0gcmVxdWlyZSgndW5pc3QtdXRpbC12aXNpdC1wYXJlbnRzJylcblxudmFyIENPTlRJTlVFID0gdmlzaXRQYXJlbnRzLkNPTlRJTlVFXG52YXIgU0tJUCA9IHZpc2l0UGFyZW50cy5TS0lQXG52YXIgRVhJVCA9IHZpc2l0UGFyZW50cy5FWElUXG5cbnZpc2l0LkNPTlRJTlVFID0gQ09OVElOVUVcbnZpc2l0LlNLSVAgPSBTS0lQXG52aXNpdC5FWElUID0gRVhJVFxuXG5mdW5jdGlvbiB2aXNpdCh0cmVlLCB0ZXN0LCB2aXNpdG9yLCByZXZlcnNlKSB7XG4gIGlmICh0eXBlb2YgdGVzdCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdmlzaXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldmVyc2UgPSB2aXNpdG9yXG4gICAgdmlzaXRvciA9IHRlc3RcbiAgICB0ZXN0ID0gbnVsbFxuICB9XG5cbiAgdmlzaXRQYXJlbnRzKHRyZWUsIHRlc3QsIG92ZXJsb2FkLCByZXZlcnNlKVxuXG4gIGZ1bmN0aW9uIG92ZXJsb2FkKG5vZGUsIHBhcmVudHMpIHtcbiAgICB2YXIgcGFyZW50ID0gcGFyZW50c1twYXJlbnRzLmxlbmd0aCAtIDFdXG4gICAgdmFyIGluZGV4ID0gcGFyZW50ID8gcGFyZW50LmNoaWxkcmVuLmluZGV4T2Yobm9kZSkgOiBudWxsXG4gICAgcmV0dXJuIHZpc2l0b3Iobm9kZSwgaW5kZXgsIHBhcmVudClcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbnZhciBsZWdhY3kgPSByZXF1aXJlKCdjaGFyYWN0ZXItZW50aXRpZXMtbGVnYWN5JylcbnZhciBpbnZhbGlkID0gcmVxdWlyZSgnY2hhcmFjdGVyLXJlZmVyZW5jZS1pbnZhbGlkJylcbnZhciBkZWNpbWFsID0gcmVxdWlyZSgnaXMtZGVjaW1hbCcpXG52YXIgaGV4YWRlY2ltYWwgPSByZXF1aXJlKCdpcy1oZXhhZGVjaW1hbCcpXG52YXIgYWxwaGFudW1lcmljYWwgPSByZXF1aXJlKCdpcy1hbHBoYW51bWVyaWNhbCcpXG52YXIgZGVjb2RlRW50aXR5ID0gcmVxdWlyZSgnLi9kZWNvZGUtZW50aXR5JylcblxubW9kdWxlLmV4cG9ydHMgPSBwYXJzZUVudGl0aWVzXG5cbnZhciBvd24gPSB7fS5oYXNPd25Qcm9wZXJ0eVxudmFyIGZyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGVcbnZhciBub29wID0gRnVuY3Rpb24ucHJvdG90eXBlXG5cbi8vIERlZmF1bHQgc2V0dGluZ3MuXG52YXIgZGVmYXVsdHMgPSB7XG4gIHdhcm5pbmc6IG51bGwsXG4gIHJlZmVyZW5jZTogbnVsbCxcbiAgdGV4dDogbnVsbCxcbiAgd2FybmluZ0NvbnRleHQ6IG51bGwsXG4gIHJlZmVyZW5jZUNvbnRleHQ6IG51bGwsXG4gIHRleHRDb250ZXh0OiBudWxsLFxuICBwb3NpdGlvbjoge30sXG4gIGFkZGl0aW9uYWw6IG51bGwsXG4gIGF0dHJpYnV0ZTogZmFsc2UsXG4gIG5vblRlcm1pbmF0ZWQ6IHRydWVcbn1cblxuLy8gQ2hhcmFjdGVycy5cbnZhciB0YWIgPSA5IC8vICdcXHQnXG52YXIgbGluZUZlZWQgPSAxMCAvLyAnXFxuJ1xudmFyIGZvcm1GZWVkID0gMTIgLy8gICdcXGYnXG52YXIgc3BhY2UgPSAzMiAvLyAnICdcbnZhciBhbXBlcnNhbmQgPSAzOCAvLyAgJyYnXG52YXIgc2VtaWNvbG9uID0gNTkgLy8gICc7J1xudmFyIGxlc3NUaGFuID0gNjAgLy8gICc8J1xudmFyIGVxdWFsc1RvID0gNjEgLy8gICc9J1xudmFyIG51bWJlclNpZ24gPSAzNSAvLyAgJyMnXG52YXIgdXBwZXJjYXNlWCA9IDg4IC8vICAnWCdcbnZhciBsb3dlcmNhc2VYID0gMTIwIC8vICAneCdcbnZhciByZXBsYWNlbWVudENoYXJhY3RlciA9IDY1NTMzIC8vICfvv70nXG5cbi8vIFJlZmVyZW5jZSB0eXBlcy5cbnZhciBuYW1lID0gJ25hbWVkJ1xudmFyIGhleGEgPSAnaGV4YWRlY2ltYWwnXG52YXIgZGVjaSA9ICdkZWNpbWFsJ1xuXG4vLyBNYXAgb2YgYmFzZXMuXG52YXIgYmFzZXMgPSB7fVxuXG5iYXNlc1toZXhhXSA9IDE2XG5iYXNlc1tkZWNpXSA9IDEwXG5cbi8vIE1hcCBvZiB0eXBlcyB0byB0ZXN0cy5cbi8vIEVhY2ggdHlwZSBvZiBjaGFyYWN0ZXIgcmVmZXJlbmNlIGFjY2VwdHMgZGlmZmVyZW50IGNoYXJhY3RlcnMuXG4vLyBUaGlzIHRlc3QgaXMgdXNlZCB0byBkZXRlY3Qgd2hldGhlciBhIHJlZmVyZW5jZSBoYXMgZW5kZWQgKGFzIHRoZSBzZW1pY29sb25cbi8vIGlzIG5vdCBzdHJpY3RseSBuZWVkZWQpLlxudmFyIHRlc3RzID0ge31cblxudGVzdHNbbmFtZV0gPSBhbHBoYW51bWVyaWNhbFxudGVzdHNbZGVjaV0gPSBkZWNpbWFsXG50ZXN0c1toZXhhXSA9IGhleGFkZWNpbWFsXG5cbi8vIFdhcm5pbmcgdHlwZXMuXG52YXIgbmFtZWROb3RUZXJtaW5hdGVkID0gMVxudmFyIG51bWVyaWNOb3RUZXJtaW5hdGVkID0gMlxudmFyIG5hbWVkRW1wdHkgPSAzXG52YXIgbnVtZXJpY0VtcHR5ID0gNFxudmFyIG5hbWVkVW5rbm93biA9IDVcbnZhciBudW1lcmljRGlzYWxsb3dlZCA9IDZcbnZhciBudW1lcmljUHJvaGliaXRlZCA9IDdcblxuLy8gV2FybmluZyBtZXNzYWdlcy5cbnZhciBtZXNzYWdlcyA9IHt9XG5cbm1lc3NhZ2VzW25hbWVkTm90VGVybWluYXRlZF0gPVxuICAnTmFtZWQgY2hhcmFjdGVyIHJlZmVyZW5jZXMgbXVzdCBiZSB0ZXJtaW5hdGVkIGJ5IGEgc2VtaWNvbG9uJ1xubWVzc2FnZXNbbnVtZXJpY05vdFRlcm1pbmF0ZWRdID1cbiAgJ051bWVyaWMgY2hhcmFjdGVyIHJlZmVyZW5jZXMgbXVzdCBiZSB0ZXJtaW5hdGVkIGJ5IGEgc2VtaWNvbG9uJ1xubWVzc2FnZXNbbmFtZWRFbXB0eV0gPSAnTmFtZWQgY2hhcmFjdGVyIHJlZmVyZW5jZXMgY2Fubm90IGJlIGVtcHR5J1xubWVzc2FnZXNbbnVtZXJpY0VtcHR5XSA9ICdOdW1lcmljIGNoYXJhY3RlciByZWZlcmVuY2VzIGNhbm5vdCBiZSBlbXB0eSdcbm1lc3NhZ2VzW25hbWVkVW5rbm93bl0gPSAnTmFtZWQgY2hhcmFjdGVyIHJlZmVyZW5jZXMgbXVzdCBiZSBrbm93bidcbm1lc3NhZ2VzW251bWVyaWNEaXNhbGxvd2VkXSA9XG4gICdOdW1lcmljIGNoYXJhY3RlciByZWZlcmVuY2VzIGNhbm5vdCBiZSBkaXNhbGxvd2VkJ1xubWVzc2FnZXNbbnVtZXJpY1Byb2hpYml0ZWRdID1cbiAgJ051bWVyaWMgY2hhcmFjdGVyIHJlZmVyZW5jZXMgY2Fubm90IGJlIG91dHNpZGUgdGhlIHBlcm1pc3NpYmxlIFVuaWNvZGUgcmFuZ2UnXG5cbi8vIFdyYXAgdG8gZW5zdXJlIGNsZWFuIHBhcmFtZXRlcnMgYXJlIGdpdmVuIHRvIGBwYXJzZWAuXG5mdW5jdGlvbiBwYXJzZUVudGl0aWVzKHZhbHVlLCBvcHRpb25zKSB7XG4gIHZhciBzZXR0aW5ncyA9IHt9XG4gIHZhciBvcHRpb25cbiAgdmFyIGtleVxuXG4gIGlmICghb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSB7fVxuICB9XG5cbiAgZm9yIChrZXkgaW4gZGVmYXVsdHMpIHtcbiAgICBvcHRpb24gPSBvcHRpb25zW2tleV1cbiAgICBzZXR0aW5nc1trZXldID1cbiAgICAgIG9wdGlvbiA9PT0gbnVsbCB8fCBvcHRpb24gPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRzW2tleV0gOiBvcHRpb25cbiAgfVxuXG4gIGlmIChzZXR0aW5ncy5wb3NpdGlvbi5pbmRlbnQgfHwgc2V0dGluZ3MucG9zaXRpb24uc3RhcnQpIHtcbiAgICBzZXR0aW5ncy5pbmRlbnQgPSBzZXR0aW5ncy5wb3NpdGlvbi5pbmRlbnQgfHwgW11cbiAgICBzZXR0aW5ncy5wb3NpdGlvbiA9IHNldHRpbmdzLnBvc2l0aW9uLnN0YXJ0XG4gIH1cblxuICByZXR1cm4gcGFyc2UodmFsdWUsIHNldHRpbmdzKVxufVxuXG4vLyBQYXJzZSBlbnRpdGllcy5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG5mdW5jdGlvbiBwYXJzZSh2YWx1ZSwgc2V0dGluZ3MpIHtcbiAgdmFyIGFkZGl0aW9uYWwgPSBzZXR0aW5ncy5hZGRpdGlvbmFsXG4gIHZhciBub25UZXJtaW5hdGVkID0gc2V0dGluZ3Mubm9uVGVybWluYXRlZFxuICB2YXIgaGFuZGxlVGV4dCA9IHNldHRpbmdzLnRleHRcbiAgdmFyIGhhbmRsZVJlZmVyZW5jZSA9IHNldHRpbmdzLnJlZmVyZW5jZVxuICB2YXIgaGFuZGxlV2FybmluZyA9IHNldHRpbmdzLndhcm5pbmdcbiAgdmFyIHRleHRDb250ZXh0ID0gc2V0dGluZ3MudGV4dENvbnRleHRcbiAgdmFyIHJlZmVyZW5jZUNvbnRleHQgPSBzZXR0aW5ncy5yZWZlcmVuY2VDb250ZXh0XG4gIHZhciB3YXJuaW5nQ29udGV4dCA9IHNldHRpbmdzLndhcm5pbmdDb250ZXh0XG4gIHZhciBwb3MgPSBzZXR0aW5ncy5wb3NpdGlvblxuICB2YXIgaW5kZW50ID0gc2V0dGluZ3MuaW5kZW50IHx8IFtdXG4gIHZhciBsZW5ndGggPSB2YWx1ZS5sZW5ndGhcbiAgdmFyIGluZGV4ID0gMFxuICB2YXIgbGluZXMgPSAtMVxuICB2YXIgY29sdW1uID0gcG9zLmNvbHVtbiB8fCAxXG4gIHZhciBsaW5lID0gcG9zLmxpbmUgfHwgMVxuICB2YXIgcXVldWUgPSAnJ1xuICB2YXIgcmVzdWx0ID0gW11cbiAgdmFyIGVudGl0eUNoYXJhY3RlcnNcbiAgdmFyIG5hbWVkRW50aXR5XG4gIHZhciB0ZXJtaW5hdGVkXG4gIHZhciBjaGFyYWN0ZXJzXG4gIHZhciBjaGFyYWN0ZXJcbiAgdmFyIHJlZmVyZW5jZVxuICB2YXIgZm9sbG93aW5nXG4gIHZhciB3YXJuaW5nXG4gIHZhciByZWFzb25cbiAgdmFyIG91dHB1dFxuICB2YXIgZW50aXR5XG4gIHZhciBiZWdpblxuICB2YXIgc3RhcnRcbiAgdmFyIHR5cGVcbiAgdmFyIHRlc3RcbiAgdmFyIHByZXZcbiAgdmFyIG5leHRcbiAgdmFyIGRpZmZcbiAgdmFyIGVuZFxuXG4gIGlmICh0eXBlb2YgYWRkaXRpb25hbCA9PT0gJ3N0cmluZycpIHtcbiAgICBhZGRpdGlvbmFsID0gYWRkaXRpb25hbC5jaGFyQ29kZUF0KDApXG4gIH1cblxuICAvLyBDYWNoZSB0aGUgY3VycmVudCBwb2ludC5cbiAgcHJldiA9IG5vdygpXG5cbiAgLy8gV3JhcCBgaGFuZGxlV2FybmluZ2AuXG4gIHdhcm5pbmcgPSBoYW5kbGVXYXJuaW5nID8gcGFyc2VFcnJvciA6IG5vb3BcblxuICAvLyBFbnN1cmUgdGhlIGFsZ29yaXRobSB3YWxrcyBvdmVyIHRoZSBmaXJzdCBjaGFyYWN0ZXIgYW5kIHRoZSBlbmQgKGluY2x1c2l2ZSkuXG4gIGluZGV4LS1cbiAgbGVuZ3RoKytcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIC8vIElmIHRoZSBwcmV2aW91cyBjaGFyYWN0ZXIgd2FzIGEgbmV3bGluZS5cbiAgICBpZiAoY2hhcmFjdGVyID09PSBsaW5lRmVlZCkge1xuICAgICAgY29sdW1uID0gaW5kZW50W2xpbmVzXSB8fCAxXG4gICAgfVxuXG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckNvZGVBdChpbmRleClcblxuICAgIGlmIChjaGFyYWN0ZXIgPT09IGFtcGVyc2FuZCkge1xuICAgICAgZm9sbG93aW5nID0gdmFsdWUuY2hhckNvZGVBdChpbmRleCArIDEpXG5cbiAgICAgIC8vIFRoZSBiZWhhdmlvdXIgZGVwZW5kcyBvbiB0aGUgaWRlbnRpdHkgb2YgdGhlIG5leHQgY2hhcmFjdGVyLlxuICAgICAgaWYgKFxuICAgICAgICBmb2xsb3dpbmcgPT09IHRhYiB8fFxuICAgICAgICBmb2xsb3dpbmcgPT09IGxpbmVGZWVkIHx8XG4gICAgICAgIGZvbGxvd2luZyA9PT0gZm9ybUZlZWQgfHxcbiAgICAgICAgZm9sbG93aW5nID09PSBzcGFjZSB8fFxuICAgICAgICBmb2xsb3dpbmcgPT09IGFtcGVyc2FuZCB8fFxuICAgICAgICBmb2xsb3dpbmcgPT09IGxlc3NUaGFuIHx8XG4gICAgICAgIGZvbGxvd2luZyAhPT0gZm9sbG93aW5nIHx8XG4gICAgICAgIChhZGRpdGlvbmFsICYmIGZvbGxvd2luZyA9PT0gYWRkaXRpb25hbClcbiAgICAgICkge1xuICAgICAgICAvLyBOb3QgYSBjaGFyYWN0ZXIgcmVmZXJlbmNlLlxuICAgICAgICAvLyBObyBjaGFyYWN0ZXJzIGFyZSBjb25zdW1lZCwgYW5kIG5vdGhpbmcgaXMgcmV0dXJuZWQuXG4gICAgICAgIC8vIFRoaXMgaXMgbm90IGFuIGVycm9yLCBlaXRoZXIuXG4gICAgICAgIHF1ZXVlICs9IGZyb21DaGFyQ29kZShjaGFyYWN0ZXIpXG4gICAgICAgIGNvbHVtbisrXG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgc3RhcnQgPSBpbmRleCArIDFcbiAgICAgIGJlZ2luID0gc3RhcnRcbiAgICAgIGVuZCA9IHN0YXJ0XG5cbiAgICAgIGlmIChmb2xsb3dpbmcgPT09IG51bWJlclNpZ24pIHtcbiAgICAgICAgLy8gTnVtZXJpY2FsIGVudGl0eS5cbiAgICAgICAgZW5kID0gKytiZWdpblxuXG4gICAgICAgIC8vIFRoZSBiZWhhdmlvdXIgZnVydGhlciBkZXBlbmRzIG9uIHRoZSBuZXh0IGNoYXJhY3Rlci5cbiAgICAgICAgZm9sbG93aW5nID0gdmFsdWUuY2hhckNvZGVBdChlbmQpXG5cbiAgICAgICAgaWYgKGZvbGxvd2luZyA9PT0gdXBwZXJjYXNlWCB8fCBmb2xsb3dpbmcgPT09IGxvd2VyY2FzZVgpIHtcbiAgICAgICAgICAvLyBBU0NJSSBoZXggZGlnaXRzLlxuICAgICAgICAgIHR5cGUgPSBoZXhhXG4gICAgICAgICAgZW5kID0gKytiZWdpblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIEFTQ0lJIGRpZ2l0cy5cbiAgICAgICAgICB0eXBlID0gZGVjaVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBOYW1lZCBlbnRpdHkuXG4gICAgICAgIHR5cGUgPSBuYW1lXG4gICAgICB9XG5cbiAgICAgIGVudGl0eUNoYXJhY3RlcnMgPSAnJ1xuICAgICAgZW50aXR5ID0gJydcbiAgICAgIGNoYXJhY3RlcnMgPSAnJ1xuICAgICAgdGVzdCA9IHRlc3RzW3R5cGVdXG4gICAgICBlbmQtLVxuXG4gICAgICB3aGlsZSAoKytlbmQgPCBsZW5ndGgpIHtcbiAgICAgICAgZm9sbG93aW5nID0gdmFsdWUuY2hhckNvZGVBdChlbmQpXG5cbiAgICAgICAgaWYgKCF0ZXN0KGZvbGxvd2luZykpIHtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG5cbiAgICAgICAgY2hhcmFjdGVycyArPSBmcm9tQ2hhckNvZGUoZm9sbG93aW5nKVxuXG4gICAgICAgIC8vIENoZWNrIGlmIHdlIGNhbiBtYXRjaCBhIGxlZ2FjeSBuYW1lZCByZWZlcmVuY2UuXG4gICAgICAgIC8vIElmIHNvLCB3ZSBjYWNoZSB0aGF0IGFzIHRoZSBsYXN0IHZpYWJsZSBuYW1lZCByZWZlcmVuY2UuXG4gICAgICAgIC8vIFRoaXMgZW5zdXJlcyB3ZSBkbyBub3QgbmVlZCB0byB3YWxrIGJhY2t3YXJkcyBsYXRlci5cbiAgICAgICAgaWYgKHR5cGUgPT09IG5hbWUgJiYgb3duLmNhbGwobGVnYWN5LCBjaGFyYWN0ZXJzKSkge1xuICAgICAgICAgIGVudGl0eUNoYXJhY3RlcnMgPSBjaGFyYWN0ZXJzXG4gICAgICAgICAgZW50aXR5ID0gbGVnYWN5W2NoYXJhY3RlcnNdXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGVybWluYXRlZCA9IHZhbHVlLmNoYXJDb2RlQXQoZW5kKSA9PT0gc2VtaWNvbG9uXG5cbiAgICAgIGlmICh0ZXJtaW5hdGVkKSB7XG4gICAgICAgIGVuZCsrXG5cbiAgICAgICAgbmFtZWRFbnRpdHkgPSB0eXBlID09PSBuYW1lID8gZGVjb2RlRW50aXR5KGNoYXJhY3RlcnMpIDogZmFsc2VcblxuICAgICAgICBpZiAobmFtZWRFbnRpdHkpIHtcbiAgICAgICAgICBlbnRpdHlDaGFyYWN0ZXJzID0gY2hhcmFjdGVyc1xuICAgICAgICAgIGVudGl0eSA9IG5hbWVkRW50aXR5XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZGlmZiA9IDEgKyBlbmQgLSBzdGFydFxuXG4gICAgICBpZiAoIXRlcm1pbmF0ZWQgJiYgIW5vblRlcm1pbmF0ZWQpIHtcbiAgICAgICAgLy8gRW1wdHkuXG4gICAgICB9IGVsc2UgaWYgKCFjaGFyYWN0ZXJzKSB7XG4gICAgICAgIC8vIEFuIGVtcHR5IChwb3NzaWJsZSkgZW50aXR5IGlzIHZhbGlkLCB1bmxlc3MgaXTigJlzIG51bWVyaWMgKHRodXMgYW5cbiAgICAgICAgLy8gYW1wZXJzYW5kIGZvbGxvd2VkIGJ5IGFuIG9jdG90aG9ycCkuXG4gICAgICAgIGlmICh0eXBlICE9PSBuYW1lKSB7XG4gICAgICAgICAgd2FybmluZyhudW1lcmljRW1wdHksIGRpZmYpXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gbmFtZSkge1xuICAgICAgICAvLyBBbiBhbXBlcnNhbmQgZm9sbG93ZWQgYnkgYW55dGhpbmcgdW5rbm93biwgYW5kIG5vdCB0ZXJtaW5hdGVkLCBpc1xuICAgICAgICAvLyBpbnZhbGlkLlxuICAgICAgICBpZiAodGVybWluYXRlZCAmJiAhZW50aXR5KSB7XG4gICAgICAgICAgd2FybmluZyhuYW1lZFVua25vd24sIDEpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gSWYgdGhlcmVzIHNvbWV0aGluZyBhZnRlciBhbiBlbnRpdHkgbmFtZSB3aGljaCBpcyBub3Qga25vd24sIGNhcFxuICAgICAgICAgIC8vIHRoZSByZWZlcmVuY2UuXG4gICAgICAgICAgaWYgKGVudGl0eUNoYXJhY3RlcnMgIT09IGNoYXJhY3RlcnMpIHtcbiAgICAgICAgICAgIGVuZCA9IGJlZ2luICsgZW50aXR5Q2hhcmFjdGVycy5sZW5ndGhcbiAgICAgICAgICAgIGRpZmYgPSAxICsgZW5kIC0gYmVnaW5cbiAgICAgICAgICAgIHRlcm1pbmF0ZWQgPSBmYWxzZVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIElmIHRoZSByZWZlcmVuY2UgaXMgbm90IHRlcm1pbmF0ZWQsIHdhcm4uXG4gICAgICAgICAgaWYgKCF0ZXJtaW5hdGVkKSB7XG4gICAgICAgICAgICByZWFzb24gPSBlbnRpdHlDaGFyYWN0ZXJzID8gbmFtZWROb3RUZXJtaW5hdGVkIDogbmFtZWRFbXB0eVxuXG4gICAgICAgICAgICBpZiAoc2V0dGluZ3MuYXR0cmlidXRlKSB7XG4gICAgICAgICAgICAgIGZvbGxvd2luZyA9IHZhbHVlLmNoYXJDb2RlQXQoZW5kKVxuXG4gICAgICAgICAgICAgIGlmIChmb2xsb3dpbmcgPT09IGVxdWFsc1RvKSB7XG4gICAgICAgICAgICAgICAgd2FybmluZyhyZWFzb24sIGRpZmYpXG4gICAgICAgICAgICAgICAgZW50aXR5ID0gbnVsbFxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFscGhhbnVtZXJpY2FsKGZvbGxvd2luZykpIHtcbiAgICAgICAgICAgICAgICBlbnRpdHkgPSBudWxsXG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgd2FybmluZyhyZWFzb24sIGRpZmYpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHdhcm5pbmcocmVhc29uLCBkaWZmKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJlZmVyZW5jZSA9IGVudGl0eVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCF0ZXJtaW5hdGVkKSB7XG4gICAgICAgICAgLy8gQWxsIG5vbi10ZXJtaW5hdGVkIG51bWVyaWMgZW50aXRpZXMgYXJlIG5vdCByZW5kZXJlZCwgYW5kIHRyaWdnZXIgYVxuICAgICAgICAgIC8vIHdhcm5pbmcuXG4gICAgICAgICAgd2FybmluZyhudW1lcmljTm90VGVybWluYXRlZCwgZGlmZilcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFdoZW4gdGVybWluYXRlZCBhbmQgbnVtYmVyLCBwYXJzZSBhcyBlaXRoZXIgaGV4YWRlY2ltYWwgb3IgZGVjaW1hbC5cbiAgICAgICAgcmVmZXJlbmNlID0gcGFyc2VJbnQoY2hhcmFjdGVycywgYmFzZXNbdHlwZV0pXG5cbiAgICAgICAgLy8gVHJpZ2dlciBhIHdhcm5pbmcgd2hlbiB0aGUgcGFyc2VkIG51bWJlciBpcyBwcm9oaWJpdGVkLCBhbmQgcmVwbGFjZVxuICAgICAgICAvLyB3aXRoIHJlcGxhY2VtZW50IGNoYXJhY3Rlci5cbiAgICAgICAgaWYgKHByb2hpYml0ZWQocmVmZXJlbmNlKSkge1xuICAgICAgICAgIHdhcm5pbmcobnVtZXJpY1Byb2hpYml0ZWQsIGRpZmYpXG4gICAgICAgICAgcmVmZXJlbmNlID0gZnJvbUNoYXJDb2RlKHJlcGxhY2VtZW50Q2hhcmFjdGVyKVxuICAgICAgICB9IGVsc2UgaWYgKHJlZmVyZW5jZSBpbiBpbnZhbGlkKSB7XG4gICAgICAgICAgLy8gVHJpZ2dlciBhIHdhcm5pbmcgd2hlbiB0aGUgcGFyc2VkIG51bWJlciBpcyBkaXNhbGxvd2VkLCBhbmQgcmVwbGFjZVxuICAgICAgICAgIC8vIGJ5IGFuIGFsdGVybmF0aXZlLlxuICAgICAgICAgIHdhcm5pbmcobnVtZXJpY0Rpc2FsbG93ZWQsIGRpZmYpXG4gICAgICAgICAgcmVmZXJlbmNlID0gaW52YWxpZFtyZWZlcmVuY2VdXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gUGFyc2UgdGhlIG51bWJlci5cbiAgICAgICAgICBvdXRwdXQgPSAnJ1xuXG4gICAgICAgICAgLy8gVHJpZ2dlciBhIHdhcm5pbmcgd2hlbiB0aGUgcGFyc2VkIG51bWJlciBzaG91bGQgbm90IGJlIHVzZWQuXG4gICAgICAgICAgaWYgKGRpc2FsbG93ZWQocmVmZXJlbmNlKSkge1xuICAgICAgICAgICAgd2FybmluZyhudW1lcmljRGlzYWxsb3dlZCwgZGlmZilcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBTdHJpbmdpZnkgdGhlIG51bWJlci5cbiAgICAgICAgICBpZiAocmVmZXJlbmNlID4gMHhmZmZmKSB7XG4gICAgICAgICAgICByZWZlcmVuY2UgLT0gMHgxMDAwMFxuICAgICAgICAgICAgb3V0cHV0ICs9IGZyb21DaGFyQ29kZSgocmVmZXJlbmNlID4+PiAoMTAgJiAweDNmZikpIHwgMHhkODAwKVxuICAgICAgICAgICAgcmVmZXJlbmNlID0gMHhkYzAwIHwgKHJlZmVyZW5jZSAmIDB4M2ZmKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHJlZmVyZW5jZSA9IG91dHB1dCArIGZyb21DaGFyQ29kZShyZWZlcmVuY2UpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gRm91bmQgaXQhXG4gICAgICAvLyBGaXJzdCBlYXQgdGhlIHF1ZXVlZCBjaGFyYWN0ZXJzIGFzIG5vcm1hbCB0ZXh0LCB0aGVuIGVhdCBhbiBlbnRpdHkuXG4gICAgICBpZiAocmVmZXJlbmNlKSB7XG4gICAgICAgIGZsdXNoKClcblxuICAgICAgICBwcmV2ID0gbm93KClcbiAgICAgICAgaW5kZXggPSBlbmQgLSAxXG4gICAgICAgIGNvbHVtbiArPSBlbmQgLSBzdGFydCArIDFcbiAgICAgICAgcmVzdWx0LnB1c2gocmVmZXJlbmNlKVxuICAgICAgICBuZXh0ID0gbm93KClcbiAgICAgICAgbmV4dC5vZmZzZXQrK1xuXG4gICAgICAgIGlmIChoYW5kbGVSZWZlcmVuY2UpIHtcbiAgICAgICAgICBoYW5kbGVSZWZlcmVuY2UuY2FsbChcbiAgICAgICAgICAgIHJlZmVyZW5jZUNvbnRleHQsXG4gICAgICAgICAgICByZWZlcmVuY2UsXG4gICAgICAgICAgICB7c3RhcnQ6IHByZXYsIGVuZDogbmV4dH0sXG4gICAgICAgICAgICB2YWx1ZS5zbGljZShzdGFydCAtIDEsIGVuZClcbiAgICAgICAgICApXG4gICAgICAgIH1cblxuICAgICAgICBwcmV2ID0gbmV4dFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gSWYgd2UgY291bGQgbm90IGZpbmQgYSByZWZlcmVuY2UsIHF1ZXVlIHRoZSBjaGVja2VkIGNoYXJhY3RlcnMgKGFzXG4gICAgICAgIC8vIG5vcm1hbCBjaGFyYWN0ZXJzKSwgYW5kIG1vdmUgdGhlIHBvaW50ZXIgdG8gdGhlaXIgZW5kLlxuICAgICAgICAvLyBUaGlzIGlzIHBvc3NpYmxlIGJlY2F1c2Ugd2UgY2FuIGJlIGNlcnRhaW4gbmVpdGhlciBuZXdsaW5lcyBub3JcbiAgICAgICAgLy8gYW1wZXJzYW5kcyBhcmUgaW5jbHVkZWQuXG4gICAgICAgIGNoYXJhY3RlcnMgPSB2YWx1ZS5zbGljZShzdGFydCAtIDEsIGVuZClcbiAgICAgICAgcXVldWUgKz0gY2hhcmFjdGVyc1xuICAgICAgICBjb2x1bW4gKz0gY2hhcmFjdGVycy5sZW5ndGhcbiAgICAgICAgaW5kZXggPSBlbmQgLSAxXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEhhbmRsZSBhbnl0aGluZyBvdGhlciB0aGFuIGFuIGFtcGVyc2FuZCwgaW5jbHVkaW5nIG5ld2xpbmVzIGFuZCBFT0YuXG4gICAgICBpZiAoXG4gICAgICAgIGNoYXJhY3RlciA9PT0gMTAgLy8gTGluZSBmZWVkXG4gICAgICApIHtcbiAgICAgICAgbGluZSsrXG4gICAgICAgIGxpbmVzKytcbiAgICAgICAgY29sdW1uID0gMFxuICAgICAgfVxuXG4gICAgICBpZiAoY2hhcmFjdGVyID09PSBjaGFyYWN0ZXIpIHtcbiAgICAgICAgcXVldWUgKz0gZnJvbUNoYXJDb2RlKGNoYXJhY3RlcilcbiAgICAgICAgY29sdW1uKytcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZsdXNoKClcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBSZXR1cm4gdGhlIHJlZHVjZWQgbm9kZXMsIGFuZCBhbnkgcG9zc2libGUgd2FybmluZ3MuXG4gIHJldHVybiByZXN1bHQuam9pbignJylcblxuICAvLyBHZXQgY3VycmVudCBwb3NpdGlvbi5cbiAgZnVuY3Rpb24gbm93KCkge1xuICAgIHJldHVybiB7XG4gICAgICBsaW5lOiBsaW5lLFxuICAgICAgY29sdW1uOiBjb2x1bW4sXG4gICAgICBvZmZzZXQ6IGluZGV4ICsgKHBvcy5vZmZzZXQgfHwgMClcbiAgICB9XG4gIH1cblxuICAvLyDigJxUaHJvd+KAnSBhIHBhcnNlLWVycm9yOiBhIHdhcm5pbmcuXG4gIGZ1bmN0aW9uIHBhcnNlRXJyb3IoY29kZSwgb2Zmc2V0KSB7XG4gICAgdmFyIHBvc2l0aW9uID0gbm93KClcblxuICAgIHBvc2l0aW9uLmNvbHVtbiArPSBvZmZzZXRcbiAgICBwb3NpdGlvbi5vZmZzZXQgKz0gb2Zmc2V0XG5cbiAgICBoYW5kbGVXYXJuaW5nLmNhbGwod2FybmluZ0NvbnRleHQsIG1lc3NhZ2VzW2NvZGVdLCBwb3NpdGlvbiwgY29kZSlcbiAgfVxuXG4gIC8vIEZsdXNoIGBxdWV1ZWAgKG5vcm1hbCB0ZXh0KS5cbiAgLy8gTWFjcm8gaW52b2tlZCBiZWZvcmUgZWFjaCBlbnRpdHkgYW5kIGF0IHRoZSBlbmQgb2YgYHZhbHVlYC5cbiAgLy8gRG9lcyBub3RoaW5nIHdoZW4gYHF1ZXVlYCBpcyBlbXB0eS5cbiAgZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgaWYgKHF1ZXVlKSB7XG4gICAgICByZXN1bHQucHVzaChxdWV1ZSlcblxuICAgICAgaWYgKGhhbmRsZVRleHQpIHtcbiAgICAgICAgaGFuZGxlVGV4dC5jYWxsKHRleHRDb250ZXh0LCBxdWV1ZSwge3N0YXJ0OiBwcmV2LCBlbmQ6IG5vdygpfSlcbiAgICAgIH1cblxuICAgICAgcXVldWUgPSAnJ1xuICAgIH1cbiAgfVxufVxuXG4vLyBDaGVjayBpZiBgY2hhcmFjdGVyYCBpcyBvdXRzaWRlIHRoZSBwZXJtaXNzaWJsZSB1bmljb2RlIHJhbmdlLlxuZnVuY3Rpb24gcHJvaGliaXRlZChjb2RlKSB7XG4gIHJldHVybiAoY29kZSA+PSAweGQ4MDAgJiYgY29kZSA8PSAweGRmZmYpIHx8IGNvZGUgPiAweDEwZmZmZlxufVxuXG4vLyBDaGVjayBpZiBgY2hhcmFjdGVyYCBpcyBkaXNhbGxvd2VkLlxuZnVuY3Rpb24gZGlzYWxsb3dlZChjb2RlKSB7XG4gIHJldHVybiAoXG4gICAgKGNvZGUgPj0gMHgwMDAxICYmIGNvZGUgPD0gMHgwMDA4KSB8fFxuICAgIGNvZGUgPT09IDB4MDAwYiB8fFxuICAgIChjb2RlID49IDB4MDAwZCAmJiBjb2RlIDw9IDB4MDAxZikgfHxcbiAgICAoY29kZSA+PSAweDAwN2YgJiYgY29kZSA8PSAweDAwOWYpIHx8XG4gICAgKGNvZGUgPj0gMHhmZGQwICYmIGNvZGUgPD0gMHhmZGVmKSB8fFxuICAgIChjb2RlICYgMHhmZmZmKSA9PT0gMHhmZmZmIHx8XG4gICAgKGNvZGUgJiAweGZmZmYpID09PSAweGZmZmVcbiAgKVxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gdHJpbVRyYWlsaW5nTGluZXNcblxudmFyIGxpbmUgPSAnXFxuJ1xuXG4vLyBSZW1vdmUgZmluYWwgbmV3bGluZSBjaGFyYWN0ZXJzIGZyb20gYHZhbHVlYC5cbmZ1bmN0aW9uIHRyaW1UcmFpbGluZ0xpbmVzKHZhbHVlKSB7XG4gIHZhciB2YWwgPSBTdHJpbmcodmFsdWUpXG4gIHZhciBpbmRleCA9IHZhbC5sZW5ndGhcblxuICB3aGlsZSAodmFsLmNoYXJBdCgtLWluZGV4KSA9PT0gbGluZSkge1xuICAgIC8vIEVtcHR5XG4gIH1cblxuICByZXR1cm4gdmFsLnNsaWNlKDAsIGluZGV4ICsgMSlcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBpbnRlcnJ1cHQ7XG5cbmZ1bmN0aW9uIGludGVycnVwdChpbnRlcnJ1cHRvcnMsIHRva2VuaXplcnMsIGN0eCwgcGFyYW1zKSB7XG4gIHZhciBib29scyA9IFsncGVkYW50aWMnLCAnY29tbW9ubWFyayddO1xuICB2YXIgY291bnQgPSBib29scy5sZW5ndGg7XG4gIHZhciBsZW5ndGggPSBpbnRlcnJ1cHRvcnMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAtMTtcbiAgdmFyIGludGVycnVwdG9yO1xuICB2YXIgY29uZmlnO1xuICB2YXIgZm47XG4gIHZhciBvZmZzZXQ7XG4gIHZhciBib29sO1xuICB2YXIgaWdub3JlO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgaW50ZXJydXB0b3IgPSBpbnRlcnJ1cHRvcnNbaW5kZXhdO1xuICAgIGNvbmZpZyA9IGludGVycnVwdG9yWzFdIHx8IHt9O1xuICAgIGZuID0gaW50ZXJydXB0b3JbMF07XG4gICAgb2Zmc2V0ID0gLTE7XG4gICAgaWdub3JlID0gZmFsc2U7XG5cbiAgICB3aGlsZSAoKytvZmZzZXQgPCBjb3VudCkge1xuICAgICAgYm9vbCA9IGJvb2xzW29mZnNldF07XG5cbiAgICAgIGlmIChjb25maWdbYm9vbF0gIT09IHVuZGVmaW5lZCAmJiBjb25maWdbYm9vbF0gIT09IGN0eC5vcHRpb25zW2Jvb2xdKSB7XG4gICAgICAgIGlnbm9yZSA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpZ25vcmUpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmICh0b2tlbml6ZXJzW2ZuXS5hcHBseShjdHgsIHBhcmFtcykpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNvbGxhcHNlV2hpdGVTcGFjZSA9IHJlcXVpcmUoJ2NvbGxhcHNlLXdoaXRlLXNwYWNlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gbm9ybWFsaXplO1xuXG4vKiBOb3JtYWxpemUgYW4gaWRlbnRpZmllci4gIENvbGxhcHNlcyBtdWx0aXBsZSB3aGl0ZSBzcGFjZVxuICogY2hhcmFjdGVycyBpbnRvIGEgc2luZ2xlIHNwYWNlLCBhbmQgcmVtb3ZlcyBjYXNpbmcuICovXG5mdW5jdGlvbiBub3JtYWxpemUodmFsdWUpIHtcbiAgcmV0dXJuIGNvbGxhcHNlV2hpdGVTcGFjZSh2YWx1ZSkudG9Mb3dlckNhc2UoKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=