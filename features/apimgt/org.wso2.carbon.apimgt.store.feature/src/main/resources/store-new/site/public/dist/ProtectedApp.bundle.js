(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{1206:function(e,t,a){"use strict";var n=a(0),r=a.n(n),o=a(2),i=a.n(o),s=a(5),l=a(646),c=a(209),u=a(287),p=a(1209),d=a(867),m=a(866),f=a(648),h=a(11),g=a(115),y=a(110),b=a(356),v=a(348),E=a(642),w=a(645);function k(e){var t=e.classes,a=e.consumerKey,n=e.consumerSecret,o=e.intl,i=e.onChange,s=e.isUserOwner;function l(e){i&&i(e)}return r.a.createElement("div",null,r.a.createElement(E.a,{container:!0,spacing:3,direction:"column"},r.a.createElement(E.a,{item:!0,xs:6},r.a.createElement(w.a,{id:"provided-consumer-key",name:"providedConsumerKey",className:t.textField,label:o.formatMessage({defaultMessage:"Consumer Key",id:"Shared.AppsAndKeys.ProvideOAuthKeys.consumer.key"}),value:a,onChange:function(e){return l(e)},margin:"normal",fullWidth:!0,disabled:!s}),r.a.createElement(v.a,null,r.a.createElement(b.a,{id:"consumer-key-helper-text"},r.a.createElement(h.a,{id:"Shared.AppsAndKeys.ProvideOAuthKeys.consumer.key.title",defaultMessage:"Consumer Key of the OAuth application"})))),r.a.createElement(E.a,{item:!0,xs:6},r.a.createElement(w.a,{id:"provided-consumer-secret",name:"providedConsumerSecret",label:o.formatMessage({defaultMessage:"Consumer Secret",id:"Shared.AppsAndKeys.ProvideOAuthKeys.consumer.secret"}),className:t.textField,value:n,onChange:function(e){return l(e)},margin:"normal",fullWidth:!0,disabled:!s}),r.a.createElement(v.a,null,r.a.createElement(b.a,{id:"consumer-secret-helper-text"},r.a.createElement(h.a,{id:"Shared.AppsAndKeys.ProvideOAuthKeys.consumer.secret.of.application",defaultMessage:"Consumer Secret of the OAuth application"}))))))}k.propTypes={classes:i.a.shape({}).isRequired,intl:i.a.shape({}).isRequired,onChange:i.a.func.isRequired,consumerKey:i.a.string,consumerSecret:i.a.string,isUserOwner:i.a.string},k.defaultProps={consumerKey:"",consumerSecret:"",isUserOwner:!1};var O=Object(h.e)(Object(s.a)(function(e){return{textField:{marginTop:0}}})(k)),S=a(691),j=a(12),A=a(114),T=a(215),x=a(785),C=a(1210),P=a(878),R=a(688);function I(e){return(I="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _(e){return function(e){if(Array.isArray(e)){for(var t=0,a=new Array(e.length);t<e.length;t++)a[t]=e[t];return a}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function M(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),a.push.apply(a,n)}return a}function N(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?M(a,!0).forEach(function(t){W(e,t,a[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):M(a).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))})}return e}function L(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function q(e){return(q=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function D(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function B(e,t){return(B=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function W(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var U=function(e){function t(e){var a,n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=this,r=q(t).call(this,e),a=!r||"object"!==I(r)&&"function"!=typeof r?D(n):r,W(D(a),"loadApplication",function(){a.getserverSupportedGrantTypes(),a.checkOwner(),a.appId&&a.application.then(function(e){return e.getKeys()}).then(function(e){var t=a.props.keyType,n=a.state.keyRequest;if(e.size>0&&e.get(t)){var r=e.get(t),o=N({},n,{callbackUrl:r.callbackUrl,supportedGrantTypes:r.supportedGrantTypes});a.setState({keys:e,keyRequest:o})}else a.setState({keys:e})}).catch(function(e){404===e.status&&a.setState({notFound:!0})})}),W(D(a),"getserverSupportedGrantTypes",function(){(new T.a).getSettings().then(function(e){var t=a.state.keyRequest;(t=N({},t)).serverSupportedGrantTypes=e.obj.grantTypes,t.supportedGrantTypes=e.obj.grantTypes.filter(function(e){return"authorization_code"!==e&&"implicit"!==e}),a.setState({keyRequest:t})}).catch(function(e){404===e.status&&a.setState({notFound:!0})})});var o=a.props,i=o.selectedApp,s=o.keyType;return a.state={keys:null,isKeyJWT:!1,keyRequest:{keyType:s,serverSupportedGrantTypes:[],supportedGrantTypes:[],callbackUrl:""},providedConsumerKey:"",providedConsumerSecret:"",isUserOwner:!1},a.keyStates={COMPLETED:"COMPLETED",APPROVED:"APPROVED",CREATED:"CREATED",REJECTED:"REJECTED"},i&&(a.appId=i.appId||i.value,a.application=S.a.get(a.appId)),a.updateKeyRequest=a.updateKeyRequest.bind(D(a)),a.generateKeys=a.generateKeys.bind(D(a)),a.updateKeys=a.updateKeys.bind(D(a)),a.cleanUpKeys=a.cleanUpKeys.bind(D(a)),a.handleOnChangeProvidedOAuth=a.handleOnChangeProvidedOAuth.bind(D(a)),a.provideOAuthKeySecret=a.provideOAuthKeySecret.bind(D(a)),a}var a,o,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&B(e,t)}(t,r.a.Component),a=t,(o=[{key:"componentDidMount",value:function(){this.loadApplication()}},{key:"checkOwner",value:function(){var e=this.props.selectedApp,t=j.a.getUser().name;this.setState({isUserOwner:t.includes(e.owner)})}},{key:"updateKeyRequest",value:function(e){this.setState({keyRequest:e})}},{key:"generateKeys",value:function(){var e=this,t=this.state,a=t.keyRequest,n=t.keys,r=this.props,o=r.keyType,i=r.updateSubscriptionData,s=r.selectedApp.tokenType,l=r.intl;this.application.then(function(e){return e.generateKeys(o,a.supportedGrantTypes,a.callbackUrl)}).then(function(t){i&&i();var a=new Map(_(n)),r="JWT"===s;a.set(o,t),e.setState({keys:a,isKeyJWT:r}),y.a.info(l.formatMessage({id:"Shared.AppsAndKeys.TokenManager.key.generate.success",defaultMessage:"Application keys generated successfully"}))}).catch(function(t){404===t.status&&e.setState({notFound:!0}),y.a.error(l.formatMessage({id:"Shared.AppsAndKeys.TokenManager.key.generate.error",defaultMessage:"Error occurred when generating application keys"}))})}},{key:"updateKeys",value:function(){var e=this,t=this.state,a=t.keys,n=t.keyRequest,r=this.props,o=r.keyType,i=r.intl,s=a.get(o);this.application.then(function(e){return e.updateKeys(s.tokenType,o,n.supportedGrantTypes,n.callbackUrl,s.consumerKey,s.consumerSecret)}).then(function(){y.a.info(i.formatMessage({id:"Shared.AppsAndKeys.TokenManager.key.update.success",defaultMessage:"Application keys updated successfully"}))}).catch(function(t){404===t.status&&e.setState({notFound:!0}),y.a.error(i.formatMessage({id:"Shared.AppsAndKeys.TokenManager.key.update.error",defaultMessage:"Error occurred when updating application keys"}))})}},{key:"cleanUpKeys",value:function(){var e=this,t=this.props,a=t.keyType,n=t.intl;this.application.then(function(e){return e.cleanUpKeys(a)}).then(function(){e.loadApplication(),y.a.info(n.formatMessage({id:"Shared.AppsAndKeys.TokenManager.key.cleanup.success",defaultMessage:"Application keys cleaned successfully"}))}).catch(function(t){404===t.status&&e.setState({notFound:!0}),y.a.error(n.formatMessage({id:"Shared.AppsAndKeys.TokenManager.key.cleanup.error",defaultMessage:"Error occurred while cleaning up application keys"}))})}},{key:"handleOnChangeProvidedOAuth",value:function(e){this.setState(W({},e.target.name,e.target.value))}},{key:"provideOAuthKeySecret",value:function(){var e=this,t=this.state,a=t.providedConsumerKey,n=t.providedConsumerSecret,r=this.props,o=r.keyType,i=r.intl;this.application.then(function(e){return e.provideKeys(o,a,n)}).then(function(){e.setState({providedConsumerKey:"",providedConsumerSecret:""}),y.a.info(i.formatMessage({id:"Shared.AppsAndKeys.TokenManager.key.provide.success",defaultMessage:"Application keys provided successfully"}))}).catch(function(t){404===t.status&&e.setState({notFound:!0}),y.a.error(i.formatMessage({id:"Shared.AppsAndKeys.TokenManager.key.provide.error",defaultMessage:"Error occurred when providing application keys"}))})}},{key:"render",value:function(){var e=this.props,t=e.classes,a=e.selectedApp,o=e.keyType,i=this.state,s=i.keys,y=i.keyRequest,b=i.notFound,v=i.isKeyJWT,E=i.providedConsumerKey,w=i.providedConsumerSecret,k=i.isUserOwner;if(!s)return r.a.createElement(g.a,null);var S=s.get(o);if(s.size>0&&S&&"APPROVED"===S.keyState&&!S.consumerKey)return r.a.createElement(n.Fragment,null,r.a.createElement(c.a,{className:t.cleanUpInfoText,variant:"subtitle1"},r.a.createElement(h.a,{id:"Shared.AppsAndKeys.TokenManager.cleanup.text",defaultMessage:"Error! You have partially-created keys. Please click the Clean Up button and try again."})),r.a.createElement(l.a,{variant:"contained",color:"primary",className:t.cleanUpButton,onClick:this.cleanUpKeys},r.a.createElement(h.a,{defaultMessage:"Clean up",id:"Shared.AppsAndKeys.TokenManager.cleanup"})));if(S&&(S.keyState===this.keyStates.CREATED||S.keyState===this.keyStates.REJECTED))return r.a.createElement(P.a,{keyState:S.keyState,states:this.keyStates});var j=this.context.settings.mapExistingAuthApps;return r.a.createElement("div",{className:t.root},r.a.createElement(c.a,{variant:"h5",className:t.keyTitle},o+" ",r.a.createElement(h.a,{defaultMessage:"Key and Secret",id:"Shared.AppsAndKeys.TokenManager.key.and.secret"})),r.a.createElement(C.a,{selectedApp:a,keyType:o,keys:s,isKeyJWT:v}),r.a.createElement(u.a,{className:t.paper},r.a.createElement(p.a,{defaultExpanded:!0},r.a.createElement(d.a,{expandIcon:r.a.createElement(f.a,null,"expand_more")},r.a.createElement(c.a,{className:t.heading,variant:"subtitle1"},s.size>0&&s.get(o)?r.a.createElement(h.a,{defaultMessage:"Update Configuration",id:"Shared.AppsAndKeys.TokenManager.update.configuration"}):r.a.createElement(h.a,{defaultMessage:"Key Configuration",id:"Shared.AppsAndKeys.TokenManager.key.configuration"}))),r.a.createElement(m.a,{className:t.keyConfigWrapper},r.a.createElement(x.a,{keys:s,selectedApp:a,keyType:o,updateKeyRequest:this.updateKeyRequest,keyRequest:y,isUserOwner:k}))),r.a.createElement("div",{className:t.generateWrapper},r.a.createElement(R.a,{resourcePath:R.c.APPLICATION_GENERATE_KEYS,resourceMethod:R.b.POST},k?r.a.createElement(l.a,{variant:"contained",color:"primary",className:t.button,onClick:s.size>0&&s.get(o)?this.updateKeys:this.generateKeys,noFound:b},s.size>0&&s.get(o)?"Update":"Generate Keys"):r.a.createElement(n.Fragment,null,r.a.createElement(l.a,{variant:"contained",color:"primary",className:t.button,onClick:s.size>0&&s.get(o)?this.updateKeys:this.generateKeys,noFound:b,disabled:!k},s.size>0&&s.get(o)?"Update keys":"Generate Keys"),r.a.createElement(c.a,{variant:"caption"},r.a.createElement(h.a,{defaultMessage:"Only owner can generate or update keys",id:"Shared.AppsAndKeys.TokenManager.key.and.user.owner"})))))),j&&!s.get(o)&&r.a.createElement(u.a,{className:t.paper},r.a.createElement(p.a,{defaultExpanded:!0},r.a.createElement(d.a,{expandIcon:r.a.createElement(f.a,null,"expand_more")},r.a.createElement(c.a,{className:t.heading,variant:"subtitle1"},r.a.createElement(h.a,{defaultMessage:"Provide Existing OAuth Keys",id:"Shared.AppsAndKeys.TokenManager.provide.oauth"}))),r.a.createElement(m.a,{className:t.keyConfigWrapper},r.a.createElement(O,{onChange:this.handleOnChangeProvidedOAuth,consumerKey:E,consumerSecret:w,isUserOwner:k}))),r.a.createElement("div",{className:t.generateWrapper},r.a.createElement(R.a,{resourcePath:R.c.APPLICATION_GENERATE_KEYS,resourceMethod:R.b.POST},k?r.a.createElement(l.a,{variant:"contained",color:"primary",className:t.button,onClick:this.provideOAuthKeySecret,noFound:b},s.size>0&&s.get(o)?r.a.createElement(h.a,{defaultMessage:"Update",id:"Shared.AppsAndKeys.TokenManager. provide.oauth.button.update"}):r.a.createElement(h.a,{defaultMessage:"Provide",id:"Shared.AppsAndKeys. TokenManager.provide.oauth.button.provide"})):r.a.createElement(n.Fragment,null,r.a.createElement(l.a,{variant:"contained",color:"primary",className:t.button,onClick:this.provideOAuthKeySecret,noFound:b,disabled:!k},s.size>0&&s.get(o)?r.a.createElement(h.a,{defaultMessage:"Update",id:"Shared.AppsAndKeys.TokenManager.provide. oauth.button.update"}):r.a.createElement(h.a,{defaultMessage:"Provide",id:"Shared.AppsAndKeys.TokenManager. provide.oauth.button.provide"})),r.a.createElement(c.a,{variant:"caption"},r.a.createElement(h.a,{defaultMessage:"Only owner can provide keys",id:"Shared.AppsAndKeys.TokenManager.key.provide.user.owner"})))))))}}])&&L(a.prototype,o),i&&L(a,i),t}();W(U,"contextType",A.c),U.propTypes={classes:i.a.instanceOf(Object).isRequired,selectedApp:i.a.shape({tokenType:i.a.string.isRequired,appId:i.a.string,value:i.a.string,owner:i.a.string}).isRequired,keyType:i.a.string.isRequired,updateSubscriptionData:i.a.func.isRequired,intl:i.a.shape({formatMessage:i.a.func}).isRequired};t.a=Object(h.e)(Object(s.a)(function(e){return{root:{padding:3*e.spacing.unit},button:{marginLeft:0},cleanUpButton:{marginLeft:15},cleanUpInfoText:{padding:"10px 0px 10px 15px"},tokenSection:{marginTop:2*e.spacing.unit,marginBottom:2*e.spacing.unit},margin:{marginRight:2*e.spacing.unit},keyTitle:{textTransform:"uppercase"},keyConfigWrapper:{flexDirection:"column",marginBottom:0},generateWrapper:{padding:"10px 0px",marginLeft:1.25*e.spacing.unit},paper:{background:"none",marginBottom:2*e.spacing.unit}}})(U))},1210:function(e,t,a){"use strict";var n=a(0),r=a.n(n),o=a(2),i=a.n(o),s=a(5),l=a(357),c=a(646),u=a(153),p=a(354),d=a(649),m=a(356),f=a(348),h=a(648),g=a(642),y=a(751),b=a.n(y),v=a(850),E=a(860),w=a(861),k=a(862),O=a(863),S=a(864),j=a(209),A=a(11),T=a(668),x=a(115),C=a(691),P=a(876),R=a(786),I=a(877),_=a.n(I);function M(e){return(M="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function N(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function L(e){return(L=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function q(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function D(e,t){return(D=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function B(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var W=function(e){function t(){var e,a,n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=new Array(o),s=0;s<o;s++)i[s]=arguments[s];return n=this,r=(e=L(t)).call.apply(e,[this].concat(i)),a=!r||"object"!==M(r)&&"function"!=typeof r?q(n):r,B(q(a),"state",{showReal:!1}),B(q(a),"onCopy",function(e){return function(t){a.setState(B({},e,!0));var n=q(a),r=e;setTimeout(function(){n.setState(B({},r,!1))},4e3)}}),B(q(a),"applyReal",function(){a.setState({showReal:!a.state.showReal})}),a}var a,n,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&D(e,t)}(t,r.a.Component),a=t,(n=[{key:"render",value:function(){var e=this.props,t=e.classes,a=e.consumerKey,n=e.consumerSecret,o=e.intl,i=this.state.showReal,s=window.btoa(a+":"+n);return r.a.createElement(r.a.Fragment,null,r.a.createElement(j.a,null,r.a.createElement(A.a,{id:"Shared.AppsAndKeys.ViewCurl.help",defaultMessage:"The following cURL command shows how to generate an access token using the Password Grant type."})),r.a.createElement("div",{className:t.contentWrapper},r.a.createElement("div",{className:t.code},r.a.createElement("div",null,r.a.createElement("span",{className:t.command},"curl -k -d "),'"grant_type=password&username=Username&password=Password" \\'),r.a.createElement("div",null,r.a.createElement("span",{className:t.command},"-H"),'"Authorization: Basic',r.a.createElement("a",{onClick:this.applyReal,className:t.encodeVisible},i?" "+s:" Base64(consumer-key:consumer-secret)"),'" \\'),r.a.createElement("div",null,r.a.createElement("span",{className:t.command},"https://localhost:8248/token"))),r.a.createElement("div",null,r.a.createElement(v.a,{title:this.state.tokenCopied?o.formatMessage({defaultMessage:"Copied",id:"Shared.AppsAndKeys.ViewCurl.copied"}):o.formatMessage({defaultMessage:"Copy to clipboard",id:"Shared.AppsAndKeys.ViewCurl.copy.to.clipboard"}),placement:"right"},r.a.createElement(b.a,{text:'curl -k -d "grant_type=password&username=Username&password=Password" "Authorization: Basic '+s+'" https://10.100.1.24:8248/token',onCopy:this.onCopy("tokenCopied")},r.a.createElement(_.a,{color:"secondary"}))))),r.a.createElement(j.a,null,r.a.createElement(A.a,{id:"Shared.AppsAndKeys.ViewCurl.help.in.a.similar",defaultMessage:"In a similar manner, you can generate an access token using the Client Credentials grant type with the following cURL command."})),r.a.createElement("div",{className:t.contentWrapper},r.a.createElement("div",{className:t.code},r.a.createElement("div",null,r.a.createElement("span",{className:t.command},"curl -k -d "),'"grant_type=client_credentials" \\'),r.a.createElement("div",null,r.a.createElement("span",{className:t.command},"-H"),'"Authorization: Basic',r.a.createElement("a",{onClick:this.applyReal,className:t.encodeVisible},i?" "+s:" Base64(consumer-key:consumer-secret)"),'" \\'),r.a.createElement("div",null,r.a.createElement("span",{className:t.command},"https://10.100.1.24:8248/token"))),r.a.createElement("div",null,r.a.createElement(v.a,{title:this.state.tokenCopied?"Copied":"Copy to clipboard",placement:"right"},r.a.createElement(b.a,{text:'curl -k -d "grant_type=client_credentials" "Authorization: Basic '+s+'" https://10.100.1.24:8248/token',onCopy:this.onCopy("tokenCopied")},r.a.createElement(_.a,{color:"secondary"}))))))}}])&&N(a.prototype,n),o&&N(a,o),t}();W.propTypes={classes:i.a.object.isRequired};var U=Object(A.e)(Object(s.a)(function(e){return{code:{padding:e.spacing.unit,marginBottom:2*e.spacing.unit,background:e.palette.grey[200],color:"#da2316",flex:1},command:{color:"#2b62b0"},encodeVisible:{cursor:"pointer"},contentWrapper:{display:"flex"}}})(W));function K(e){return(K="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function F(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),a.push.apply(a,n)}return a}function z(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?F(a,!0).forEach(function(t){J(e,t,a[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):F(a).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))})}return e}function V(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function G(e){return(G=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function H(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Y(e,t){return(Y=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function J(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var Q=function(e){function t(e){var a,n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=this,r=G(t).call(this,e),a=!r||"object"!==K(r)&&"function"!=typeof r?H(n):r,J(H(a),"updateAccessTokenRequest",function(e){a.setState({accessTokenRequest:e})}),J(H(a),"onCopy",function(e){a.setState(J({},e,!0));var t=H(a),n=e;setTimeout(function(){t.setState(J({},n,!1))},4e3)}),J(H(a),"handleShowHidden",function(e){a.setState(J({},e,!a.state[e]))}),J(H(a),"handleMouseDownGeneric",function(e){e.preventDefault()}),J(H(a),"handleClickOpen",function(){a.setState({open:!0,showToken:!1})}),J(H(a),"handleClickOpenCurl",function(){a.setState({open:!0,showCurl:!0})}),J(H(a),"handleClose",function(){a.setState({open:!1,showCurl:!1,isKeyJWT:!1})}),J(H(a),"generateAccessToken",function(){var e=a.state.accessTokenRequest;a.applicationPromise.then(function(t){return t.generateToken(e.keyType,e.timeout,e.scopesSelected)}).then(function(e){console.log("token generated successfully "+e),a.setState({showToken:!0,tokenResponse:e,token:e.accessToken,tokenScopes:e.tokenScopes,tokenValidityTime:e.validityTime})}).catch(function(e){404===e.status&&a.setState({notFound:!0})})});var o,i=a.props.selectedApp;return i&&(o=i.appId||i.value),a.applicationPromise=C.a.get(o),a.state={showCS:!1,open:!1,showToken:!1,showCurl:!1,accessTokenRequest:{timeout:3600,scopesSelected:[],keyType:""},subscriptionScopes:[]},a}var a,n,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Y(e,t)}(t,r.a.Component),a=t,(n=[{key:"componentDidMount",value:function(){var e=this,t=this.state.accessTokenRequest,a=this.props.keyType;this.applicationPromise.then(function(n){n.getKeys().then(function(){var r=z({},t,{keyType:a}),o=n.subscriptionScopes.map(function(e){return e.scopeKey});e.setState({accessTokenRequest:r,subscriptionScopes:o})})}).catch(function(t){404===t.status&&e.setState({notFound:!0})})}},{key:"componentDidUpdate",value:function(e){this.props.isKeyJWT&&!e.isKeyJWT&&this.setState({isKeyJWT:!0})}},{key:"render",value:function(){var e=this,t=this.state,a=t.notFound,n=t.showCS,o=t.showToken,i=t.showCurl,s=t.secretCopied,y=t.tokenCopied,C=t.keyCopied,I=t.open,_=t.token,M=t.tokenScopes,N=t.tokenValidityTime,L=t.accessTokenRequest,q=t.subscriptionScopes,D=t.isKeyJWT,B=t.tokenResponse,W=this.props,K=W.intl,F=W.keyType,V=W.classes,G=W.fullScreen,H=W.keys,Y=W.selectedApp.tokenType;if(a)return r.a.createElement(T.a,null);if(!H)return r.a.createElement(x.a,null);var J,Q,$,X,Z=H.get(F),ee=Z&&Z.consumerKey,te=Z&&Z.consumerSecret;return _?(J=_,Q=M,$=N):H.get(F)&&H.get(F).token&&(J=H.get(F).token.accessToken,Q=H.get(F).token.tokenScopes,$=H.get(F).token.validityTime,X=H.get(F).token),ee?r.a.createElement(r.a.Fragment,null,r.a.createElement("div",{className:V.inputWrapper},r.a.createElement(g.a,{container:!0,spacing:3,className:V.gridWrapper},r.a.createElement(g.a,{item:!0,xs:6},r.a.createElement(p.a,{htmlFor:"adornment-amount"},r.a.createElement(A.a,{id:"Shared.AppsAndKeys.ViewKeys.consumer.key",defaultMessage:"Consumer Key"})),r.a.createElement("div",{className:V.copyWrapper},r.a.createElement(u.a,{inputProps:{readOnly:!0},id:"consumer-key",value:ee,margin:"normal",fullWidth:!0}),r.a.createElement(v.a,{title:C?K.formatMessage({defaultMessage:"Copied",id:"Shared.AppsAndKeys.ViewKeys.copied"}):K.formatMessage({defaultMessage:"Copy to clipboard",id:"Shared.AppsAndKeys.ViewKeys.copied"}),placement:"right"},r.a.createElement(b.a,{text:ee,onCopy:function(){return e.onCopy("keyCopied")}},r.a.createElement(h.a,{color:"secondary"},"file_copy")))),r.a.createElement(f.a,null,r.a.createElement(m.a,{id:"consumer-key-helper-text"},r.a.createElement(A.a,{id:"Shared.AppsAndKeys.ViewKeys.consumer.key.title",defaultMessage:"Consumer Key of the application"})))),r.a.createElement(g.a,{item:!0,xs:6},r.a.createElement(p.a,{htmlFor:"adornment-amount"},"Consumer Secret"),r.a.createElement("div",{className:V.copyWrapper},r.a.createElement(u.a,{inputProps:{readOnly:!0},id:"consumer-secret",label:"Consumer Secret",type:n||!te?"text":"password",value:te,fullWidth:!0,endAdornment:r.a.createElement(d.a,{position:"end"},r.a.createElement(l.a,{classes:"",onClick:function(){return e.handleShowHidden("showCS")},onMouseDown:this.handleMouseDownGeneric},n?r.a.createElement(h.a,null,"visibility_off"):r.a.createElement(h.a,null,"visibility")))}),r.a.createElement(v.a,{title:s?"Copied":"Copy to clipboard",placement:"right"},r.a.createElement(b.a,{text:te,onCopy:function(){return e.onCopy("secretCopied")}},r.a.createElement(h.a,{color:"secondary"},"file_copy")))),r.a.createElement(f.a,null,r.a.createElement(m.a,{id:"consumer-secret-helper-text"},r.a.createElement(A.a,{id:"Shared.AppsAndKeys.ViewKeys.consumer.secret.of.application",defaultMessage:"Consumer Secret of the application"})))),J&&"JWT"!==Y&&r.a.createElement(g.a,{item:!0,xs:6},r.a.createElement(p.a,{htmlFor:"adornment-amount"},r.a.createElement(A.a,{id:"Shared.AppsAndKeys.ViewKeys.access.token",defaultMessage:"Access Token"})),r.a.createElement("div",{className:V.copyWrapper},r.a.createElement(u.a,{inputProps:{readOnly:!0},id:"access-token",value:J,margin:"normal",fullWidth:!0}),r.a.createElement(v.a,{title:y?"Copied":"Copy to clipboard",placement:"right"},r.a.createElement(b.a,{text:J,onCopy:function(){return e.onCopy("tokenCopied")}},r.a.createElement(h.a,{color:"secondary"},"file_copy")))),r.a.createElement(f.a,null,r.a.createElement(m.a,{id:"access-token-helper-text"},"Above token has a validity period of ".concat($," seconds.\n                                            And the token has (").concat(Q.join(", "),") scopes.")))),r.a.createElement(g.a,{item:!0,xs:12},r.a.createElement(E.a,{fullScreen:G,open:I||D,onClose:this.handleClose,"aria-labelledby":"responsive-dialog-title"},r.a.createElement(S.a,{id:"responsive-dialog-title"},i?"Get CURL to Generate Access Token":"Generate Access Token"),r.a.createElement(k.a,null,!i&&!D&&r.a.createElement(O.a,null,!o&&r.a.createElement(P.a,{updateAccessTokenRequest:this.updateAccessTokenRequest,accessTokenRequest:L,subscriptionScopes:q}),o&&r.a.createElement(R.a,{token:z({},B,{isOauth:!0})})),i&&r.a.createElement(O.a,null,r.a.createElement(U,{keys:{consumerKey:ee,consumerSecret:te}})),D&&X&&r.a.createElement(O.a,null,r.a.createElement(R.a,{token:z({},X,{isOauth:!0})}))),r.a.createElement(w.a,null,!o&&!i&&!D&&r.a.createElement(c.a,{onClick:this.generateAccessToken,color:"primary"},r.a.createElement(A.a,{id:"Shared.AppsAndKeys.ViewKeys.consumer.generate.btn",defaultMessage:"Generate"})),r.a.createElement(c.a,{onClick:this.handleClose,color:"primary",autoFocus:!0},r.a.createElement(A.a,{id:"Shared.AppsAndKeys.ViewKeys.consumer.close.btn",defaultMessage:"Close"})))),r.a.createElement("div",{className:V.tokenSection},r.a.createElement(c.a,{variant:"outlined",size:"small",color:"primary",className:V.margin,onClick:this.handleClickOpen},r.a.createElement(A.a,{id:"Shared.AppsAndKeys.ViewKeys.generate.access.token",defaultMessage:"Generate Access Token"})),r.a.createElement(c.a,{variant:"outlined",size:"small",color:"primary",className:V.margin,onClick:this.handleClickOpenCurl},r.a.createElement(A.a,{id:"Shared.AppsAndKeys.ViewKeys.curl.to.generate",defaultMessage:"CURL to Generate Access Token"}))))))):r.a.createElement(r.a.Fragment,null,r.a.createElement(j.a,{variant:"caption",gutterBottom:!0,className:V.noKeyMessageBox},F+" ",r.a.createElement(A.a,{id:"Shared.AppsAndKeys.ViewKeys.key.secret.title",defaultMessage:"Key and Secret is not generated for this application"})))}}])&&V(a.prototype,n),o&&V(a,o),t}();Q.propTypes={classes:i.a.shape({}).isRequired,fullScreen:i.a.bool.isRequired,isKeyJWT:i.a.bool.isRequired};t.a=Object(A.e)(Object(s.a)(function(e){return{button:{margin:e.spacing.unit,color:e.palette.getContrastText(e.palette.background.default),display:"flex",alignItems:"center",fontSize:"11px",cursor:"pointer","& span":{paddingLeft:6,display:"inline-block"}},inputWrapper:{display:"flex",flexDirection:"row"},copyWrapper:{display:"flex",flexDirection:"row"},gridWrapper:{paddingTop:2*e.spacing.unit},tokenSection:{marginTop:2*e.spacing.unit,marginBottom:2*e.spacing.unit},margin:{marginRight:2*e.spacing.unit},noKeyMessageBox:{padding:2*e.spacing.unit}}})(Q))},1273:function(e,t){},1302:function(e,t,a){var n={"./":1303,"./af":893,"./af.js":893,"./agq":894,"./agq.js":894,"./ak":895,"./ak.js":895,"./am":896,"./am.js":896,"./ar":897,"./ar.js":897,"./ars":898,"./ars.js":898,"./as":899,"./as.js":899,"./asa":900,"./asa.js":900,"./ast":901,"./ast.js":901,"./az":902,"./az.js":902,"./bas":903,"./bas.js":903,"./be":904,"./be.js":904,"./bem":905,"./bem.js":905,"./bez":906,"./bez.js":906,"./bg":907,"./bg.js":907,"./bh":908,"./bh.js":908,"./bm":909,"./bm.js":909,"./bn":910,"./bn.js":910,"./bo":911,"./bo.js":911,"./br":912,"./br.js":912,"./brx":913,"./brx.js":913,"./bs":914,"./bs.js":914,"./ca":915,"./ca.js":915,"./ccp":916,"./ccp.js":916,"./ce":917,"./ce.js":917,"./cgg":918,"./cgg.js":918,"./chr":919,"./chr.js":919,"./ckb":920,"./ckb.js":920,"./cs":921,"./cs.js":921,"./cu":922,"./cu.js":922,"./cy":923,"./cy.js":923,"./da":924,"./da.js":924,"./dav":925,"./dav.js":925,"./de":926,"./de.js":926,"./dje":927,"./dje.js":927,"./dsb":928,"./dsb.js":928,"./dua":929,"./dua.js":929,"./dv":930,"./dv.js":930,"./dyo":931,"./dyo.js":931,"./dz":932,"./dz.js":932,"./ebu":933,"./ebu.js":933,"./ee":934,"./ee.js":934,"./el":935,"./el.js":935,"./en":936,"./en.js":936,"./eo":937,"./eo.js":937,"./es":938,"./es.js":938,"./et":939,"./et.js":939,"./eu":940,"./eu.js":940,"./ewo":941,"./ewo.js":941,"./fa":942,"./fa.js":942,"./ff":943,"./ff.js":943,"./fi":944,"./fi.js":944,"./fil":945,"./fil.js":945,"./fo":946,"./fo.js":946,"./fr":947,"./fr.js":947,"./fur":948,"./fur.js":948,"./fy":949,"./fy.js":949,"./ga":950,"./ga.js":950,"./gd":951,"./gd.js":951,"./gl":952,"./gl.js":952,"./gsw":953,"./gsw.js":953,"./gu":954,"./gu.js":954,"./guw":955,"./guw.js":955,"./guz":956,"./guz.js":956,"./gv":957,"./gv.js":957,"./ha":958,"./ha.js":958,"./haw":959,"./haw.js":959,"./he":960,"./he.js":960,"./hi":961,"./hi.js":961,"./hr":962,"./hr.js":962,"./hsb":963,"./hsb.js":963,"./hu":964,"./hu.js":964,"./hy":965,"./hy.js":965,"./ia":966,"./ia.js":966,"./id":967,"./id.js":967,"./ig":968,"./ig.js":968,"./ii":969,"./ii.js":969,"./in":970,"./in.js":970,"./index":1304,"./index.js":1305,"./io":971,"./io.js":971,"./is":972,"./is.js":972,"./it":973,"./it.js":973,"./iu":974,"./iu.js":974,"./iw":975,"./iw.js":975,"./ja":976,"./ja.js":976,"./jbo":977,"./jbo.js":977,"./jgo":978,"./jgo.js":978,"./ji":979,"./ji.js":979,"./jmc":980,"./jmc.js":980,"./jv":981,"./jv.js":981,"./jw":982,"./jw.js":982,"./ka":983,"./ka.js":983,"./kab":984,"./kab.js":984,"./kaj":985,"./kaj.js":985,"./kam":986,"./kam.js":986,"./kcg":987,"./kcg.js":987,"./kde":988,"./kde.js":988,"./kea":989,"./kea.js":989,"./khq":990,"./khq.js":990,"./ki":991,"./ki.js":991,"./kk":992,"./kk.js":992,"./kkj":993,"./kkj.js":993,"./kl":994,"./kl.js":994,"./kln":995,"./kln.js":995,"./km":996,"./km.js":996,"./kn":997,"./kn.js":997,"./ko":998,"./ko.js":998,"./kok":999,"./kok.js":999,"./ks":1e3,"./ks.js":1e3,"./ksb":1001,"./ksb.js":1001,"./ksf":1002,"./ksf.js":1002,"./ksh":1003,"./ksh.js":1003,"./ku":1004,"./ku.js":1004,"./kw":1005,"./kw.js":1005,"./ky":1006,"./ky.js":1006,"./lag":1007,"./lag.js":1007,"./lb":1008,"./lb.js":1008,"./lg":1009,"./lg.js":1009,"./lkt":1010,"./lkt.js":1010,"./ln":1011,"./ln.js":1011,"./lo":1012,"./lo.js":1012,"./lrc":1013,"./lrc.js":1013,"./lt":1014,"./lt.js":1014,"./lu":1015,"./lu.js":1015,"./luo":1016,"./luo.js":1016,"./luy":1017,"./luy.js":1017,"./lv":1018,"./lv.js":1018,"./mas":1019,"./mas.js":1019,"./mer":1020,"./mer.js":1020,"./mfe":1021,"./mfe.js":1021,"./mg":1022,"./mg.js":1022,"./mgh":1023,"./mgh.js":1023,"./mgo":1024,"./mgo.js":1024,"./mi":1025,"./mi.js":1025,"./mk":1026,"./mk.js":1026,"./ml":1027,"./ml.js":1027,"./mn":1028,"./mn.js":1028,"./mo":1029,"./mo.js":1029,"./mr":1030,"./mr.js":1030,"./ms":1031,"./ms.js":1031,"./mt":1032,"./mt.js":1032,"./mua":1033,"./mua.js":1033,"./my":1034,"./my.js":1034,"./mzn":1035,"./mzn.js":1035,"./nah":1036,"./nah.js":1036,"./naq":1037,"./naq.js":1037,"./nb":1038,"./nb.js":1038,"./nd":1039,"./nd.js":1039,"./nds":1040,"./nds.js":1040,"./ne":1041,"./ne.js":1041,"./nl":1042,"./nl.js":1042,"./nmg":1043,"./nmg.js":1043,"./nn":1044,"./nn.js":1044,"./nnh":1045,"./nnh.js":1045,"./no":1046,"./no.js":1046,"./nqo":1047,"./nqo.js":1047,"./nr":1048,"./nr.js":1048,"./nso":1049,"./nso.js":1049,"./nus":1050,"./nus.js":1050,"./ny":1051,"./ny.js":1051,"./nyn":1052,"./nyn.js":1052,"./om":1053,"./om.js":1053,"./or":1054,"./or.js":1054,"./os":1055,"./os.js":1055,"./pa":1056,"./pa.js":1056,"./pap":1057,"./pap.js":1057,"./pl":1058,"./pl.js":1058,"./prg":1059,"./prg.js":1059,"./ps":1060,"./ps.js":1060,"./pt":1061,"./pt.js":1061,"./qu":1062,"./qu.js":1062,"./rm":1063,"./rm.js":1063,"./rn":1064,"./rn.js":1064,"./ro":1065,"./ro.js":1065,"./rof":1066,"./rof.js":1066,"./ru":1067,"./ru.js":1067,"./rw":1068,"./rw.js":1068,"./rwk":1069,"./rwk.js":1069,"./sah":1070,"./sah.js":1070,"./saq":1071,"./saq.js":1071,"./sbp":1072,"./sbp.js":1072,"./sc":1073,"./sc.js":1073,"./scn":1074,"./scn.js":1074,"./sd":1075,"./sd.js":1075,"./sdh":1076,"./sdh.js":1076,"./se":1077,"./se.js":1077,"./seh":1078,"./seh.js":1078,"./ses":1079,"./ses.js":1079,"./sg":1080,"./sg.js":1080,"./sh":1081,"./sh.js":1081,"./shi":1082,"./shi.js":1082,"./si":1083,"./si.js":1083,"./sk":1084,"./sk.js":1084,"./sl":1085,"./sl.js":1085,"./sma":1086,"./sma.js":1086,"./smi":1087,"./smi.js":1087,"./smj":1088,"./smj.js":1088,"./smn":1089,"./smn.js":1089,"./sms":1090,"./sms.js":1090,"./sn":1091,"./sn.js":1091,"./so":1092,"./so.js":1092,"./sq":1093,"./sq.js":1093,"./sr":1094,"./sr.js":1094,"./ss":1095,"./ss.js":1095,"./ssy":1096,"./ssy.js":1096,"./st":1097,"./st.js":1097,"./sv":1098,"./sv.js":1098,"./sw":1099,"./sw.js":1099,"./syr":1100,"./syr.js":1100,"./ta":1101,"./ta.js":1101,"./te":1102,"./te.js":1102,"./teo":1103,"./teo.js":1103,"./tg":1104,"./tg.js":1104,"./th":1105,"./th.js":1105,"./ti":1106,"./ti.js":1106,"./tig":1107,"./tig.js":1107,"./tk":1108,"./tk.js":1108,"./tl":1109,"./tl.js":1109,"./tn":1110,"./tn.js":1110,"./to":1111,"./to.js":1111,"./tr":1112,"./tr.js":1112,"./ts":1113,"./ts.js":1113,"./tt":1114,"./tt.js":1114,"./twq":1115,"./twq.js":1115,"./tzm":1116,"./tzm.js":1116,"./ug":1117,"./ug.js":1117,"./uk":1118,"./uk.js":1118,"./ur":1119,"./ur.js":1119,"./uz":1120,"./uz.js":1120,"./vai":1121,"./vai.js":1121,"./ve":1122,"./ve.js":1122,"./vi":1123,"./vi.js":1123,"./vo":1124,"./vo.js":1124,"./vun":1125,"./vun.js":1125,"./wa":1126,"./wa.js":1126,"./wae":1127,"./wae.js":1127,"./wo":1128,"./wo.js":1128,"./xh":1129,"./xh.js":1129,"./xog":1130,"./xog.js":1130,"./yav":1131,"./yav.js":1131,"./yi":1132,"./yi.js":1132,"./yo":1133,"./yo.js":1133,"./yue":1134,"./yue.js":1134,"./zgh":1135,"./zgh.js":1135,"./zh":1136,"./zh.js":1136,"./zu":1137,"./zu.js":1137};function r(e){var t=o(e);return a(t)}function o(e){var t=n[e];if(!(t+1)){var a=new Error("Cannot find module '"+e+"'");throw a.code="MODULE_NOT_FOUND",a}return t}r.keys=function(){return Object.keys(n)},r.resolve=o,e.exports=r,r.id=1302},1303:function(e,t){},1304:function(e,t){},1305:function(e,t){},1656:function(e,t,a){"use strict";a.r(t);var n=a(0),r=a.n(n),o=a(47),i=a.n(o),s=a(11),l=a(15),c=a.n(l),u=a(78),p=a(6);var d=function e(){var t,a,n,r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),n=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"active";return r.client.then(function(t){return t.apis.tenants.get_tenants({state:e})})},(a="getTenantsByState")in(t=this)?Object.defineProperty(t,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[a]=n,this.client=(new u.a).getAPIClient(p.a.getEnvironment().label).client},m=a(114),f=a(103),h=a.n(f),g=a(2),y=a.n(g),b=a(45),v=a(834),E=a(835),w=a(357),k=a(646),O=a(1204),S=a(352),j=a(829),A=a(833),T=a(832),x=a(831),C=a(648),P=a(5),R=a(9),I=a(209),_=a(840),M=a(288),N=a(287),L=a(346),q=a(738),D=a(44),B=a(1214),W=a.n(B),U=a(345),K=a(1226),F=a.n(K),z=a(1228),V=a.n(z),G=a(645),H=a(649),Y=a(1229),J=a.n(Y),Q=a(1230),$=a.n(Q),X=a(1231),Z=a.n(X),ee=a(229),te=a(215);function ae(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),a.push.apply(a,n)}return a}function ne(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?ae(a,!0).forEach(function(t){re(e,t,a[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):ae(a).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))})}return e}function re(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function oe(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}function ie(e){var t=e.classes,a=e.ref,n=(e.isLoading,e.onDropDownChange),o=oe(e,["classes","ref","isLoading","onDropDownChange"]);return r.a.createElement(r.a.Fragment,null,r.a.createElement(ee.a,{onChange:n,className:t.selectRoot},r.a.createElement(s.a,{id:"Base.Header.headersearch.SearchUtils.lcState.all",defaultMessage:"All"},function(e){return r.a.createElement("option",{value:""},e)}),r.a.createElement(s.a,{id:"Base.Header.headersearch.SearchUtils.lcState.published",defaultMessage:"Production"},function(e){return r.a.createElement("option",{value:"PUBLISHED"},e)}),r.a.createElement(s.a,{id:"Base.Header.headersearch.SearchUtils.lcState.prototyped",defaultMessage:"Prototyped"},function(e){return r.a.createElement("option",{value:"PROTOTYPED"},e)})),r.a.createElement(G.a,{id:"searchQuery",InputProps:ne({inputRef:a,className:t.input,classes:{focused:t.inputFocused},startAdornment:r.a.createElement(H.a,{position:"start"},r.a.createElement(J.a,null))},o)}))}function se(e,t){var a=t.query,n=t.isHighlighted,o=F()(e.name,a),i=V()(e.name,o),s="API"===e.type?"/apis/".concat(e.id,"/overview"):"/apis/".concat(e.apiUUID,"/documents/").concat(e.id,"/details"),l="API"===e.type?e.version:e.apiName+" "+e.apiVersion;return r.a.createElement(r.a.Fragment,null,r.a.createElement(b.a,{to:s,style:{color:"black"}},r.a.createElement(j.a,{selected:n},r.a.createElement(x.a,null,"API"===e.type?r.a.createElement($.a,null):r.a.createElement(Z.a,null)),r.a.createElement(T.a,{primary:i.map(function(e,t){return e.highlight?r.a.createElement("span",{key:String(t),style:{fontWeight:500}},e.text):r.a.createElement("strong",{key:String(t),style:{fontWeight:300}},e.text)}),secondary:l}))),r.a.createElement(A.a,null))}function le(e){return e.name}function ce(e,t){return e=e&&!e.includes(":")?"content:"+e:e,t?(e+" status:"+t).trim().toLowerCase():e.trim().toLowerCase()}function ue(e){return(ue="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function pe(){return(pe=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}function de(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function me(e){return(me=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function fe(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function he(e,t){return(he=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var ge=function(e){function t(e){var a,n,r,o,i,s;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=this,a=!(r=me(t).call(this,e))||"object"!==ue(r)&&"function"!=typeof r?fe(n):r,o=fe(a),s=!1,(i="suggestionSelected")in o?Object.defineProperty(o,i,{value:s,enumerable:!0,configurable:!0,writable:!0}):o[i]=s,a.state={searchText:"",lcState:"",suggestions:[],isLoading:!1},a.handleSuggestionsFetchRequested=a.handleSuggestionsFetchRequested.bind(fe(a)),a.handleSuggestionsClearRequested=a.handleSuggestionsClearRequested.bind(fe(a)),a.handleChange=a.handleChange.bind(fe(a)),a.handleDropDownChange=a.handleDropDownChange.bind(fe(a)),a.onKeyDown=a.onKeyDown.bind(fe(a)),a.clearOnBlur=a.clearOnBlur.bind(fe(a)),a.renderSuggestionsContainer=a.renderSuggestionsContainer.bind(fe(a)),a.onSuggestionSelected=a.onSuggestionSelected.bind(fe(a)),a}var a,n,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&he(e,t)}(t,r.a.Component),a=t,(n=[{key:"onSuggestionSelected",value:function(e,t){var a=t.suggestion;this.suggestionSelected=!0;var n=this.props.history;if("Enter"===e.key){var r="API"===a.type?"/apis/".concat(a.id,"/overview"):"/apis/".concat(a.apiUUID,"/documents/").concat(a.id,"/details");n.push(r)}}},{key:"onKeyDown",value:function(e){if("Enter"===e.key&&!this.suggestionSelected){var t=this.props.history,a=this.state.lcState;t.push("/apis/search?query="+ce(e.target.value,a))}this.suggestionSelected=!1}},{key:"handleSuggestionsFetchRequested",value:function(e){var t=this,a=e.value,n=this.state.lcState;this.setState({isLoading:!0}),function(e,t){var a=ce(e,t);return/:(\s+|(?![\s\S]))/g.test(e)?new Promise(function(e){return e({obj:{list:[]}})}):(new te.a).search({query:a,limit:8})}(a,n).then(function(e){t.setState({isLoading:!1,suggestions:e.obj.list})})}},{key:"handleSuggestionsClearRequested",value:function(){this.setState({suggestions:[]})}},{key:"handleChange",value:function(e,t){var a=t.newValue;this.setState({searchText:a})}},{key:"handleDropDownChange",value:function(e){var t=this.state,a=t.searchText;t.lcState;this.setState({lcState:e.target.value});var n=this.props.history;e.target.value?n.push("/apis/search?query="+ce(a,e.target.value)):n.push("/apis/")}},{key:"clearOnBlur",value:function(){var e=this.props,t=e.smSearch,a=e.toggleSmSearch;t?a():this.setState({lcState:"",searchText:""})}},{key:"renderSuggestionsContainer",value:function(e){var t=e.containerProps,a=e.children,n=this.state.isLoading,o=this.props.classes;return n?r.a.createElement(U.a,{size:24,className:o.buttonProgress}):r.a.createElement(N.a,pe({},t,{square:!0}),a)}},{key:"render",value:function(){var e=this.props,t=e.intl,a=e.classes,n=e.smSearch,o=this.state,i=o.searchText,s=o.lcState,l=o.isLoading,c=o.suggestions,u=!1,p=a.container;return n&&(u=!0,p=a.smContainer),r.a.createElement(W.a,{theme:{container:p,suggestionsContainerOpen:a.suggestionsContainerOpen,suggestionsList:a.suggestionsList,suggestion:a.suggestion},suggestions:c,renderInputComponent:ie,onSuggestionsFetchRequested:this.handleSuggestionsFetchRequested,onSuggestionsClearRequested:this.handleSuggestionsClearRequested,getSuggestionValue:le,renderSuggestion:se,renderSuggestionsContainer:this.renderSuggestionsContainer,onSuggestionSelected:this.onSuggestionSelected,inputProps:{autoFocus:u,classes:a,placeholder:t.formatMessage({id:"Base.Header.headersearch.HeaderSearch.search_api.tooltip",defaultMessage:"Search APIs"}),value:i,lcState:s,onChange:this.handleChange,onDropDownChange:this.handleDropDownChange,onKeyDown:this.onKeyDown,onBlur:this.clearOnBlur,isLoading:l}})}}])&&de(a.prototype,n),o&&de(a,o),t}();ge.defaultProps={smSearch:!1,toggleSmSearch:void 0},ge.propTypes={classes:y.a.shape({}).isRequired,smSearch:y.a.bool,toggleSmSearch:y.a.func,history:y.a.shape({push:y.a.func}).isRequired,intl:y.a.shape({formatMessage:y.a.func}).isRequired};var ye=Object(s.e)(Object(D.g)(Object(P.a)(function(e){return{container:{flexGrow:2},smContainer:{position:"absolute"},suggestionsContainerOpen:{display:"block",position:"absolute",width:"535px",zIndex:e.zIndex.modal+1},suggestion:{display:"block"},suggestionsList:{margin:0,padding:0,listStyleType:"none"},input:{width:"300px",background:e.palette.getContrastText(e.palette.background.appBar),"-webkit-transition":"all .35s ease-in-out",transition:"all .35s ease-in-out",padding:"5px 5px 5px 5px"},inputFocused:{width:"400px",background:e.palette.getContrastText(e.palette.background.appBar),padding:"5px 5px 5px 5px"},searchBox:{padding:"5px 5px 5px 5px"},buttonProgress:{color:e.palette.secondary.main,marginLeft:-50},selectRoot:{background:"#fff",borderBottom:"1px solid rgba(0, 0, 0, 0.42)",borderRight:"1px solid rgba(0, 0, 0, 0.42)",height:"39px",padding:"0 10px"}}})(ge))),be=a(12),ve=a(104),Ee=a(145),we=a(221);function ke(e){return(ke="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Oe(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function Se(e){return(Se=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function je(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Ae(e,t){return(Ae=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Te=function(e){function t(e){var a,n,r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=this,(a=!(r=Se(t).call(this,e))||"object"!==ke(r)&&"function"!=typeof r?je(n):r).state={openEnvironmentMenu:!1},a.handleClickEnvironmentMenu=a.handleClickEnvironmentMenu.bind(je(a)),a.handleRequestCloseEnvironmentMenu=a.handleRequestCloseEnvironmentMenu.bind(je(a)),a.handleEnvironmentChange=a.handleEnvironmentChange.bind(je(a)),a}var a,n,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ae(e,t)}(t,r.a.Component),a=t,(n=[{key:"handleClickEnvironmentMenu",value:function(e){this.setState({openEnvironmentMenu:!0,anchorElEnvironmentMenu:e.currentTarget})}},{key:"handleRequestCloseEnvironmentMenu",value:function(){this.setState({openEnvironmentMenu:!1}),document.location.reload()}},{key:"handleEnvironmentChange",value:function(e){this.props.handleEnvironmentChange(e),this.handleRequestCloseEnvironmentMenu(e)}},{key:"render",value:function(){var e=this,t=this.props,a=t.environments,n=t.environmentLabel,o=this.state,i=o.anchorElEnvironmentMenu,l=o.openEnvironmentMenu;return a&&a.length>1?r.a.createElement("div",{style:{display:"flex"}},r.a.createElement(k.a,{"aria-owns":"simple-menu","aria-haspopup":"true",onClick:this.handleClickEnvironmentMenu,color:"default"},r.a.createElement(s.a,{id:"Base.Header.EnvironmentMenu.environment.label",defaultMessage:"{environmentLabel}",values:{environmentLabel:n}})),r.a.createElement(Ee.a,{id:"simple-menu",anchorEl:i,open:l,onRequestClose:this.handleRequestCloseEnvironmentMenu,style:{alignItems:"center",justifyContent:"center"}},a.map(function(t,a){return r.a.createElement(we.MenuItem,{onClick:e.handleEnvironmentChange,key:a,id:a},t.label)}))):r.a.createElement("div",null)}}])&&Oe(a.prototype,n),o&&Oe(a,o),t}(),xe=a(111),Ce=a.n(xe),Pe=a(353),Re=a(830),Ie=a(667);function _e(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function Me(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var a=[],n=!0,r=!1,o=void 0;try{for(var i,s=e[Symbol.iterator]();!(n=(i=s.next()).done)&&(a.push(i.value),!t||a.length!==t);n=!0);}catch(e){r=!0,o=e}finally{try{n||null==s.return||s.return()}finally{if(r)throw o}}return a}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function Ne(e){var t,a,o,i,s,l,c=Me(Object(n.useState)("home"),2),u=c[0],p=c[1],d=e.classes,m=e.theme,f=e.intl,h=e.smallView,g=e.history,y=function(e){var t=e.pathname;/\/apis$/g.test(t)||/\/apis\//g.test(t)?p("apis"):/\/api-products$/g.test(t)||/\/api-products\//g.test(t)?p("api-products"):/\/home$/g.test(t)||/\/home\//g.test(t)?p("home"):(/\/applications$/g.test(t)||/\/applications\//g.test(t))&&p("applications")};Object(n.useEffect)(function(){var e=g.location;y(e)},[]),g.listen(function(e){y(e)});var v=m.palette.getContrastText(m.palette.background.leftMenu),E=32;h&&(E=16,v=m.palette.getContrastText(m.palette.background.appBar));Ce()(_e({},d.small,h));return r.a.createElement(Pe.a,{className:d.listRoot},m.custom.landingPage.active&&r.a.createElement(b.a,{to:"/home",className:Ce()((t={},_e(t,d.selected,"home"===u),_e(t,d.links,!0),t))},r.a.createElement(Re.a,{button:!0},r.a.createElement(x.a,{classes:{root:Ce()(_e({},d.smallIcon,h))}},r.a.createElement(C.a,{style:{fontSize:E,color:v},className:d.listText},"home")),r.a.createElement(T.a,{classes:{root:d.listItemTextRoot,primary:Ce()((a={},_e(a,d.selectedText,"home"===u),_e(a,d.listText,"home"!==u&&!h),_e(a,d.listTextSmall,"home"!==u&&h),a))},primary:f.formatMessage({id:"Base.Generic.GlobalNavbar.menu.home",defaultMessage:"Home"})}))),r.a.createElement(b.a,{to:m.custom.tagWiseMode?"/api-groups":"/apis",className:Ce()((o={},_e(o,d.selected,"apis"===u),_e(o,d.links,!0),o))},r.a.createElement(Re.a,{button:!0},r.a.createElement(x.a,{classes:{root:Ce()(_e({},d.smallIcon,h))}},r.a.createElement(Ie.a,{width:E,height:E,icon:"api",className:d.listText,strokeColor:v})),r.a.createElement(T.a,{classes:{root:d.listItemTextRoot,primary:Ce()((i={},_e(i,d.selectedText,"apis"===u),_e(i,d.listText,"apis"!==u&&!h),_e(i,d.listTextSmall,"apis"!==u&&h),i))},primary:f.formatMessage({id:"Base.Generic.GlobalNavbar.menu.apis",defaultMessage:"APIs"})}))),r.a.createElement(b.a,{to:"/applications",className:Ce()((s={},_e(s,d.selected,"applications"===u),_e(s,d.links,!0),s))},r.a.createElement(Re.a,{button:!0},r.a.createElement(x.a,{classes:{root:Ce()(_e({},d.smallIcon,h))}},r.a.createElement(Ie.a,{width:E,height:E,icon:"applications",className:d.listText,strokeColor:v})),r.a.createElement(T.a,{classes:{root:d.listItemTextRoot,primary:Ce()((l={},_e(l,d.selectedText,"applications"===u),_e(l,d.listText,"applications"!==u&&!h),_e(l,d.listTextSmall,"applications"!==u&&h),l))},primary:f.formatMessage({id:"Base.Generic.GlobalNavbar.menu.applications",defaultMessage:"Applications"})}))))}Ne.propTypes={intl:y.a.shape({}).isRequired,theme:y.a.shape({}).isRequired};var Le=Object(D.g)(Object(s.e)(Object(P.a)(function(e){return{listRoot:{padding:0},listItemTextRoot:{padding:0},listText:{color:e.palette.getContrastText(e.palette.background.drawer)},listTextSmall:{color:e.palette.getContrastText(e.palette.background.appBar)},smallIcon:{marginRight:5,minWidth:"auto"},links:{display:"flex",height:64},selected:{background:e.palette.background.activeMenuItem,alignItems:"center",textDecoration:"none",color:e.palette.getContrastText(e.palette.background.activeMenuItem)},selectedText:{color:e.palette.getContrastText(e.palette.background.activeMenuItem)}}},{withTheme:!0})(Ne))),qe=a(714);function De(e){return(De="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Be(){return(Be=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}function We(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function Ue(e){return(Ue=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Ke(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Fe(e,t){return(Fe=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function ze(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var Ve=function(e){function t(e){var a,n,r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=this,r=Ue(t).call(this,e),a=!r||"object"!==De(r)&&"function"!=typeof r?Ke(n):r,ze(Ke(a),"state",{environments:{},environmentId:0,nightMode:!1,themeIndex:0,left:!1,openNavBar:!1,openUserMenu:!1}),ze(Ke(a),"handleRequestCloseUserMenu",function(){a.setState({openUserMenu:!1})}),ze(Ke(a),"handleEnvironmentChange",function(e){a.setState({openEnvironmentMenu:!1});var t=parseInt(e.target.id);p.a.setEnvironment(a.state.environments[t]),a.setState({environmentId:t})}),ze(Ke(a),"doOIDCLogout",function(e){e.preventDefault(),window.location="/store-new/services/logout"}),ze(Ke(a),"handleClickButton",function(e){var t;a.setState((ze(t={},e,!0),ze(t,"anchorEl",Object(R.findDOMNode)(a.button)),t))}),ze(Ke(a),"handleRequestClose",function(e){a.setState(ze({},e,!1))}),ze(Ke(a),"handleToggleUserMenu",function(){a.setState(function(e){return{openUserMenu:!e.openUserMenu}})}),ze(Ke(a),"handleCloseUserMenu",function(e){a.anchorEl.contains(e.target)||a.setState({openUserMenu:!1})}),a.toggleGlobalNavBar=a.toggleGlobalNavBar.bind(Ke(a)),a}var a,n,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Fe(e,t)}(t,r.a.Component),a=t,(n=[{key:"componentDidMount",value:function(){var e=this,t=(ve.a.getConfigs().environments.then(function(t){e.setState({environments:t.data.environments})}).catch(function(e){console.error("Error while receiving environment configurations : ",e)}),localStorage.getItem("themeIndex"));if(t){this.setState({themeIndex:parseInt(t)});var a=!1;1===parseInt(t)&&(a=!0),this.setState({nightMode:a})}}},{key:"toggleGlobalNavBar",value:function(e){this.setState({openNavBar:!this.state.openNavBar})}},{key:"render",value:function(){var e=this,t=this.props,a=t.classes,n=t.theme,o=this.state.openNavBar,i=this.context,l=i.tenantDomain,c=i.setTenantDomain,u=be.a.getUser(),d={style:{top:64}},m={style:{backgroundColor:n.palette.background.drawer,top:64}};return r.a.createElement(r.a.Fragment,null,r.a.createElement("div",{className:a.wrapper},r.a.createElement(v.a,{position:"fixed",className:a.appBar},r.a.createElement(E.a,{className:a.toolbar},r.a.createElement(O.a,{mdUp:!0},r.a.createElement(w.a,{onClick:this.toggleGlobalNavBar,color:"inherit"},r.a.createElement(C.a,{className:a.menuIcon},"menu"))),r.a.createElement(b.a,{to:"/"},r.a.createElement("img",{src:n.custom.logo})),r.a.createElement(O.a,{smDown:!0},r.a.createElement(qe.a,{height:32}),r.a.createElement("div",{className:a.listInline},r.a.createElement(Le,{smallView:!0}))),r.a.createElement(O.a,{mdUp:!0},r.a.createElement(q.a,{className:a.drawerStyles,PaperProps:m,SlideProps:d,ModalProps:d,BackdropProps:d,open:o,onClose:this.toggleGlobalNavBar},r.a.createElement("div",{tabIndex:0,role:"button",onClick:this.toggleGlobalNavBar,onKeyDown:this.toggleGlobalNavBar},r.a.createElement("div",{className:a.list},r.a.createElement(Le,{smallView:!1}))))),r.a.createElement(qe.a,{height:32}),r.a.createElement(ye,null),l&&r.a.createElement(b.a,{style:{textDecoration:"none",color:"#ffffff"},to:"/",onClick:function(){return c("INVALID")}},r.a.createElement(k.a,{className:a.publicStore},r.a.createElement(C.a,null,"public"),r.a.createElement(s.a,{id:"Base.index.go.to.public.store",defaultMessage:"Go to public store"}))),r.a.createElement(qe.a,{height:72}),r.a.createElement(Te,{environments:this.state.environments,environmentLabel:p.a.getEnvironment().label,handleEnvironmentChange:this.handleEnvironmentChange}),u?r.a.createElement(r.a.Fragment,null,r.a.createElement(k.a,{buttonRef:function(t){e.anchorEl=t},"aria-owns":open?"menu-list-grow":null,"aria-haspopup":"true",onClick:this.handleToggleUserMenu,className:a.userLink},r.a.createElement(C.a,null,"person"),u.name),r.a.createElement(_.a,{open:this.state.openUserMenu,anchorEl:this.anchorEl,transition:!0,disablePortal:!0,anchorOrigin:{vertical:"bottom",horizontal:"center"},transformOrigin:{vertical:"top",horizontal:"center"}},function(t){var n=t.TransitionProps,o=t.placement;return r.a.createElement(M.a,Be({},n,{id:"menu-list-grow",style:{transformOrigin:"bottom"===o?"center top":"center bottom"}}),r.a.createElement(N.a,null,r.a.createElement(L.a,{onClickAway:e.handleCloseUserMenu},r.a.createElement(S.a,null,r.a.createElement(j.a,{onClick:e.handleCloseUserMenu},r.a.createElement(s.a,{id:"Base.index.profile",defaultMessage:"Profile"})),r.a.createElement(j.a,{onClick:e.handleCloseUserMenu},r.a.createElement(s.a,{id:"Base.index.my.account",defaultMessage:"My account"})),r.a.createElement(j.a,{onClick:e.doOIDCLogout},r.a.createElement(s.a,{id:"Base.index.logout",defaultMessage:"Logout"})),r.a.createElement(A.a,null),r.a.createElement(j.a,{className:a.menuItem,onClick:e.handleCloseUserMenu},r.a.createElement(T.a,{primary:"Night Mode"}),r.a.createElement(x.a,{className:a.icon},r.a.createElement(C.a,null,"brightness_low")))))))})):r.a.createElement(r.a.Fragment,null,r.a.createElement("a",{href:"/store-new/services/configs"},r.a.createElement(k.a,{className:a.userLink},r.a.createElement(C.a,null,"person"),r.a.createElement(s.a,{id:"Base.index.sign.in",defaultMessage:" Sign-in"})))))),r.a.createElement("div",{className:a.contentWrapper},this.props.children),r.a.createElement("div",{className:a.push})),r.a.createElement("footer",{className:a.footer},r.a.createElement(I.a,{noWrap:!0},r.a.createElement(s.a,{id:"Base.index.copyright.text",defaultMessage:"WSO2 APIM v3.0.0 | © 2019 WSO2 Inc"}))))}}])&&We(a.prototype,n),o&&We(a,o),t}();ze(Ve,"contextType",m.c),Ve.propTypes={classes:y.a.shape({}).isRequired,theme:y.a.shape({}).isRequired};var Ge=Object(P.a)(function(e){var t;return{appBar:{position:"relative",background:e.palette.background.appBar},icon:{marginRight:2*e.spacing.unit},menuIcon:{color:e.palette.getContrastText(e.palette.background.appBar),fontSize:35},userLink:{color:e.palette.getContrastText(e.palette.background.appBar)},publicStore:{color:e.palette.getContrastText(e.palette.background.appBar)},drawer:{top:64},wrapper:{minHeight:"100%",marginBottom:-50,background:e.palette.background.default+" url("+e.custom.backgroundImage+") repeat left top"},contentWrapper:{display:"flex",flexDirection:"row",overflowY:"hidden",position:"relative",minHeight:"calc(100vh - 114px)"},push:{height:50},footer:{backgroundColor:e.palette.grey.A100,paddingLeft:3*e.spacing.unit,height:50,alignItems:"center",display:"flex"},toolbar:(t={minHeight:56},ze(t,"".concat(e.breakpoints.up("xs")," and (orientation: landscape)"),{minHeight:48}),ze(t,e.breakpoints.up("sm"),{minHeight:64}),t),list:{width:e.custom.drawerWidth},drawerStyles:{top:e.mixins.toolbar["@media (min-width:600px)"].minHeight},listInline:{"& ul":{display:"flex",flexDirection:"row"}}}},{withTheme:!0})(Ve),He=a(115),Ye=a(113);function Je(e){var t,a,n,o=e.tag,i=e.path,s=e.classes,l=e.theme,c=i+":"+o.value,u=l.custom,p=u.thumbnail,d=u.tagThumbnail,m=o.value.split(l.custom.tagGroupKey)[0],f=p.contentPictureOverlap,h=d.defaultTagImage;return r.a.createElement("div",{className:s.thumbWrapper},r.a.createElement(b.a,{to:c,className:s.imageWrapper},r.a.createElement("img",{src:h,className:s.image,alt:""})),r.a.createElement("div",{className:Ce()(s.thumbContent,(t={},a=s.imageOverlap,n=f,a in t?Object.defineProperty(t,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[a]=n,t))},r.a.createElement(b.a,{to:c,className:s.textWrapper},r.a.createElement(I.a,{className:s.thumbHeader,variant:"h4",gutterBottom:!0,onClick:this,title:m},m))))}Je.propTypes={classes:y.a.shape({thumbWrapper:y.a.shape({}).isRequired,imageWrapper:y.a.shape({}).isRequired,thumbContent:y.a.shape({}).isRequired,imageOverlap:y.a.shape({}).isRequired,textWrapper:y.a.shape({}).isRequired,thumbHeader:y.a.shape({}).isRequired,image:y.a.shape({}).isRequired}).isRequired,theme:y.a.shape({custom:y.a.shape({thumbnail:y.a.shape({contentPictureOverlap:y.a.shape({}).isRequired}).isRequired,tagThumbnail:y.a.shape({defaultTagImage:y.a.shape({}).isRequired}).isRequired,tagGroupKey:y.a.string.isRequired}).isRequired}).isRequired,listType:y.a.shape({}).isRequired,tag:y.a.shape({value:y.a.shape({split:y.a.func}).isRequired}).isRequired,path:y.a.shape({}).isRequired};var Qe=Object(P.a)(function(e){return{thumbContent:{width:e.custom.tagThumbnail.width-e.spacing.unit,backgroundColor:e.palette.background.paper,padding:e.spacing.unit},thumbLeft:{alignSelf:"flex-start",flex:1},thumbRight:{alignSelf:"flex-end"},thumbInfo:{display:"flex"},thumbHeader:{width:e.custom.tagThumbnail.width-e.spacing.unit,whiteSpace:"nowrap",overflow:"hidden",textOverflow:"ellipsis",cursor:"pointer",justifyContent:"center",margin:0},contextBox:{width:parseInt((150-e.spacing.unit)/2),whiteSpace:"nowrap",overflow:"hidden",textOverflow:"ellipsis",cursor:"pointer",margin:0,display:"inline-block",lineHeight:"1em"},thumbWrapper:{position:"relative",paddingTop:20,marginRight:2*e.spacing.unit},deleteIcon:{fill:"red"},textWrapper:{color:e.palette.text.secondary,textDecoration:"none"},image:{width:e.custom.tagThumbnail.width},imageWrapper:{color:e.palette.text.secondary,backgroundColor:e.palette.background.paper,width:e.custom.tagThumbnail.width+e.spacing.unit,display:"flex",alignItems:"center",justifyContent:"center"},imageOverlap:{position:"absolute",bottom:1,backgroundColor:e.custom.thumbnail.contentBackgroundColor}}},{withTheme:!0})(Je);function $e(e){return($e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Xe(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function Ze(e){return(Ze=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function et(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function tt(e,t){return(tt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var at=function(e){function t(e){var a,n,r,o,i,s;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=this,r=Ze(t).call(this,e),a=!r||"object"!==$e(r)&&"function"!=typeof r?et(n):r,o=et(a),s=function(e){a.setState({selectedTag:e.value})},(i="handleOnClick")in o?Object.defineProperty(o,i,{value:s,enumerable:!0,configurable:!0,writable:!0}):o[i]=s,a.state={selectedTag:null},a.handleOnClick=a.handleOnClick.bind(et(a)),a}var a,n,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&tt(e,t)}(t,r.a.Component),a=t,(n=[{key:"render",value:function(){var e=this.props,t=e.classes,a=e.data,n=e.listType;return r.a.createElement("div",{className:t.tagedApisWrapper},Object.keys(a).map(function(e){return r.a.createElement(Qe,{tag:a[e],listType:n,path:"/apis?limit=10&offset=0&query=tag"})}))}}])&&Xe(a.prototype,n),o&&Xe(a,o),t}();at.propTypes={classes:y.a.shape({}).isRequired,tag:y.a.shape({}).isRequired,theme:y.a.shape({}).isRequired,listType:y.a.string.isRequired,data:y.a.shape({}).isRequired};var nt=Object(P.a)(function(e){return{root:{marginTop:2*e.spacing.unit,padding:3*e.spacing.unit,paddingLeft:3*e.spacing.unit,width:30*e.spacing.unit},tagCloudWrapper:{display:"flex",flexDirection:"row",paddingLeft:3*e.spacing.unit},listContentWrapper:{padding:"0 ".concat(3*e.spacing.unit,"px")},mainTitle:{paddingTop:10,paddingBottom:3*e.spacing.unit},selectedTagSpacing:{paddingLeft:3*e.spacing.unit},clickablePointer:{cursor:"pointer"},tagedApisWrapper:{display:"flex",flexDirection:"row",paddingLeft:3*e.spacing.unit,flexWrap:"wrap"}}},{withTheme:!0})(at);function rt(e){return(rt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ot(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function it(e){return(it=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function st(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function lt(e,t){return(lt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var ct=function(e){function t(e){var a,n,r,o,i,s;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=this,r=it(t).call(this,e),a=!r||"object"!==rt(r)&&"function"!=typeof r?st(n):r,o=st(a),s=function(e){a.setState({listType:e})},(i="setListType")in o?Object.defineProperty(o,i,{value:s,enumerable:!0,configurable:!0,writable:!0}):o[i]=s,a.state={listType:e.theme.custom.defaultApiView,allTags:null},a}var a,n,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&lt(e,t)}(t,r.a.Component),a=t,(n=[{key:"componentDidMount",value:function(){var e=this;(new te.a).getAllTags().then(function(t){0!==t.body.count&&e.setState({allTags:t.body.list})}).catch(function(e){console.log(e)})}},{key:"render",value:function(){var e,t=this,a=this.props,n=a.theme,o=a.classes,i=this.state,l=i.listType,c=i.allTags,u=Ye.a.API_TYPE;null!==c&&(e=c.filter(function(e){return!0===n.custom.tagWiseMode&&e.value.split(n.custom.tagGroupKey).length>1}));var p=n.palette.getContrastText(n.palette.background.paper);return r.a.createElement("main",{className:o.content},r.a.createElement("div",{className:o.root},r.a.createElement("div",{className:o.mainIconWrapper},r.a.createElement(Ie.a,{strokeColor:p,width:42,height:42,icon:"api"})),r.a.createElement("div",{className:o.mainTitleWrapper},r.a.createElement(I.a,{variant:"h4",className:o.mainTitle},r.a.createElement(s.a,{defaultMessage:"API Groups",id:"Apis.Listing.TagCloudListing.apigroups.main"})),e&&e.tags&&r.a.createElement(I.a,{variant:"caption",gutterBottom:!0,align:"left"},r.a.createElement(s.a,{defaultMessage:"Displaying",id:"Apis.Listing.TagCloudListing.displaying"}),e.tags.count,r.a.createElement(s.a,{defaultMessage:"API Groups",id:"Apis.Listing.TagCloudListing.apigroups.count"}))),r.a.createElement("div",{className:o.buttonRight},r.a.createElement(w.a,{className:o.button,onClick:function(){return t.setListType("list")}},r.a.createElement(C.a,{color:"list"===l?"primary":"default"},"list")),r.a.createElement(w.a,{className:o.button,onClick:function(){return t.setListType("grid")}},r.a.createElement(C.a,{color:"grid"===l?"primary":"default"},"grid_on")))),e&&e.length>0?r.a.createElement(nt,{data:e,listType:l,apiType:u}):r.a.createElement("div",{className:o.mainTitle},r.a.createElement(I.a,{variant:"subtitle1",gutterBottom:!0,align:"center"},r.a.createElement(s.a,{defaultMessage:"Tags Connot be Found",id:"Apis.Listing.TagCloudListing.tagsNotFound"}))))}}])&&ot(a.prototype,n),o&&ot(a,o),t}();ct.propTypes={classes:y.a.shape({listContentWrapper:y.a.shape({}).isRequired,defaultApiView:y.a.shape({}).isRequired,mainTitle:y.a.shape({}).isRequired,buttonRight:y.a.shape({}).isRequired,button:y.a.shape({}).isRequired,mainTitleWrapper:y.a.shape({}).isRequired,mainIconWrapper:y.a.shape({}).isRequired,content:y.a.shape({}).isRequired,root:y.a.shape({}).isRequired}).isRequired,theme:y.a.shape({palette:y.a.shape({getContrastText:y.a.func.isRequired,background:y.a.shape({paper:y.a.shape({}).isRequired}).isRequired}).isRequired,custom:y.a.shape({tagWiseMode:y.a.bool.isRequired,tagGroupKey:y.a.string.isRequired,defaultApiView:y.a.string.isRequired})}).isRequired};var ut=Object(P.a)(function(e){return{rightIcon:{marginLeft:e.spacing.unit},button:{margin:e.spacing.unit,marginBottom:0},buttonRight:{alignSelf:"flex-end",display:"flex"},ListingWrapper:{paddingTop:10,paddingLeft:35,width:e.custom.contentAreaWidth},root:{height:70,background:e.palette.background.paper,borderBottom:"solid 1px "+e.palette.grey.A200,display:"flex"},mainIconWrapper:{paddingTop:13,paddingLeft:35,paddingRight:20},mainTitle:{paddingTop:10},mainTitleWrapper:{flexGrow:1},content:{flexGrow:1},listContentWrapper:{padding:"0 ".concat(3*e.spacing.unit,"px")}}},{withTheme:!0})(ct),pt=a(232),dt=a(651),mt=a(841),ft=a.n(mt),ht=a(1247),gt=a.n(ht),yt=a(1661),bt=a(110);var vt=Object(P.a)(function(e){return{starRate:{fontSize:30,color:e.custom.starColor},userRating:{display:"flex",justifyContent:"flex-start",alignItems:"center"}}},{withTheme:!0})(function(e){var t=e.classes,a=e.theme,n=e.avgRating,o=e.reviewCount,i=e.returnCount;return r.a.createElement(r.a.Fragment,null,i>0?r.a.createElement(r.a.Fragment,null,r.a.createElement(yt.a,{className:t.starRate}),r.a.createElement("div",{className:t.ratingSummary},r.a.createElement("div",{className:t.userRating},r.a.createElement(I.a,{variant:"h4"},n),r.a.createElement(I.a,{variant:"caption"},"/5.0")),r.a.createElement(I.a,{variant:"caption",gutterBottom:!0,align:"left"},o," ",1===o?r.a.createElement(s.a,{defaultMessage:"user",id:"Apis.Listing.StarRatingBar.user"}):r.a.createElement(s.a,{defaultMessage:"users",id:"Apis.Listing.StarRatingBar.users"})))):r.a.createElement(r.a.Fragment,null,r.a.createElement(yt.a,{className:t.starRate,style:{color:a.palette.grey.A200}}),r.a.createElement("div",{className:t.ratingSummary},r.a.createElement(I.a,{variant:"caption",gutterBottom:!0,align:"left"},r.a.createElement(s.a,{defaultMessage:"Not Rated",id:"Apis.Listing.StarRatingBar.not.rated"})))))});function Et(e){return(Et="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function wt(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function kt(e){return(kt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Ot(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function St(e,t){return(St=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var jt=function(e){function t(e){var a,n,r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=this,(a=!(r=kt(t).call(this,e))||"object"!==Et(r)&&"function"!=typeof r?Ot(n):r).state={avgRating:0,userRating:0,count:0,total:0},a.getApiRating=a.getApiRating.bind(Ot(a)),a.removeUserRating=a.removeUserRating.bind(Ot(a)),a.doRate=a.doRate.bind(Ot(a)),a}var a,n,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&St(e,t)}(t,r.a.Component),a=t,(n=[{key:"componentDidMount",value:function(){this.getApiRating()}},{key:"getApiRating",value:function(){var e=this,t=this.props.apiId,a=be.a.getUser(),n=new te.a;null!=a&&n.getRatingFromUser(t,null).then(function(t){e.setState({avgRating:t.body.avgRating,userRating:t.body.userRating,count:t.body.count,total:t.body.pagination.total})})}},{key:"doRate",value:function(e){var t=this,a=this.props.apiId,n={rating:e};(new te.a).addRating(a,n).then(function(){t.getApiRating()}).catch(function(e){bt.a.error("Error occured while adding ratings")})}},{key:"removeUserRating",value:function(){var e=this,t=this.props.apiId;(new te.a).removeRatingOfUser(t,null).then(function(){return e.getApiRating()}).catch(function(e){bt.a.error("Error occured while removing ratings")})}},{key:"render",value:function(){var e=this,t=this.state,a=t.avgRating,n=t.userRating,o=t.count,i=t.total,s=this.props,l=s.classes,c=s.isEditable,u=s.showSummary,p=s.apiRating;return r.a.createElement(r.a.Fragment,null,u?r.a.createElement(vt,{avgRating:a,reviewCount:i,returnCount:o}):r.a.createElement(r.a.Fragment,null,c?r.a.createElement(r.a.Fragment,null,r.a.createElement("div",{className:l.userRating},[1,2,3,4,5].map(function(t){return r.a.createElement(b.a,null,r.a.createElement(yt.a,{key:t,className:n>=t?l.starRate:l.noStarRate,onClick:function(){return e.doRate(t)}}))}),r.a.createElement(b.a,null,r.a.createElement(gt.a,{className:l.removeRating,onClick:function(){return e.removeUserRating()}})))):r.a.createElement(r.a.Fragment,null,[1,2,3,4,5].map(function(e){return r.a.createElement(yt.a,{key:e,className:p>=e-.5?l.starRate:l.noStarRate})}))))}}])&&wt(a.prototype,n),o&&wt(a,o),t}();jt.defaultProps={apiRating:"0"},jt.propTypes={classes:y.a.shape({}).isRequired,theme:y.a.shape({}).isRequired,apiId:y.a.string.isRequired,isEditable:y.a.bool.isRequired,showSummary:y.a.bool.isRequired,apiRating:y.a.string};var At=Object(P.a)(function(e){return{starRate:{fontSize:30,color:e.custom.starColor},noStarRate:{fontSize:30,color:e.palette.grey.A200},removeRating:{fontSize:20,color:"black"},userRating:{display:"flex",justifyContent:"flex-start",alignItems:"center"}}},{withTheme:!0})(jt),Tt=a(641),xt=a.n(Tt);function Ct(){return(Ct=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}function Pt(e){for(var t=e.classes,a=e.colorPair,n=e.width,o=e.height,i={width:50,height:50},s=[],l=0;l<=4;l++)for(var c=0;c<=4;c++)s.push(r.a.createElement("rect",Ct({key:l+"_"+c},i,{fill:"#"+(a.sub-(37*l-21*c)).toString(16),x:200-54*l,y:54*c})));return r.a.createElement("svg",{width:n,height:o,className:t.svgImage},r.a.createElement("rect",Ct({},{width:250,height:200},{fill:"#"+a.prime.toString(16)})),s)}Pt.propTypes={classes:y.a.shape({}).isRequired,width:y.a.shape({}).isRequired,height:y.a.shape({}).isRequired,colorPair:y.a.shape({}).isRequired};var Rt=Object(P.a)({svgImage:{cursor:"pointer",objectFit:"cover"}})(Pt);function It(e){return(It="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _t(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function Mt(e,t){return!t||"object"!==It(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Nt(e){return(Nt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Lt(e,t){return(Lt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var qt=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),Mt(this,Nt(t).apply(this,arguments))}var a,o,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Lt(e,t)}(t,n["PureComponent"]),a=t,(o=[{key:"render",value:function(){var e,t,a,n=this.props,o=n.classes,i=n.api,s=n.width,l=n.height,c=n.theme,u=n.fixedIcon,p=u.category,d=u.key,m=u.color,f=u.backgroundIndex,h=i;"object"===It(i)&&(h=i.name);var g=c.custom.thumbnail.backgrounds;if(d&&p)a=d;else if("DOC"===i.type)a=c.custom.thumbnail.document.icon;else{e=xt.a.categories[0].icons.length;var y=(h.charCodeAt(0)+h.charCodeAt(h.length-1))%e;a=xt.a.categories[0].icons[y].id}return t="DOC"===i.type?c.custom.thumbnail.document.backgrounds:f&&g.length>f?g[f]:g[(h.charCodeAt(0)+h.charCodeAt(h.length-1))%g.length],r.a.createElement("div",{className:o.iconWrapper,style:{width:s}},r.a.createElement(C.a,{className:o.icon,style:{fontSize:l+"px",marginLeft:-l/2,color:m}},a),r.a.createElement(Rt,{width:s,height:l,colorPair:t}))}}])&&_t(a.prototype,o),i&&_t(a,i),t}();qt.defaultProps={height:190,width:250,fixedIcon:{category:null,key:null,color:"",backgroundIndex:null}},qt.propTypes={classes:y.a.shape({}).isRequired,height:y.a.number,width:y.a.number,fixedIcon:y.a.shape({}),api:y.a.shape({}).isRequired,iconSettings:y.a.shape({}).isRequired,theme:y.a.shape({}).isRequired};var Dt=Object(P.a)({icon:{},iconWrapper:{position:"relative","& span":{position:"absolute",left:"50%"}}},{withTheme:!0})(qt),Bt=a(1208),Wt=a(662);function Ut(e){return(Ut="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Kt(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function Ft(e,t){return!t||"object"!==Ut(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function zt(e){return(zt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Vt(e,t){return(Vt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Gt=window.URL||window.webkitURL,Ht=function(e){function t(e){var a;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(a=Ft(this,zt(t).call(this,e))).state={active:!0,loading:!1,open:!1,overview_link:"",isRedirect:!1,openMoreMenu:!1,category:xt.a.categories[0].name,selectedIcon:null,color:null,backgroundIndex:null,imageObj:null},a}var a,n,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Vt(e,t)}(t,r.a.Component),a=t,(n=[{key:"componentDidMount",value:function(){var e=this,t=this.props.api;(new te.a).getAPIThumbnail(t.id).then(function(t){if(t&&t.data)if("application/json"===t.headers["content-type"]){var a=JSON.parse(t.data);e.setState({selectedIcon:a.key,category:a.category,color:a.color,backgroundIndex:a.backgroundIndex})}else if(t&&t.data.size>0){var n=Gt.createObjectURL(t.data);e.setState({imageObj:n})}})}},{key:"componentWillUnmount",value:function(){this.state.thumbnail&&Gt.revokeObjectURL(this.state.imageObj)}},{key:"getPathPrefix",value:function(){return"/apis/"}},{key:"render",value:function(){var e=this.state,t=e.imageObj,a=e.selectedIcon,n=e.color,o=e.backgroundIndex,i=e.category,l=this.getPathPrefix()+this.props.api.id,c=this.props,u=c.api,p=c.classes,d=c.theme.custom.thumbnail,m=u.name,f=u.version,h=u.context,g=u.provider;u.lifeCycleStatus||(u.lifeCycleStatus=u.status);var y,v,E,w,k=d.width,O=d.defaultApiImage;return y=t?r.a.createElement("img",{height:140,src:t,alt:"API Product Thumbnail",className:p.media}):r.a.createElement(Dt,{width:k,height:140,api:u,fixedIcon:{key:a,color:n,backgroundIndex:o,category:i,api:u}}),r.a.createElement("div",{className:p.thumbWrapper},r.a.createElement(b.a,{to:l,className:p.imageWrapper},!O&&y,O&&r.a.createElement("img",{src:O})),r.a.createElement("div",{className:Ce()(p.thumbContent,(v={},E=p.imageOverlap,w=d.contentPictureOverlap,E in v?Object.defineProperty(v,E,{value:w,enumerable:!0,configurable:!0,writable:!0}):v[E]=w,v))},r.a.createElement(b.a,{to:l,className:p.textWrapper},r.a.createElement(I.a,{className:p.thumbHeader,variant:"h4",gutterBottom:!0,onClick:this.handleRedirectToAPIOverview,title:m},m)),r.a.createElement(I.a,{variant:"caption",gutterBottom:!0,align:"left"},r.a.createElement(s.a,{defaultMessage:"By:",id:"Apis.Listing.ApiThumb.by"}),g),r.a.createElement("div",{className:p.thumbInfo},r.a.createElement("div",{className:p.thumbLeft},r.a.createElement(I.a,{variant:"subtitle1"},f),r.a.createElement(I.a,{variant:"caption",gutterBottom:!0,align:"left"},r.a.createElement(s.a,{defaultMessage:"Version",id:"Apis.Listing.ApiThumb.version"}))),r.a.createElement("div",{className:p.thumbRight},r.a.createElement(I.a,{variant:"subtitle1",align:"right",className:p.contextBox},h),r.a.createElement(I.a,{variant:"caption",gutterBottom:!0,align:"right"},r.a.createElement(s.a,{defaultMessage:"Context",id:"Apis.Listing.ApiThumb.context"})))),r.a.createElement("div",{className:p.thumbInfo},r.a.createElement("div",{className:p.thumbLeft},r.a.createElement(I.a,{variant:"subtitle1",gutterBottom:!0,align:"left"},r.a.createElement(At,{apiRating:u.avgRating,apiId:u.id,isEditable:!1,showSummary:!1}))),r.a.createElement("div",{className:p.thumbRight},r.a.createElement(I.a,{variant:"subtitle1",gutterBottom:!0,align:"right"},"GRAPHQL"===u.type&&r.a.createElement(Bt.a,{label:u.type,color:"primary"}))))))}}])&&Kt(a.prototype,n),o&&Kt(a,o),t}();Ht.propTypes={classes:y.a.shape({}).isRequired,theme:y.a.shape({}).isRequired},Ht.contextType=Wt.a;var Yt=Object(P.a)(function(e){return{thumbContent:{width:e.custom.thumbnail.width-e.spacing.unit,backgroundColor:e.palette.background.paper,padding:e.spacing.unit},thumbLeft:{alignSelf:"flex-start",flex:1},thumbRight:{alignSelf:"flex-end"},thumbInfo:{display:"flex"},thumbHeader:{width:e.custom.thumbnail.width-e.spacing.unit,whiteSpace:"nowrap",overflow:"hidden",textOverflow:"ellipsis",cursor:"pointer",margin:0},contextBox:{width:parseInt((e.custom.thumbnail.width-e.spacing.unit)/2),whiteSpace:"nowrap",overflow:"hidden",textOverflow:"ellipsis",cursor:"pointer",margin:0,display:"inline-block",lineHeight:"1em"},thumbWrapper:{position:"relative",paddingTop:20,marginRight:2*e.spacing.unit},deleteIcon:{fill:"red"},textWrapper:{color:e.palette.text.secondary,textDecoration:"none"},imageWrapper:{color:e.palette.text.secondary,backgroundColor:e.palette.background.paper,width:e.custom.thumbnail.width+e.spacing.unit,display:"flex",alignItems:"center",justifyContent:"center"},imageOverlap:{position:"absolute",bottom:1,backgroundColor:e.custom.thumbnail.contentBackgroundColor}}},{withTheme:!0})(Ht);function Jt(e){return(Jt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Qt(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function $t(e,t){return!t||"object"!==Jt(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Xt(e){return(Xt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Zt(e,t){return(Zt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var ea=window.URL||window.webkitURL,ta=function(e){function t(e){var a;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(a=$t(this,Xt(t).call(this,e))).state={active:!0,loading:!1,open:!1,overview_link:"",isRedirect:!1,openMoreMenu:!1,category:xt.a.categories[0].name,selectedIcon:null,color:null,backgroundIndex:null,imageObj:null},a}var a,n,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Zt(e,t)}(t,r.a.Component),a=t,(n=[{key:"componentWillUnmount",value:function(){this.state.thumbnail&&ea.revokeObjectURL(this.state.imageObj)}},{key:"render",value:function(){var e,t,a,n=this.state,o=n.selectedIcon,i=n.color,l=n.backgroundIndex,c=n.category,u=this.props,p=u.doc,d=u.classes,m=u.theme,f=this.props.doc,h=f.name,g=f.sourceType,y=f.apiName,v=f.apiVersion,E=(f.id,"/apis/"+f.apiUUID+"/docs"),w=m.custom.thumbnail,k=w.width,O=w.defaultApiImage,S=r.a.createElement(Dt,{width:k,height:140,api:p,fixedIcon:{key:o,color:i,backgroundIndex:l,category:c,doc:p}});return r.a.createElement("div",{className:d.thumbWrapper},r.a.createElement(b.a,{to:E,className:d.imageWrapper},!O&&S,O&&r.a.createElement("img",{src:O})),r.a.createElement("div",{className:Ce()(d.thumbContent,(e={},t=d.imageOverlap,a=w.contentPictureOverlap,t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e))},r.a.createElement(b.a,{to:E,className:d.textWrapper},r.a.createElement(I.a,{className:d.thumbHeader,variant:"h4",gutterBottom:!0,onClick:this.handleRedirectToAPIOverview,title:h},h)),r.a.createElement(I.a,{variant:"caption",gutterBottom:!0,align:"left"},r.a.createElement(s.a,{defaultMessage:"Source Type:",id:"Apis.Listing.DocThumb.sourceType"}),g),r.a.createElement("div",{className:d.thumbInfo},r.a.createElement("div",{className:d.thumbLeft},r.a.createElement(I.a,{variant:"subtitle1"},y),r.a.createElement(I.a,{variant:"caption",gutterBottom:!0,align:"left"},r.a.createElement(s.a,{defaultMessage:"Api Name",id:"Apis.Listing.DocThumb.apiName"}))),r.a.createElement("div",{className:d.thumbRight},r.a.createElement(I.a,{variant:"subtitle1",align:"right",className:d.contextBox},v),r.a.createElement(I.a,{variant:"caption",gutterBottom:!0,align:"right"},r.a.createElement(s.a,{defaultMessage:"Api Version",id:"Apis.Listing.DocThumb.apiVersion"}))))))}}])&&Qt(a.prototype,n),o&&Qt(a,o),t}();ta.propTypes={classes:y.a.shape({}).isRequired,theme:y.a.shape({}).isRequired},ta.contextType=Wt.a;var aa=Object(P.a)(function(e){return{thumbContent:{width:e.custom.thumbnail.width-e.spacing.unit,backgroundColor:e.palette.background.paper,padding:e.spacing.unit,minHeight:130},thumbLeft:{alignSelf:"flex-start",flex:1},thumbRight:{alignSelf:"flex-end"},thumbInfo:{display:"flex"},thumbHeader:{width:e.custom.thumbnail.width-e.spacing.unit,whiteSpace:"nowrap",overflow:"hidden",textOverflow:"ellipsis",cursor:"pointer",margin:0},contextBox:{width:parseInt((e.custom.thumbnail.width-e.spacing.unit)/2),whiteSpace:"nowrap",overflow:"hidden",textOverflow:"ellipsis",cursor:"pointer",margin:0,display:"inline-block",lineHeight:"1em"},thumbWrapper:{position:"relative",paddingTop:20,marginRight:2*e.spacing.unit},deleteIcon:{fill:"red"},textWrapper:{color:e.palette.text.secondary,textDecoration:"none"},imageWrapper:{color:e.palette.text.secondary,backgroundColor:e.palette.background.paper,width:e.custom.thumbnail.width+e.spacing.unit,display:"flex",alignItems:"center",justifyContent:"center"},imageOverlap:{position:"absolute",bottom:1,backgroundColor:e.custom.thumbnail.contentBackgroundColor}}},{withTheme:!0})(ta);function na(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function ra(e){return(ra="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function oa(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function ia(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function sa(e,t,a){return t&&ia(e.prototype,t),a&&ia(e,a),e}function la(e,t){return!t||"object"!==ra(t)&&"function"!=typeof t?ca(e):t}function ca(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ua(e){return(ua=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function pa(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&da(e,t)}function da(e,t){return(da=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var ma=function(e){function t(e){var a;return oa(this,t),na(ca(a=la(this,ua(t).call(this,e))),"getMuiTheme",function(){var e={},t={overrides:{MUIDataTable:{root:{backgroundColor:"transparent",marginLeft:40,marginBottom:20},paper:{boxShadow:"none",backgroundColor:"transparent"},tableRoot:{border:"solid 1px #fff","& a":{display:"flex",alignItems:"center"},"& a > div":{paddingRight:10},"& tr:nth-child(even)":{backgroundColor:"#fff"}}},MUIDataTableBodyCell:{root:{backgroundColor:"transparent"}}}};return a.props.gridView&&(e={overrides:{MUIDataTable:{tableRoot:{display:"block","& tbody":{display:"flex",flexWrap:"wrap",marginLeft:40},"& thead":{display:"none"}},paper:{boxShadow:"none",backgroundColor:"transparent"}}}}),t=Object.assign(t,e,c.a.themes.light),Object(pt.a)(t)}),na(ca(a),"getData",function(){a.xhrRequest().then(function(e){var t=e.body,n=t.list,r=t.pagination.total;a.count=r,a.setState({data:n})})}),na(ca(a),"xhrRequest",function(){var e=a.props,t=e.query,n=e.selectedTag,r=ca(a),o=r.page,i=r.rowsPerPage,s=(a.context.apiType,new te.a);if(t){var l=h.a.parse(t);return l.limit=a.rowsPerPage,l.offset=o*i,s.search(l)}return n?s.getAllAPIs({query:"tag:"+n,limit:a.rowsPerPage,offset:o*i}):s.getAllAPIs({limit:a.rowsPerPage,offset:o*i})}),na(ca(a),"changePage",function(e){a.page=e,a.xhrRequest().then(function(e){var t=e.body.list;a.setState({data:t})})}),a.state={data:[]},a.page=0,a.count=100,a.rowsPerPage=10,a.pageType=null,a}return pa(t,r.a.Component),sa(t,[{key:"componentDidMount",value:function(){this.apiType=this.context.apiType,this.getData()}},{key:"componentDidUpdate",value:function(e){var t=this.props,a=t.query,n=t.selectedTag;this.apiType===this.context.apiType&&a===e.query&&e.selectedTag===n||(this.apiType=this.context.apiType,this.getData())}},{key:"render",value:function(){var e=this,t=this.props,a=t.intl,n=t.gridView,o=[{name:"id",options:{display:"excluded",filter:!1}},{name:"name",options:{customBodyRender:function(t,a,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:e;if(a.rowData){var i=o.state.data[a.rowIndex];return r.a.createElement(Dt,{api:i,width:30,height:30})}},sort:!1,filter:!1,display:"excluded"}},{name:"name",label:a.formatMessage({id:"Apis.Listing.ApiTableView.name",defaultMessage:"name"}),options:{customBodyRender:function(t,a,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:e;if(a.rowData){var i=o.state.data[a.rowIndex],l=a.rowData[2],c=a.rowData[0],u=e.props.classes;if(i)return"DOC"===i.type?r.a.createElement(b.a,{to:"/apis/"+i.apiUUID+"/docs"},r.a.createElement(Dt,{api:i,width:30,height:30}),r.a.createElement(s.a,{id:"Apis.Listing.TableView.TableView.doc.flag",defaultMessage:"[Doc] "}),l):r.a.createElement(b.a,{to:"/apis/"+c+"/overview",className:u.rowImageOverride},r.a.createElement(Dt,{api:i,width:30,height:30}),l)}},sort:!1,filter:!1}},{name:"version",label:a.formatMessage({id:"Apis.Listing.ApiTableView.version",defaultMessage:"version"})},{name:"context",label:a.formatMessage({id:"Apis.Listing.ApiTableView.context",defaultMessage:"context"}),options:{sort:!1}},{name:"provider",label:a.formatMessage({id:"Apis.Listing.ApiTableView.provider",defaultMessage:"provider"}),options:{sort:!1}},{name:"type",label:a.formatMessage({id:"Apis.Listing.ApiTableView.type",defaultMessage:"type"}),options:{sort:!1}},{name:"rating",label:a.formatMessage({id:"Apis.Listing.ApiTableView.rating",defaultMessage:"rating"}),options:{customBodyRender:function(t,a,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:e;if(a.rowData){var i=o.state.data[a.rowIndex];if(i&&"DOC"!==i.type){var s=a.rowData[0],l=a.rowData[7];return r.a.createElement(At,{apiRating:l,apiId:s,isEditable:!1,showSummary:!1})}}},options:{sort:!1}}},{name:"avgRating",options:{display:"excluded",filter:!1}}],i=this.page,l=this.count,c=this.rowsPerPage,u=this.state.data,p={filterType:"dropdown",responsive:"stacked",serverSide:!0,search:!1,count:l,page:i,onTableChange:function(t,a){switch(t){case"changePage":e.changePage(a.page)}},selectableRows:"none",rowsPerPage:c,onChangeRowsPerPage:function(t){e.page*t>e.count&&(e.page=0),e.rowsPerPage=t,e.getData()}};return n&&(p.customRowRender=function(t,a,n){var o=(arguments.length>3&&void 0!==arguments[3]?arguments[3]:e).state.data[a];return o?"DOC"===o.type?r.a.createElement(aa,{doc:o}):r.a.createElement(Yt,{api:o}):r.a.createElement("span",null)},p.title=!1,p.filter=!1,p.print=!1,p.download=!1,p.viewColumns=!1,p.customToolbar=!1),0===i&&this.count<=c&&(p.pagination=!1),r.a.createElement(dt.a,{theme:this.getMuiTheme()},r.a.createElement(ft.a,{title:"",data:u,columns:o,options:p}))}}]),t}();ma.contextType=Wt.a;var fa=Object(s.e)(Object(P.a)(function(e){return{rowImageOverride:{"& .material-icons":{marginTop:5,color:"".concat(e.custom.thumbnail.iconColor," !important"),fontSize:"".concat(e.custom.thumbnail.listViewIconSize,"px !important")}}}})(ma));function ha(e){return(ha="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ga(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function ya(e){return(ya=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ba(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function va(e,t){return(va=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Ea=function(e){function t(e){var a,n,r,o,i,s;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=this,r=ya(t).call(this,e),a=!r||"object"!==ha(r)&&"function"!=typeof r?ba(n):r,o=ba(a),s=function(e){a.setState({listType:e})},(i="setListType")in o?Object.defineProperty(o,i,{value:s,enumerable:!0,configurable:!0,writable:!0}):o[i]=s,a.state={listType:e.theme.custom.defaultApiView},a}var a,n,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&va(e,t)}(t,r.a.Component),a=t,(n=[{key:"render",value:function(){var e=this,t=this.props,a=t.apis,n=t.apiType,o=t.theme,i=t.classes,l=t.location.search,c=this.state.listType,u=o.palette.getContrastText(o.palette.background.paper);return r.a.createElement("main",{className:i.content},r.a.createElement("div",{className:i.root},r.a.createElement("div",{className:i.mainIconWrapper},r.a.createElement(Ie.a,{strokeColor:u,width:42,height:42,icon:"api"})),r.a.createElement("div",{className:i.mainTitleWrapper},r.a.createElement(I.a,{variant:"h4",className:i.mainTitle},r.a.createElement(s.a,{defaultMessage:"APIs",id:"Apis.Listing.Listing.apis.main"})),a&&r.a.createElement(I.a,{variant:"caption",gutterBottom:!0,align:"left"},r.a.createElement(s.a,{defaultMessage:"Displaying",id:"Apis.Listing.Listing.displaying"}),a.count,r.a.createElement(s.a,{defaultMessage:"APIs",id:"Apis.Listing.Listing.apis.count"}))),r.a.createElement("div",{className:i.buttonRight},r.a.createElement(w.a,{className:i.button,onClick:function(){return e.setListType("list")}},r.a.createElement(C.a,{color:"list"===c?"primary":"default"},"list")),r.a.createElement(w.a,{className:i.button,onClick:function(){return e.setListType("grid")}},r.a.createElement(C.a,{color:"grid"===c?"primary":"default"},"grid_on")))),r.a.createElement("div",{className:i.listContentWrapper},"grid"===c&&r.a.createElement(Wt.a.Provider,{value:{apiType:n}},r.a.createElement(fa,{gridView:!0,query:l})),"list"===c&&r.a.createElement(Wt.a.Provider,{value:{apiType:n}},r.a.createElement(fa,{gridView:!1,query:l}))))}}])&&ga(a.prototype,n),o&&ga(a,o),t}();Ea.propTypes={classes:y.a.shape({}).isRequired,theme:y.a.shape({}).isRequired,apiType:y.a.string.isRequired,apis:y.a.shape({}).isRequired,location:y.a.shape({search:y.a.string})},Ea.defaultProps={location:y.a.shape({search:""})};var wa=Object(P.a)(function(e){return{rightIcon:{marginLeft:e.spacing.unit},button:{margin:e.spacing.unit,marginBottom:0},buttonRight:{alignSelf:"flex-end",display:"flex"},ListingWrapper:{paddingTop:10,paddingLeft:35,width:e.custom.contentAreaWidth},root:{height:70,background:e.palette.background.paper,borderBottom:"solid 1px "+e.palette.grey.A200,display:"flex"},mainIconWrapper:{paddingTop:13,paddingLeft:35,paddingRight:20},mainTitle:{paddingTop:10},mainTitleWrapper:{flexGrow:1},content:{flexGrow:1},listContentWrapper:{padding:"0 ".concat(3*e.spacing.unit,"px")}}},{withTheme:!0})(Ea),ka=a(233),Oa=a.n(ka);function Sa(){return(Sa=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}var ja=function(e){return function(t){return r.a.createElement(m.a,null,function(a){return r.a.createElement(e,Sa({},a,t))})}};function Aa(e){return(Aa="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ta(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function xa(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function Ca(e,t){return!t||"object"!==Aa(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Pa(e){return(Pa=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Ra(e,t){return(Ra=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Ia=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),Ca(this,Pa(t).call(this,e))}var a,n,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ra(e,t)}(t,r.a.Component),a=t,(n=[{key:"render",value:function(){var e,t=this.props,a=t.classes,n=t.theme,o=t.text,i=t.active,s=t.handleMenuSelect,l=n.custom.leftMenu,c=n.palette.getContrastText(n.palette.background.leftMenu),u=n.custom.leftMenuIconSize;return r.a.createElement("div",{className:Ce()(a.leftLInk,Ta({},a.leftLink_IconLeft,"icon left"===l),"leftLInk"),onClick:function(){return s(o)},style:{backgroundColor:i===o?n.palette.background.appBar:""}},r.a.createElement(Ie.a,{strokeColor:c,width:u,height:u,icon:o,className:Ce()(a.leftLInk,Ta({},a.noIcon,"no icon"===l),"leftLink_Icon")}),r.a.createElement(I.a,{className:Ce()(a.leftLInkText,(e={},Ta(e,a.leftLInkText_IconLeft,"icon left"===l),Ta(e,a.leftLInkText_NoText,"no text"===l),e),"leftLInkText"),style:{textTransform:"uppercase"}},o))}}])&&xa(a.prototype,n),o&&xa(a,o),t}();Ia.propTypes={classes:y.a.instanceOf(Object).isRequired,theme:y.a.instanceOf(Object).isRequired,text:y.a.instanceOf(Object).isRequired,active:y.a.instanceOf(Object).isRequired,handleMenuSelect:y.a.func.isRequired};var _a=Object(P.a)(function(e){return{leftLInkText:{color:e.palette.getContrastText(e.palette.background.leftMenu)},leftLInkText_IconLeft:{paddingLeft:10},LeftMenu:{backgroundColor:e.palette.background.leftMenu,width:e.custom.leftMenuWidth,textAlign:"center",fontFamily:e.typography.fontFamily,position:"absolute",bottom:0,left:0,top:0},leftLInk:{paddingTop:e.spacing.unit,paddingBottom:e.spacing.unit,paddingLeft:e.spacing.unit,paddingRight:e.spacing.unit,fontSize:e.typography.caption.fontSize,cursor:"pointer"},leftLink_IconLeft:{display:"flex",alignItems:"center"},noIcon:{display:"none"},leftLInkText_NoText:{diplay:"none"}}},{withTheme:!0})(Ia),Ma=function(e){return r.a.createElement("div",null,r.a.createElement("div",{className:"message message-danger"},r.a.createElement("h4",null,r.a.createElement("i",{className:"icon fw fw-error"}),r.a.createElement(s.a,{id:"Base.Errors.PageNotfound.title",defaultMessage:"404 Page Not Found!"})),r.a.createElement("p",null,r.a.createElement(s.a,{id:"Base.Errors.PageNotfound.message.first",defaultMessage:"Sorry the page you are looking for"}),r.a.createElement("span",{style:{color:"green"}},e.location.pathname),r.a.createElement(s.a,{id:"Base.Errors.PageNotfound.message.second",defaultMessage:" is not available."}))))},Na=a(668),La=function(e){return r.a.createElement("div",null,r.a.createElement("div",{className:"message message-danger"},r.a.createElement("h4",null,r.a.createElement("i",{className:"icon fw fw-error"}),r.a.createElement(FormattedMessage,{id:"Base.Errors.ScopeNotFound.title",defaultMessage:"Un-authorized Access"})),r.a.createElement("p",null,r.a.createElement(FormattedMessage,{id:"Base.Errors.ScopeNotFound.message.first",defaultMessage:"Sorry, the page you are looking for "}),r.a.createElement("span",{style:{color:"green"}},e.location.pathname),r.a.createElement(FormattedMessage,{id:"Base.Errors.ScopeNotFound.message.second",defaultMessage:" is not allowed under logged in user role scopes. Please login with different user with relevant permission to access this resource."}))))},qa=a(859),Da=a(843),Ba=a(846),Wa=a(847),Ua=a(848),Ka=a(1252),Fa=a.n(Ka),za=a(1251),Va=a.n(za),Ga=a(1209),Ha=a(867),Ya=a(866),Ja=a(783),Qa=a.n(Ja),$a=a(642),Xa=a(751),Za=a.n(Xa),en=a(850);function tn(e){return(tn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function an(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function nn(e){return(nn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function rn(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function on(e,t){return(on=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function sn(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var ln=function(e){function t(e){var a,n,r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=this,r=nn(t).call(this,e),a=!r||"object"!==tn(r)&&"function"!=typeof r?rn(n):r,sn(rn(a),"onCopy",function(e){return function(){a.setState(sn({},e,!0));var t=rn(a),n=e;setTimeout(function(){t.setState(sn({},n,!1))},4e3)}}),a.apiClient=new te.a,a.state={prodUrlCopied:!1,epUrl:""},a.downloadWSDL=a.downloadWSDL.bind(rn(a)),a}var a,n,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&on(e,t)}(t,r.a.Component),a=t,(n=[{key:"downloadWSDL",value:function(e,t){this.props.intl;this.apiClient.getWsdlClient().downloadWSDLForEnvironment(e,t).then(function(e){p.a.downloadFile(e)}).catch(function(e){0})}},{key:"downloadSwagger",value:function(e,t){this.apiClient.getSwaggerByAPIIdAndEnvironment(e,t).then(function(e){p.a.downloadFile(e)}).catch(function(e){console.log(e),bt.a.error(intl.formatMessage({id:"Apis.Details.Environments.download.wsdl.error",defaultMessage:"Error downloading the Swagger"}))})}},{key:"render",value:function(){var e=this,t=this.context.api,a=this.props.classes,n=this.state,o=n.prodUrlCopied,i=n.epUrl;return r.a.createElement($a.a,{container:!0,spacing:2,item:!0,xs:12},t.endpointURLs.map(function(n){return r.a.createElement($a.a,{key:n,item:!0,xs:12},r.a.createElement(Ga.a,null,r.a.createElement(Ha.a,{expandIcon:r.a.createElement(C.a,null,"expand_more"),"aria-controls":"panel1a-content",id:"panel1a-header"},r.a.createElement("div",{className:a.iconAligner},"hybrid"===n.environmentType&&r.a.createElement(C.a,{className:a.iconEven},"cloud"),"production"===n.environmentType&&r.a.createElement(C.a,{className:a.iconEven},"check_circle"),"sandbox"===n.environmentType&&r.a.createElement(C.a,{className:a.iconEven},"Build"),r.a.createElement("span",{className:a.iconTextWrapper},r.a.createElement(I.a,{className:a.heading},n.environmentName)))),r.a.createElement(Ya.a,null,r.a.createElement($a.a,{container:!0,item:!0,xs:12,spacing:2},(null!==n.URLs.http||null!==n.URLs.https||null!==n.URLs.ws||null!==n.URLs.wss)&&r.a.createElement(I.a,{className:a.heading},r.a.createElement(s.a,{id:"Apis.Details.InfoBar.gateway.urls",defaultMessage:"Gateway URLs"})),null!==n.URLs.http&&r.a.createElement($a.a,{item:!0,xs:12},r.a.createElement(G.a,{defaultValue:n.URLs.http,id:"bootstrap-input",InputProps:{disableUnderline:!0,readOnly:!0,classes:{root:a.bootstrapRoot,input:a.bootstrapInput}},InputLabelProps:{shrink:!0,className:a.bootstrapFormLabel}}),r.a.createElement(en.a,{title:o?"Copied":"Copy to clipboard",placement:"right"},r.a.createElement(Za.a,{text:i,onCopy:function(){return e.onCopy("prodUrlCopied")}},r.a.createElement(C.a,{color:"secondary"},"insert_drive_file")))),null!==n.URLs.https&&r.a.createElement($a.a,{item:!0,xs:12},r.a.createElement(G.a,{defaultValue:n.URLs.https,id:"bootstrap-input",InputProps:{disableUnderline:!0,readOnly:!0,classes:{root:a.bootstrapRoot,input:a.bootstrapInput}},InputLabelProps:{shrink:!0,className:a.bootstrapFormLabel}}),r.a.createElement(en.a,{title:o?"Copied":"Copy to clipboard",placement:"right"},r.a.createElement(Za.a,{text:i,onCopy:function(){return e.onCopy("prodUrlCopied")}},r.a.createElement(C.a,{color:"secondary"},"insert_drive_file")))),null!==n.URLs.ws&&r.a.createElement($a.a,{item:!0,xs:12},r.a.createElement(G.a,{defaultValue:n.URLs.ws,id:"bootstrap-input",InputProps:{disableUnderline:!0,readOnly:!0,classes:{root:a.bootstrapRoot,input:a.bootstrapInput}},InputLabelProps:{shrink:!0,className:a.bootstrapFormLabel}}),r.a.createElement(en.a,{title:o?"Copied":"Copy to clipboard",placement:"right"},r.a.createElement(Za.a,{text:i,onCopy:function(){return e.onCopy("prodUrlCopied")}},r.a.createElement(C.a,{color:"secondary"},"insert_drive_file")))),null!==n.URLs.wss&&r.a.createElement($a.a,{item:!0,xs:12},r.a.createElement(G.a,{defaultValue:n.URLs.wss,id:"bootstrap-input",InputProps:{disableUnderline:!0,readOnly:!0,classes:{root:a.bootstrapRoot,input:a.bootstrapInput}},InputLabelProps:{shrink:!0,className:a.bootstrapFormLabel}}),r.a.createElement(en.a,{title:o?"Copied":"Copy to clipboard",placement:"right"},r.a.createElement(Za.a,{text:i,onCopy:function(){return e.onCopy("prodUrlCopied")}},r.a.createElement(C.a,{color:"secondary"},"insert_drive_file")))),(null!==n.defaultVersionURLs.http||null!==n.defaultVersionURLs.https||null!==n.defaultVersionURLs.ws||null!==n.defaultVersionURLs.wss)&&r.a.createElement(I.a,{className:a.heading},r.a.createElement(s.a,{id:"Apis.Details.InfoBar.gateway.urls",defaultMessage:"Default Gateway URLs"})),null!==n.defaultVersionURLs.http&&r.a.createElement($a.a,{item:!0,xs:12},r.a.createElement(G.a,{defaultValue:n.defaultVersionURLs.http,id:"bootstrap-input",InputProps:{disableUnderline:!0,readOnly:!0,classes:{root:a.bootstrapRoot,input:a.bootstrapInput}},InputLabelProps:{shrink:!0,className:a.bootstrapFormLabel}}),r.a.createElement(en.a,{title:o?"Copied":"Copy to clipboard",placement:"right"},r.a.createElement(Za.a,{text:i,onCopy:function(){return e.onCopy("prodUrlCopied")}},r.a.createElement(C.a,{color:"secondary"},"insert_drive_file")))),null!==n.defaultVersionURLs.https&&r.a.createElement($a.a,{item:!0,xs:12},r.a.createElement(G.a,{defaultValue:n.defaultVersionURLs.https,id:"bootstrap-input",InputProps:{disableUnderline:!0,readOnly:!0,classes:{root:a.bootstrapRoot,input:a.bootstrapInput}},InputLabelProps:{shrink:!0,className:a.bootstrapFormLabel}}),r.a.createElement(en.a,{title:o?"Copied":"Copy to clipboard",placement:"right"},r.a.createElement(Za.a,{text:i,onCopy:function(){return e.onCopy("prodUrlCopied")}},r.a.createElement(C.a,{color:"secondary"},"insert_drive_file")))),null!==n.defaultVersionURLs.ws&&r.a.createElement($a.a,{item:!0,xs:12},r.a.createElement(G.a,{defaultValue:n.defaultVersionURLs.ws,id:"bootstrap-input",InputProps:{disableUnderline:!0,readOnly:!0,classes:{root:a.bootstrapRoot,input:a.bootstrapInput}},InputLabelProps:{shrink:!0,className:a.bootstrapFormLabel}}),r.a.createElement(en.a,{title:o?"Copied":"Copy to clipboard",placement:"right"},r.a.createElement(Za.a,{text:i,onCopy:function(){return e.onCopy("prodUrlCopied")}},r.a.createElement(C.a,{color:"secondary"},"insert_drive_file")))),null!==n.defaultVersionURLs.wss&&r.a.createElement($a.a,{item:!0,xs:12},r.a.createElement(G.a,{defaultValue:n.defaultVersionURLs.wss,id:"bootstrap-input",InputProps:{disableUnderline:!0,readOnly:!0,classes:{root:a.bootstrapRoot,input:a.bootstrapInput}},InputLabelProps:{shrink:!0,className:a.bootstrapFormLabel}}),r.a.createElement(en.a,{title:o?"Copied":"Copy to clipboard",placement:"right"},r.a.createElement(Za.a,{text:i,onCopy:function(){return e.onCopy("prodUrlCopied")}},r.a.createElement(C.a,{color:"secondary"},"insert_drive_file")))),"SOAP"===t.type&&r.a.createElement(k.a,{size:"small",onClick:function(){return e.downloadWSDL(t.id,n.environmentName)}},r.a.createElement(Qa.a,{className:a.buttonIcon}),r.a.createElement(s.a,{id:"Apis.Details.Environments.download.wsdl",defaultMessage:"WSDL"})),("HTTP"===t.type||"SOAPTOREST"===t.type)&&r.a.createElement(k.a,{size:"small",onClick:function(){return e.downloadSwagger(t.id,n.environmentName)}},r.a.createElement(Qa.a,{className:a.buttonIcon}),r.a.createElement(s.a,{id:"Apis.Details.Environments.download.wsdl",defaultMessage:"Swagger"}))))))}))}}])&&an(a.prototype,n),o&&an(a,o),t}();ln.propTypes={classes:y.a.object.isRequired,intl:y.a.func.isRequired},ln.contextType=Wt.a;var cn=Object(s.e)(Object(P.a)(function(e){return{buttonIcon:{marginRight:10},iconAligner:{display:"flex",justifyContent:"flex-start",alignItems:"center"},iconEven:{color:e.palette.secondary.light,width:3*e.spacing.unit},iconOdd:{color:e.palette.secondary.main,width:3*e.spacing.unit},iconTextWrapper:{display:"inline-block",paddingLeft:20},bootstrapRoot:{padding:0,"label + &":{marginTop:3*e.spacing.unit}},bootstrapInput:{borderRadius:4,backgroundColor:e.palette.common.white,border:"1px solid #ced4da",padding:"5px 12px",width:350,transition:e.transitions.create(["border-color","box-shadow"]),"&:focus":{borderColor:"#80bdff",boxShadow:"0 0 0 0.2rem rgba(0,123,255,.25)"}}}})(ln));function un(e){return(un="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function pn(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function dn(e){return(dn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function mn(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function fn(e,t){return(fn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function hn(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var gn=function(e){function t(e){var a,n,r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=this,r=dn(t).call(this,e),a=!r||"object"!==un(r)&&"function"!=typeof r?mn(n):r,hn(mn(a),"onCopy",function(e){return function(){a.setState(hn({},e,!0));var t=mn(a),n=e;setTimeout(function(){t.setState(hn({},n,!1))},4e3)}}),a.apiClient=new te.a,a.state={prodUrlCopied:!1,epUrl:""},a}var a,n,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&fn(e,t)}(t,r.a.Component),a=t,(n=[{key:"downloadSwagger",value:function(e,t){this.apiClient.getSwaggerByAPIIdAndLabel(e,t).then(function(e){p.a.downloadFile(e)}).catch(function(e){console.log(e),Alert.error(intl.formatMessage({id:"Apis.Details.Environments.download.wsdl.error",defaultMessage:"Error downloading the Swagger"}))})}},{key:"render",value:function(){var e=this,t=this.context.api,a=this.props.classes,n=this.state;n.prodUrlCopied,n.epUrl;return r.a.createElement($a.a,{container:!0,spacing:2,item:!0,xs:12},t.labels.map(function(n){return r.a.createElement($a.a,{key:n,item:!0,xs:12},r.a.createElement(Ga.a,null,r.a.createElement(Ha.a,{expandIcon:r.a.createElement(C.a,null,"expand_more"),"aria-controls":"panel1a-content",id:"panel1a-header"},r.a.createElement("div",{className:a.iconAligner},r.a.createElement(C.a,{className:a.iconEven},"label"),r.a.createElement("span",{className:a.iconTextWrapper},r.a.createElement(I.a,{className:a.heading},n.name)))),r.a.createElement(Ya.a,null,r.a.createElement($a.a,{container:!0,item:!0,xs:12,spacing:2},r.a.createElement(I.a,{className:a.heading},r.a.createElement(s.a,{id:"Apis.Details.InfoBar.gateway.urls",defaultMessage:"Microgateway URLs"})),n.accessUrls.map(function(e){return r.a.createElement($a.a,{item:!0,xs:12},r.a.createElement(G.a,{defaultValue:e,id:"bootstrap-input",InputProps:{disableUnderline:!0,readOnly:!0,classes:{root:a.bootstrapRoot,input:a.bootstrapInput}},InputLabelProps:{shrink:!0,className:a.bootstrapFormLabel}}))}),("HTTP"===t.type||"SOAPTOREST"===t.type)&&r.a.createElement(k.a,{size:"small",onClick:function(){return e.downloadSwagger(t.id,n.name)}},r.a.createElement(Qa.a,{className:a.buttonIcon}),r.a.createElement(s.a,{id:"Apis.Details.Environments.download.wsdl",defaultMessage:"Swagger"}))))))}))}}])&&pn(a.prototype,n),o&&pn(a,o),t}();gn.propTypes={classes:y.a.object.isRequired},gn.contextType=Wt.a;var yn=Object(P.a)(function(e){return{iconAligner:{display:"flex",justifyContent:"flex-start",alignItems:"center"},iconEven:{color:e.palette.secondary.light,width:3*e.spacing.unit},iconOdd:{color:e.palette.secondary.main,width:3*e.spacing.unit},iconTextWrapper:{display:"inline-block",paddingLeft:20},bootstrapRoot:{padding:0,"label + &":{marginTop:3*e.spacing.unit}},bootstrapInput:{borderRadius:4,backgroundColor:e.palette.common.white,border:"1px solid #ced4da",padding:"5px 12px",width:350,transition:e.transitions.create(["border-color","box-shadow"]),"&:focus":{borderColor:"#80bdff",boxShadow:"0 0 0 0.2rem rgba(0,123,255,.25)"}},buttonIcon:{marginRight:10}}})(gn);function bn(e){return(bn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function vn(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function En(e){return(En=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function wn(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function kn(e,t){return(kn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var On=function(e){function t(e){var a,n,r,o,i,s;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=this,r=En(t).call(this,e),a=!r||"object"!==bn(r)&&"function"!=typeof r?wn(n):r,o=wn(a),s=function(e){"boolean"==typeof e?a.setState({showOverview:e}):a.setState(function(e){return{showOverview:!e.showOverview}})},(i="toggleOverview")in o?Object.defineProperty(o,i,{value:s,enumerable:!0,configurable:!0,writable:!0}):o[i]=s,a.state={api:null,applications:null,policies:null,dropDownApplications:null,dropDownPolicies:null,notFound:!1,tabValue:"Social Sites",comment:"",commentList:null,showOverview:!1,checked:!1},a.getSchema=a.getSchema.bind(wn(a)),a}var a,n,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&kn(e,t)}(t,r.a.Component),a=t,(n=[{key:"getSchema",value:function(){var e=new te.a,t=this.context.api;e.getGraphQLSchemaByAPIId(t.id).then(function(e){var a=window.URL||window.webkitURL,n=new Blob([e.data]),r=a.createObjectURL(n),o=document.createElement("a");o.href=r,o.download=t.provider+"-"+t.name+"-"+t.version+".graphql",o.click(),a.revokeObjectURL(r)})}},{key:"render",value:function(){var e=this,t=this.props,a=t.classes,n=t.theme,o=(t.intl,this.state),i=o.notFound,l=o.showOverview,c=(o.prodUrlCopied,o.sandboxUrlCopied,o.epUrl,this.props.resourceNotFountMessage),u=be.a.getUser();return i?r.a.createElement(Na.a,{message:c}):r.a.createElement(Wt.a.Consumer,null,function(t){var o=t.api;return r.a.createElement("div",{className:a.infoBarMain},r.a.createElement("div",{className:a.root},r.a.createElement(b.a,{to:"/apis",className:a.backLink},r.a.createElement(C.a,{className:a.backIcon},"keyboard_arrow_left"),r.a.createElement("div",{className:a.backText},r.a.createElement(s.a,{id:"Apis.Details.InfoBar.back.to",defaultMessage:"BACK TO"}),r.a.createElement("br",null),r.a.createElement(s.a,{id:"Apis.Details.InfoBar.listing",defaultMessage:"LISTING"}))),r.a.createElement(qe.a,{height:70}),r.a.createElement(Dt,{api:o,width:"70",height:"50"}),r.a.createElement("div",{style:{marginLeft:n.spacing.unit}},r.a.createElement(I.a,{variant:"h4"},o.name),r.a.createElement(I.a,{variant:"caption",gutterBottom:!0,align:"left"},o.provider)),r.a.createElement(qe.a,{height:70}),!o.advertiseInfo.advertised&&u&&r.a.createElement(At,{apiId:o.id,isEditable:!1,showSummary:!0}),o.advertiseInfo.advertised&&r.a.createElement(r.a.Fragment,null,r.a.createElement("a",{target:"_blank",rel:"noopener noreferrer",href:o.advertiseInfo.originalStoreUrl,className:a.viewInPubStoreLauncher},r.a.createElement("div",null,r.a.createElement(Va.a,null)),r.a.createElement("div",{className:a.linkText},"Visit Publisher Store")),r.a.createElement(qe.a,{height:70}))),l&&r.a.createElement(qa.a,{in:l},r.a.createElement("div",{className:a.infoContent},r.a.createElement("div",{className:a.contentWrapper},r.a.createElement(I.a,null,o.description),r.a.createElement(Da.a,{className:a.table},r.a.createElement(Ba.a,null,r.a.createElement(Ua.a,null,r.a.createElement(Wa.a,{component:"th",scope:"row",className:a.leftCol},r.a.createElement("div",{className:a.iconAligner},r.a.createElement(C.a,{className:a.iconOdd},"settings_input_component"),r.a.createElement("span",{className:a.iconTextWrapper},r.a.createElement(s.a,{id:"Apis.Details.InfoBar.list.version",defaultMessage:"Version"})))),r.a.createElement(Wa.a,null,o.version)),r.a.createElement(Ua.a,null,r.a.createElement(Wa.a,{component:"th",scope:"row"},r.a.createElement("div",{className:a.iconAligner},r.a.createElement(C.a,{className:a.iconEven},"account_balance_wallet"),r.a.createElement("span",{className:a.iconTextWrapper},r.a.createElement(s.a,{id:"Apis.Details.InfoBar.list.context",defaultMessage:"Context"})))),r.a.createElement(Wa.a,null,o.context)),r.a.createElement(Ua.a,null,r.a.createElement(Wa.a,{component:"th",scope:"row"},r.a.createElement("div",{className:a.iconAligner},r.a.createElement(C.a,{className:a.iconOdd},"account_circle"),r.a.createElement("span",{className:a.iconTextWrapper},r.a.createElement(s.a,{id:"Apis.Details.InfoBar.provider",defaultMessage:"Provider"})))),r.a.createElement(Wa.a,null,o.provider)),u&&!o.advertiseInfo.advertised&&r.a.createElement(Ua.a,null,r.a.createElement(Wa.a,{component:"th",scope:"row"},r.a.createElement("div",{className:a.iconAligner},r.a.createElement(Fa.a,{className:a.iconEven}),r.a.createElement("span",{className:a.iconTextWrapper},r.a.createElement(s.a,{id:"Apis.Details.InfoBar.list.context.rating",defaultMessage:"Rating"})))),r.a.createElement(Wa.a,null,r.a.createElement(At,{apiId:o.id,isEditable:!0,showSummary:!1}))),"GRAPHQL"===o.type&&r.a.createElement(Ua.a,null,r.a.createElement(Wa.a,{component:"th",scope:"row"},r.a.createElement("div",{className:a.iconAligner},r.a.createElement(C.a,{className:a.iconOdd},"cloud_download"),r.a.createElement("span",{className:a.iconTextWrapper},r.a.createElement(s.a,{id:"Apis.Details.InfoBar.download.Schema",defaultMessage:"Download Schema"})))),r.a.createElement(Wa.a,null,r.a.createElement(k.a,{onClick:e.getSchema,size:"small",fontSize:"small",variant:"outlined"},r.a.createElement(s.a,{id:"Apis.Details.InfoBar.graphQL.schema",defaultMessage:"GraphQL Schema"})))),o.advertiseInfo.advertised?r.a.createElement(Ua.a,null,r.a.createElement(Wa.a,{component:"th",scope:"row"},r.a.createElement("div",{className:a.iconAligner},r.a.createElement(C.a,{className:a.iconOdd},"account_circle"),r.a.createElement("span",{className:a.iconTextWrapper},r.a.createElement(s.a,{id:"Apis.Details.InfoBar.owner",defaultMessage:"Owner"})))),r.a.createElement(Wa.a,null,o.advertiseInfo.apiOwner)):r.a.createElement(r.a.Fragment,null,r.a.createElement(Ua.a,null,r.a.createElement(Wa.a,{component:"th",scope:"row",className:a.contentToTop},r.a.createElement("div",{className:a.iconAligner},r.a.createElement(C.a,{className:a.iconEven},"desktop_windows"),r.a.createElement("span",{className:a.iconTextWrapper},r.a.createElement(s.a,{id:"Apis.Details.InfoBar.available.environments",defaultMessage:"Available Environments"})))),r.a.createElement(Wa.a,null,r.a.createElement(cn,null))),0!==o.labels.length&&r.a.createElement(Ua.a,null,r.a.createElement(Wa.a,{component:"th",scope:"row",className:a.contentToTop},r.a.createElement("div",{className:a.iconAligner},r.a.createElement(C.a,{className:a.iconEven},"games"),r.a.createElement("span",{className:a.iconTextWrapper},r.a.createElement(s.a,{id:"Apis.Details.InfoBar.available.mgLabels",defaultMessage:"Available Microgateways"})))),r.a.createElement(Wa.a,null,r.a.createElement(yn,null))))))))),r.a.createElement("div",{className:a.infoContentBottom},r.a.createElement("div",{className:a.contentWrapper,onClick:e.toggleOverview},r.a.createElement("div",{className:a.buttonView},l?r.a.createElement(I.a,{className:a.buttonOverviewText},r.a.createElement(s.a,{id:"Apis.Details.InfoBar.less",defaultMessage:"LESS"})):r.a.createElement(I.a,{className:a.buttonOverviewText},r.a.createElement(s.a,{id:"Apis.Details.InfoBar.more",defaultMessage:"MORE"})),l?r.a.createElement(C.a,null,"arrow_drop_up"):r.a.createElement(C.a,null,"arrow_drop_down")))))})}}])&&vn(a.prototype,n),o&&vn(a,o),t}();On.propTypes={classes:y.a.object.isRequired,theme:y.a.object.isRequired,intl:y.a.shape({formatMessage:y.a.func}).isRequired},On.contextType=Wt.a;var Sn=Object(s.e)(Object(P.a)(function(e){return{table:{minWidth:"100%"},root:{height:70,background:e.palette.background.paper,borderBottom:"solid 1px "+e.palette.grey.A200,display:"flex",alignItems:"center",paddingLeft:2*e.spacing.unit},backIcon:{color:e.palette.primary.main,fontSize:56,cursor:"pointer"},backText:{color:e.palette.primary.main,cursor:"pointer",fontFamily:e.typography.fontFamily},apiIcon:{height:45,marginTop:10,marginRight:10},starRate:{fontSize:40,color:e.custom.starColor},starRateMy:{fontSize:40,color:e.palette.primary.main},rateLink:{cursor:"pointer",lineHeight:"70px"},topBar:{display:"flex",paddingBottom:2*e.spacing.unit},infoContent:{background:e.palette.background.paper,padding:3*e.spacing.unit},infoContentBottom:{background:e.palette.grey[200],borderBottom:"solid 1px "+e.palette.grey.A200,color:e.palette.grey[600]},infoItem:{marginRight:4*e.spacing.unit},bootstrapRoot:{padding:0,"label + &":{marginTop:3*e.spacing.unit}},bootstrapInput:{borderRadius:4,backgroundColor:e.palette.common.white,border:"1px solid #ced4da",padding:"5px 12px",width:350,transition:e.transitions.create(["border-color","box-shadow"]),fontFamily:["-apple-system","BlinkMacSystemFont",'"Segoe UI"',"Roboto",'"Helvetica Neue"',"Arial","sans-serif",'"Apple Color Emoji"','"Segoe UI Emoji"','"Segoe UI Symbol"'].join(","),"&:focus":{borderColor:"#80bdff",boxShadow:"0 0 0 0.2rem rgba(0,123,255,.25)"}},epWrapper:{display:"flex"},prodLabel:{lineHeight:"30px",marginRight:10,width:100},contentWrapper:{width:e.custom.contentAreaWidth-e.custom.leftMenuWidth,alignItems:"center"},ratingBoxWrapper:{position:"relative",display:"flex",alignItems:"center"},ratingBox:{backgroundColor:e.palette.background.leftMenu,border:"1px solid rgb(71, 211, 244)",borderRadius:"5px",display:"flex",position:"absolute",left:"-310px",top:14,height:"40px",color:e.palette.getContrastText(e.palette.background.leftMenu),alignItems:"center",paddingLeft:"5px",paddingRight:"5px"},userRating:{display:"flex",alignItems:"flex-end"},verticalDividerStar:{borderLeft:"solid 1px "+e.palette.grey.A200,height:40,marginRight:e.spacing.unit,marginLeft:e.spacing.unit},backLink:{alignItems:"center",textDecoration:"none",display:"flex"},ratingSummery:{alignItems:"center",flexDirection:"column",display:"flex"},infoBarMain:{width:"100%"},buttonView:{textAlign:"left",justifyContent:"left",display:"flex",paddingLeft:2*e.spacing.unit,cursor:"pointer"},buttonOverviewText:{display:"inline-block",paddingTop:3},rootx:{height:180},container:{display:"flex"},paper:{margin:e.spacing.unit},svg:{width:100,height:100},polygon:{fill:e.palette.common.white,stroke:e.palette.divider,strokeWidth:1},leftCol:{width:200},iconAligner:{display:"flex",justifyContent:"flex-start",alignItems:"center"},iconTextWrapper:{display:"inline-block",paddingLeft:20},iconEven:{color:e.palette.secondary.light,width:3*e.spacing.unit},iconOdd:{color:e.palette.secondary.main,width:3*e.spacing.unit},margin:{marginLeft:30},downloadLink:{color:"blue"},contentToTop:{verticlaAlign:"top"},viewInPubStoreLauncher:{display:"flex",flexDirection:"column",color:e.palette.getContrastText(e.palette.background.paper),textAlign:"center",textDecoration:"none"},linkText:{fontSize:e.typography.fontSize}}},{withTheme:!0})(On));function jn(e){return(jn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function An(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function Tn(e){return(Tn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function xn(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Cn(e,t){return(Cn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Pn(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var Rn=function(e){function t(e){var a,n,r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=this,r=Tn(t).call(this,e),a=!r||"object"!==jn(r)&&"function"!=typeof r?xn(n):r,Pn(xn(a),"state",{open:!0,toggleButtonTop:0}),Pn(xn(a),"handleScroll",function(){var e=window.scrollY;0===e?a.setState({toggleButtonTop:10}):e>0&&e<72?a.setState({toggleButtonTop:e}):a.setState({toggleButtonTop:72})}),a.toggleRightPanel=a.toggleRightPanel.bind(xn(a)),a}var a,n,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Cn(e,t)}(t,r.a.Component),a=t,(n=[{key:"componentWillUnmount",value:function(){window.removeEventListener("scroll",this.handleScroll)}},{key:"componentDidMount",value:function(){this.handleScroll(),window.addEventListener("scroll",this.handleScroll);var e=!1;window.innerWidth>1600&&(e=!0),this.setState({open:e})}},{key:"toggleRightPanel",value:function(){this.setState({open:!this.state.open})}},{key:"render",value:function(){var e=this.props,t=e.classes;e.theme;return r.a.createElement("div",{className:t.rightMenu},r.a.createElement("div",{onClick:this.toggleRightPanel,className:t.rightMenuToggle,style:{marginTop:"-"+this.state.toggleButtonTop+"px"}},"?"))}}])&&An(a.prototype,n),o&&An(a,o),t}();Rn.propTypes={classes:y.a.object.isRequired,theme:y.a.object.isRequired};var In=Object(P.a)(function(e){return{linkColor:{color:e.palette.getContrastText(e.palette.background.leftMenu)},linkColorMain:{color:e.palette.secondary.main},rightMenu:{width:window.innerWidth-e.custom.contentAreaWidth-e.custom.leftMenuWidth-50,borderLeft:"solid 1px "+e.palette.secondary.main,textAlign:"center",fontFamily:e.typography.fontFamily,position:"absolute",bottom:0,right:0,top:0,overflowY:"auto",backgroundColor:e.palette.background.paper,padding:10,fontSize:e.typography.fontSize},rightMenuToggle:{backgroundColor:e.palette.secondary.main,padding:5,width:32,height:32,borderTopLeftRadius:5,borderBottomLeftRadius:5,cursor:"pointer",position:"fixed",marginLeft:-53,marginTop:"-10px"}}},{withTheme:!0})(Rn),_n=a(231);function Mn(e){return(Mn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Nn(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var a=[],n=!0,r=!1,o=void 0;try{for(var i,s=e[Symbol.iterator]();!(n=(i=s.next()).done)&&(a.push(i.value),!t||a.length!==t);n=!0);}catch(e){r=!0,o=e}finally{try{n||null==s.return||s.return()}finally{if(r)throw o}}return a}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function Ln(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function qn(e){return(qn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Dn(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Bn(e,t){return(Bn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Wn=Object(D.g)(Oa.a.Map({loader:{ApiConsole:function(){return Promise.all([a.e(8),a.e(1)]).then(a.bind(null,1659))},Overview:function(){return Promise.all([a.e(0),a.e(4)]).then(a.bind(null,1658))},Documentation:function(){return Promise.all([a.e(9),a.e(3)]).then(a.bind(null,1660))},Credentials:function(){return a.e(2).then(a.bind(null,1657))},Comments:function(){return a.e(0).then(a.bind(null,1202))},Sdk:function(){return a.e(6).then(a.bind(null,822))}},render:function(e,t){var a=t.match,n=t.advertised,o=e.ApiConsole.default,i=e.Overview.default,s=e.Documentation.default,l=e.Credentials.default,c=e.Comments.default,u=e.Sdk.default,p="/apis/"+a.params.api_uuid+"/overview";return r.a.createElement(D.d,null,r.a.createElement(D.a,{exact:!0,from:"/apis/:apiUuid",to:p}),r.a.createElement(D.b,{path:"/apis/:apiUuid/overview",render:function(e){return r.a.createElement(i,e)}}),!n&&r.a.createElement(r.a.Fragment,null,r.a.createElement(D.b,{path:"/apis/:apiUuid/credentials",component:l}),r.a.createElement(D.b,{path:"/apis/:apiUuid/comments",component:c}),r.a.createElement(D.b,{path:"/apis/:apiUuid/test",component:o}),r.a.createElement(D.b,{path:"/apis/:apiUuid/sdk",component:u})),r.a.createElement(D.b,{path:"/apis/:apiUuid/docs",component:s}),r.a.createElement(D.a,{exact:!0,from:"/api-products/:apiUuid",to:p}),r.a.createElement(D.b,{path:"/api-products/:apiUuid/overview",render:function(e){return r.a.createElement(i,e)}}),r.a.createElement(D.b,{path:"/api-products/:apiUuid/credentials",component:l}),r.a.createElement(D.b,{path:"/api-products/:apiUuid/comments",component:c}),r.a.createElement(D.b,{path:"/api-products/:apiUuid/test",component:o}),r.a.createElement(D.b,{path:"/api-products/:apiUuid/docs",component:s}),r.a.createElement(D.b,{path:"/api-products/:apiUuid/sdk",component:u}),r.a.createElement(D.b,{component:Ma}))},loading:function(){return r.a.createElement(_n.a,null)}})),Un=function(e){function t(e){var a,n,r,o,i,s;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=this,r=qn(t).call(this,e),a=!r||"object"!==Mn(r)&&"function"!=typeof r?Dn(n):r,o=Dn(a),s=function(e){a.props.history.push({pathname:"/apis/"+a.props.match.params.api_uuid+"/"+e}),"overview"===e?a.infoBar.toggleOverview(!0):a.infoBar.toggleOverview(!1),a.setState({active:e})},(i="handleMenuSelect")in o?Object.defineProperty(o,i,{value:s,enumerable:!0,configurable:!0,writable:!0}):o[i]=s,a.updateSubscriptionData=function(e){var t=null,n=null,r=new te.a;r.getAPIById(a.api_uuid).then(function(e){a.setState({api:e.body})}).catch(function(e){var t=e.status,n=e.response,r=a.props,o=r.setTenantDomain,i=r.intl.formatMessage({defaultMessage:"Invalid tenant domain",id:"Apis.Details.index.invalid.tenant.domain"});n&&901300===n.body.code&&(o("INVALID"),bt.a.error(i)),console.error("Error when getting apis",e),404===t&&a.setState({notFound:!0})}),null!=be.a.getUser()&&(t=r.getSubscriptions(a.api_uuid,null),n=r.getAllApplications(),Promise.all([t,n]).then(function(t){var n=Nn(t.map(function(e){return e.obj}),2),r=n[0],o=n[1],i=o.list.reduce(function(e,t){return e[t.applicationId]=t.name,e},{}),s=r.list.map(function(e){return{value:e.applicationId,policy:e.throttlingPolicy,status:e.status,subscriptionId:e.subscriptionId,label:i[e.applicationId]}}),l=s.map(function(e){return e.value}),c=o.list.filter(function(e){return!l.includes(e.applicationId)&&"APPROVED"===e.status}).map(function(e){return{value:e.applicationId,label:e.name}});a.setState({subscribedApplications:s,applicationsAvailable:c},function(){e&&e()})}).catch(function(e){404===e.status&&a.setState({notFound:!0})}))},a.state={active:"overview",overviewHiden:!1,handleMenuSelect:a.handleMenuSelect,updateSubscriptionData:a.updateSubscriptionData,api:null,applications:null,subscribedApplications:[],applicationsAvailable:[],item:1,xo:null},a.setDetailsAPI=a.setDetailsAPI.bind(Dn(a)),a.api_uuid=a.props.match.params.api_uuid,a}var a,n,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Bn(e,t)}(t,r.a.Component),a=t,(n=[{key:"setDetailsAPI",value:function(e){this.setState({api:e})}},{key:"componentDidMount",value:function(){this.updateActiveLink(),this.updateSubscriptionData()}},{key:"updateActiveLink",value:function(){var e=this.state.active,t=this.props.location.pathname.match(/[^\/]+(?=\/$|$)/g);t&&t.length>0&&e!==t[0]&&this.setState({active:t[0]})}},{key:"render",value:function(){var e=this;this.updateActiveLink();var t=this.props,a=t.classes,n=t.theme,o=t.intl,i=(t.apiType,t.match.params.apiUuid),l=this.state,c=l.active,u=l.api,p=n.custom.leftMenuIconMainSize,d="body{ font-family: "+n.typography.fontFamily+"}";return u?r.a.createElement(Wt.a.Provider,{value:this.state},r.a.createElement("style",null,d),r.a.createElement("div",{className:a.LeftMenu},r.a.createElement(b.a,{to:"/apis",className:a.leftLInkMainWrapper},r.a.createElement("div",{className:a.leftLInkMain},r.a.createElement(Ie.a,{width:p,height:p,icon:"api"}),r.a.createElement(I.a,{className:a.leftLInkMainText},r.a.createElement(s.a,{id:"Apis.Details.index.all.apis",defaultMessage:"ALL APIs"})))),r.a.createElement(_a,{text:"overview",handleMenuSelect:this.handleMenuSelect,active:c}),!u.advertiseInfo.advertised&&r.a.createElement(r.a.Fragment,null,r.a.createElement(_a,{text:"credentials",handleMenuSelect:this.handleMenuSelect,active:c}),r.a.createElement(_a,{text:"comments",handleMenuSelect:this.handleMenuSelect,active:c}),r.a.createElement(_a,{text:"test",handleMenuSelect:this.handleMenuSelect,active:c})),r.a.createElement(_a,{text:"docs",handleMenuSelect:this.handleMenuSelect,active:c}),!u.advertiseInfo.advertised&&r.a.createElement(_a,{text:"sdk",handleMenuSelect:this.handleMenuSelect,active:c})),r.a.createElement("div",{className:a.content},r.a.createElement(Sn,{apiId:i,innerRef:function(t){return e.infoBar=t},intl:o}),r.a.createElement(Wn,{api_uuid:i,advertised:u.advertiseInfo.advertised})),n.custom.showApiHelp&&r.a.createElement(In,null)):r.a.createElement("div",{className:"apim-dual-ring"})}}])&&Ln(a.prototype,n),o&&Ln(a,o),t}();Un.propTypes={classes:y.a.shape({}).isRequired,theme:y.a.shape({}).isRequired,match:y.a.shape({}).isRequired,params:y.a.shape({}).isRequired,intl:y.a.shape({formatMessage:y.a.func}).isRequired};var Kn=ja(Object(s.e)(Object(P.a)(function(e){return{LeftMenu:{backgroundColor:e.palette.background.leftMenu,width:e.custom.leftMenuWidth,textAlign:"left",fontFamily:e.typography.fontFamily,position:"absolute",bottom:0,left:0,top:0,boxShadow:"11px -1px 15px -8px rgba(115,115,115,1)"},leftLInkMain:{borderRight:"solid 1px "+e.palette.background.leftMenu,paddingBottom:e.spacing.unit,paddingTop:e.spacing.unit,cursor:"pointer",backgroundColor:e.palette.background.leftMenuActive,color:e.palette.getContrastText(e.palette.background.leftMenuActive),textDecoration:"none",alignItems:"center",paddingLeft:2*e.spacing.unit,display:"flex"},leftLInkMainText:{fontSize:18,color:e.palette.grey[500],textDecoration:"none",paddingLeft:2*e.spacing.unit},detailsContent:{display:"flex",flex:1},content:{display:"flex",flex:1,flexDirection:"column",marginLeft:e.custom.leftMenuWidth,paddingBottom:3*e.spacing.unit},leftLInkMainWrapper:{textDecoration:"none"}}},{withTheme:!0})(Un)));function Fn(){return(Fn=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}var zn=Object(P.a)({},{withTheme:!0})(function(){return r.a.createElement(D.d,null,r.a.createElement(D.b,{exact:!0,path:"/apiGroups",render:function(e){return r.a.createElement(ut,Fn({},e,{apiType:Ye.a.API_TYPE}))}}),r.a.createElement(D.b,{exact:!0,path:"/apis",render:function(e){return r.a.createElement(wa,Fn({},e,{apiType:Ye.a.API_TYPE}))}}),r.a.createElement(D.b,{exact:!0,path:"/api-products",render:function(e){return r.a.createElement(wa,Fn({},e,{apiType:Ye.a.API_PRODUCT_TYPE}))}}),r.a.createElement(D.b,{path:"/apis/search",render:function(e){return r.a.createElement(wa,Fn({},e,{apiType:Ye.a.API_TYPE}))}}),r.a.createElement(D.b,{path:"/apis/:api_uuid/",render:function(e){return r.a.createElement(Kn,Fn({},e,{apiType:Ye.a.API_TYPE}))}}),r.a.createElement(D.b,{path:"/api-products/:api_uuid/",render:function(e){return r.a.createElement(Kn,Fn({},e,{apiType:Ye.a.API_PRODUCT_TYPE}))}}),r.a.createElement(D.b,{component:Ma}))}),Vn=a(1211),Gn=a(691),Hn=a(860),Yn=a(837),Jn=a(752),Qn=a(688);function $n(e){return($n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Xn(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),a.push.apply(a,n)}return a}function Zn(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?Xn(a,!0).forEach(function(t){or(e,t,a[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):Xn(a).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))})}return e}function er(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var a=[],n=!0,r=!1,o=void 0;try{for(var i,s=e[Symbol.iterator]();!(n=(i=s.next()).done)&&(a.push(i.value),!t||a.length!==t);n=!0);}catch(e){r=!0,o=e}finally{try{n||null==s.return||s.return()}finally{if(r)throw o}}return a}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function tr(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function ar(e){return(ar=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function nr(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function rr(e,t){return(rr=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function or(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function ir(){return(ir=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}function sr(e){return r.a.createElement(Yn.a,ir({direction:"up"},e))}var lr=function(e){function t(e){var a,n,r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=this,r=ar(t).call(this,e),a=!r||"object"!==$n(r)&&"function"!=typeof r?nr(n):r,or(nr(a),"initApplicationState",function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=new te.a,n=t.getAllTiers("application"),r=t.getAllApplicationAttributes();Promise.all([n,r]).then(function(t){var n=er(t,2),r=n[0],o=n[1],i=a.state.applicationRequest,s=r.body.list.map(function(e){return e.name}),l=Zn({},i);if(s.length>0){var c=er(s,1);l.throttlingPolicy=c[0]}var u=[];o.body.list.map(function(e){return u.push(e)}),o.length>0&&(l.attributes=u.filter(function(e){return!e.hidden})),e&&(l.name="",l.description="",l.tokenType="OAUTH",l.groups=null),a.setState({applicationRequest:l,throttlingPolicyList:s,allAppAttributes:u})}).catch(function(e){404===e.status&&a.setState({notFound:!0})})}),or(nr(a),"updateApplicationRequest",function(e){a.setState({applicationRequest:e})}),or(nr(a),"handleAttributesChange",function(e){return function(t){var n=a.state.applicationRequest;n.attributes[e]=t.target.value,a.setState({applicationRequest:n})}}),or(nr(a),"getAttributeValue",function(e){return a.state.applicationRequest.attributes[e]}),or(nr(a),"isRequiredAttribute",function(e){var t=a.state.allAppAttributes;if(t)for(var n=0;n<t.length;n++)if(t[n].attribute===e)return"true"===t[n].required;return!1}),or(nr(a),"validateAttributes",function(e){var t=a.props.intl,n=a.state.allAppAttributes,r=!0,o=Object.keys(e);if(n.length>0)for(var i=0;i<n.length;i++)"true"===n[i].required&&"false"===n[i].hidden&&(-1===o.indexOf(n[i].attribute)?r=!1:o.indexOf(n[i].attribute)>-1&&(!e[n[i].attribute]||""===e[n[i].attribute].trim())&&(r=!1));return r?Promise.resolve(!0):Promise.reject(new Error(t.formatMessage({id:"Applications.Edit.app.update.error.no.required.attribute",defaultMessage:"Please fill all required application attributes"})))}),or(nr(a),"saveApplication",function(){var e=a.state.applicationRequest,t=a.props,n=t.updateApps,r=t.handleClose,o=t.intl,i=new te.a;a.validateName(e.name).then(function(){return a.validateAttributes(e.attributes)}).then(function(){return i.createApplication(e)}).then(function(){console.log("Application created successfully."),r(),n(),a.initApplicationState(!0)}).catch(function(e){var t=e.response;if(t&&t.body){var a=t.body.description||o.formatMessage({defaultMessage:"Error while creating the application",id:"Applications.Create.NewApp.error.while.creating.the.application"});bt.a.error(a)}else bt.a.error(e.message);console.error("Error while creating the application")})}),or(nr(a),"validateName",function(e){var t=a.props.intl;return e&&""!==e.trim()?(a.setState({isNameValid:!0}),Promise.resolve(!0)):(a.setState({isNameValid:!1}),Promise.reject(new Error(t.formatMessage({id:"Applications.Create.NewApp.app.name.required",defaultMessage:"Application name is required"}))))}),or(nr(a),"handleAddChip",function(e,t){var n=Zn({},a.state.applicationRequest),r=t||[];(r=r.slice()).push(e),n.groups=r,a.setState({applicationRequest:n})}),or(nr(a),"handleDeleteChip",function(e,t,n){var r=Zn({},a.state.applicationRequest),o=n||[];o=o.filter(function(t){return t!==e}),r.groups=o,a.setState({applicationRequest:r})}),or(nr(a),"isApplicationGroupSharingEnabled",function(){var e=a.context.settings.applicationSharingEnabled;a.setState({isApplicationSharingEnabled:e})}),a.state={applicationRequest:{name:"",throttlingPolicy:"",description:"",tokenType:"JWT",groups:null,attributes:{}},isNameValid:!0,throttlingPolicyList:[],allAppAttributes:null,isApplicationSharingEnabled:!0},a.handleAddChip=a.handleAddChip.bind(nr(a)),a.handleDeleteChip=a.handleDeleteChip.bind(nr(a)),a}var a,n,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&rr(e,t)}(t,r.a.Component),a=t,(n=[{key:"componentDidMount",value:function(){this.initApplicationState(),this.isApplicationGroupSharingEnabled()}},{key:"render",value:function(){var e=this.state,t=e.throttlingPolicyList,a=e.applicationRequest,n=e.isNameValid,o=e.allAppAttributes,i=e.isApplicationSharingEnabled,l=this.props,c=l.classes,u=l.open,p=l.handleClickOpen,d=l.handleClose;return r.a.createElement(r.a.Fragment,null,r.a.createElement(Qn.a,{resourcePath:Qn.c.APPLICATIONS,resourceMethod:Qn.b.POST},r.a.createElement(k.a,{variant:"contained",color:"primary",className:c.button,onClick:p},r.a.createElement(s.a,{id:"Applications.Create.NewApp.add.new.application",defaultMessage:"ADD NEW APPLICATION"}))),r.a.createElement(Hn.a,{fullScreen:!0,open:u,onClose:d,TransitionComponent:sr},r.a.createElement(v.a,{className:c.appBar},r.a.createElement(E.a,null,r.a.createElement(w.a,{color:"inherit",onClick:d,"aria-label":"Close"},r.a.createElement(C.a,null,"close")),r.a.createElement(I.a,{variant:"h6",color:"inherit",className:c.flex},r.a.createElement(s.a,{id:"Applications.Create.NewApp.create.new.application",defaultMessage:"Create New Application"})),r.a.createElement(k.a,{color:"inherit",onClick:d},r.a.createElement(s.a,{id:"Applications.Create.NewApp.save",defaultMessage:"save"})))),r.a.createElement("div",{className:c.createFormWrapper},r.a.createElement(Jn.a,{throttlingPolicyList:t,applicationRequest:a,updateApplicationRequest:this.updateApplicationRequest,validateName:this.validateName,isNameValid:n,allAppAttributes:o,handleAttributesChange:this.handleAttributesChange,isRequiredAttribute:this.isRequiredAttribute,getAttributeValue:this.getAttributeValue,isApplicationSharingEnabled:i,handleDeleteChip:this.handleDeleteChip,handleAddChip:this.handleAddChip})),r.a.createElement("div",{className:c.buttonWrapper},r.a.createElement(k.a,{variant:"outlined",className:c.button,onClick:d},r.a.createElement(s.a,{id:"Applications.Create.NewApp.cancel",defaultMessage:"Cancel"})),r.a.createElement(k.a,{variant:"contained",color:"primary",className:c.button,onClick:this.saveApplication},r.a.createElement(s.a,{id:"Applications.Create.NewApp.add.new.application.button",defaultMessage:"ADD NEW APPLICATION"})))))}}])&&tr(a.prototype,n),o&&tr(a,o),t}();or(lr,"contextType",m.c),lr.propTypes={classes:y.a.shape({appBar:y.a.string,flex:y.a.string,createFormWrapper:y.a.string,buttonWrapper:y.a.string,button:y.a.string}).isRequired,updateApps:y.a.func.isRequired,handleClose:y.a.func.isRequired,intl:y.a.shape({formatMessage:y.a.func.isRequired}).isRequired,handleClickOpen:y.a.func.isRequired,open:y.a.bool.isRequired};var cr=Object(s.e)(Object(P.a)(function(e){return{appBar:{position:"relative",backgroundColor:e.palette.background.appBar,color:e.palette.getContrastText(e.palette.background.appBar)},flex:{flex:1},button:{marginRight:2*e.spacing.unit},buttonWrapper:{paddingLeft:7*e.spacing.unit},createFormWrapper:{paddingLeft:5*e.spacing.unit}}})(lr)),ur=a(874);function pr(e){return(pr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function dr(e){return function(e){if(Array.isArray(e)){for(var t=0,a=new Array(e.length);t<e.length;t++)a[t]=e[t];return a}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function mr(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function fr(e,t){return!t||"object"!==pr(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function hr(e){return(hr=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function gr(e,t){return(gr=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var yr=function(e){function t(e){var a;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(a=fr(this,hr(t).call(this,e))).state={notFound:!1},a.APPLICATION_STATES={CREATED:"CREATED",APPROVED:"APPROVED",REJECTED:"REJECTED"},a}var a,o,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&gr(e,t)}(t,n["Component"]),a=t,(o=[{key:"render",value:function(){var e=this,t=this.props,a=t.apps,n=t.handleAppDelete,o=t.page,i=t.rowsPerPage,l=t.order,c=t.orderBy,u=(t.isApplicationSharingEnabled,this.state.notFound),p=i-Math.min(i,a.size-o*i),d=[];return a&&(d=dr(a.values()).map(function(e){return e.deleting=!1,e})),u?r.a.createElement(Na.a,null):r.a.createElement(Ba.a,null,d.sort(function(e,t){return"desc"===e?function(e,a){return a[t]<e[t]?-1:1}:function(e,a){return e[t]<a[t]?-1:1}}(l,c)).slice(o*i,o*i+i).map(function(t){return r.a.createElement(Ua.a,{key:t.applicationId},r.a.createElement(Wa.a,{align:"left"},t.status===e.APPLICATION_STATES.APPROVED?r.a.createElement(b.a,{to:"/applications/"+t.applicationId},t.name):t.name),r.a.createElement(Wa.a,{align:"left"},t.owner),r.a.createElement(Wa.a,{align:"left"},t.throttlingPolicy),r.a.createElement(Wa.a,{align:"left"},t.status===e.APPLICATION_STATES.APPROVED&&r.a.createElement(I.a,{variant:"subtitle1",gutterBottom:!0},r.a.createElement(s.a,{id:"Applications.Listing.AppsTableContent.active",defaultMessage:"ACTIVE"})),t.status===e.APPLICATION_STATES.CREATED&&r.a.createElement(I.a,{variant:"subtitle1",gutterBottom:!0},r.a.createElement(s.a,{id:"Applications.Listing.AppsTableContent.inactive",defaultMessage:"INACTIVE"}),r.a.createElement(I.a,{variant:"caption"},r.a.createElement(s.a,{id:"Applications.Listing.AppsTableContent.wait.approval",defaultMessage:"waiting for approval"}))),t.status===e.APPLICATION_STATES.REJECTED&&r.a.createElement(I.a,{variant:"subtitle1",gutterBottom:!0},r.a.createElement(s.a,{id:"Applications.Listing.AppsTableContent.rejected",defaultMessage:"REJECTED"}))),r.a.createElement(Wa.a,{align:"left"},t.subscriptionCount),r.a.createElement(Wa.a,{align:"left"},r.a.createElement(Qn.a,{resourcePath:Qn.c.SINGLE_APPLICATION,resourceMethod:Qn.b.PUT},t.status===e.APPLICATION_STATES.APPROVED&&r.a.createElement(en.a,{title:"Edit"},r.a.createElement(b.a,{to:"application/edit/"+t.applicationId},r.a.createElement(w.a,null,r.a.createElement(C.a,{"aria-label":r.a.createElement(s.a,{id:"Applications.Listing.AppsTableContent.edit.btn",defaultMessage:"Edit"})},"edit"))))),r.a.createElement(Qn.a,{resourcePath:Qn.c.SINGLE_APPLICATION,resourceMethod:Qn.b.DELETE},r.a.createElement(en.a,{title:r.a.createElement(s.a,{id:"Applications.Listing.AppsTableContent.delete.tooltip",defaultMessage:"Delete"})},r.a.createElement(w.a,{disabled:t.deleting,"data-appId":t.applicationId,onClick:n,color:"default","aria-label":r.a.createElement(s.a,{id:"Applications.Listing.AppsTableContent.delete.label",defaultMessage:"Delete"})},r.a.createElement(C.a,null,"delete")))),t.deleting&&r.a.createElement(U.a,{size:24})))}),p>0&&r.a.createElement(Ua.a,{style:{height:49*p}},r.a.createElement(Wa.a,{colSpan:6})))}}])&&mr(a.prototype,o),i&&mr(a,i),t}();yr.propTypes={handleAppDelete:y.a.func.isRequired,page:y.a.number.isRequired,rowsPerPage:y.a.number.isRequired,order:y.a.string.isRequired,orderBy:y.a.string.isRequired,isApplicationSharingEnabled:y.a.func.isRequired,apps:y.a.instanceOf(Map).isRequired};var br=yr,vr=a(849),Er=a(1207),wr=function(e){var t=[{id:"name",numeric:!1,disablePadding:!0,label:r.a.createElement(s.a,{id:"Applications.Listing.ApplicationTableHead.edit.app",defaultMessage:"Edit Application"}),sorting:!0},{id:"owner",numeric:!1,disablePadding:!1,label:r.a.createElement(s.a,{id:"Applications.Listing.ApplicationTableHead.owner",defaultMessage:"Owner"}),sorting:!0},{id:"throttlingTier",numeric:!1,disablePadding:!1,label:r.a.createElement(s.a,{id:"Applications.Listing.ApplicationTableHead.policy",defaultMessage:"Policy"}),sorting:!0},{id:"workflowStatus",numeric:!1,disablePadding:!1,label:r.a.createElement(s.a,{id:"Applications.Listing.ApplicationTableHead.workflow.status",defaultMessage:"Workflow Status"}),sorting:!0},{id:"subscriptions",numeric:!1,disablePadding:!1,label:r.a.createElement(s.a,{id:"Applications.Listing.ApplicationTableHead.subscriptions",defaultMessage:"Subscriptions"}),sorting:!0},{id:"actions",numeric:!1,disablePadding:!1,label:r.a.createElement(s.a,{id:"Applications.Listing.ApplicationTableHead.actions",defaultMessage:"Actions"}),sorting:!1}],a=e.order,n=e.orderBy;return r.a.createElement(vr.a,null,r.a.createElement(Ua.a,null,t.map(function(t){return r.a.createElement(Wa.a,{key:t.id,align:"left",sortDirection:n===t.id&&a},t.sorting?r.a.createElement(Er.a,{active:n===t.id,direction:a,onClick:(o=t.id,function(t){e.onRequestSort(t,o)})},t.label):t.label);var o})))};wr.propTypes={onRequestSort:y.a.func.isRequired,order:y.a.string.isRequired,orderBy:y.a.string.isRequired};var kr=wr;function Or(e){return(Or="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Sr(e){return function(e){if(Array.isArray(e)){for(var t=0,a=new Array(e.length);t<e.length;t++)a[t]=e[t];return a}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function jr(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function Ar(e){return(Ar=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Tr(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function xr(e,t){return(xr=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Cr(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var Pr=function(e){function t(e){var a,n,r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=this,r=Ar(t).call(this,e),a=!r||"object"!==Or(r)&&"function"!=typeof r?Tr(n):r,Cr(Tr(a),"isApplicationGroupSharingEnabled",function(){var e=a.context.settings.applicationSharingEnabled;a.setState({isApplicationSharingEnabled:e})}),Cr(Tr(a),"updateApps",function(){Gn.a.all().then(function(e){var t=new Map;e.list.map(function(e){return t.set(e.applicationId,e)}),a.setState({data:t})}).catch(function(e){var t=e.status;404===t?a.setState({notFound:!0}):401===t&&(window.location="/store-new/services/configs")})}),Cr(Tr(a),"handleRequestSort",function(e,t){var n=a.state,r=n.orderBy,o=n.order,i="desc";r===t&&"desc"===o&&(i="asc"),a.setState({order:i,orderBy:r})}),Cr(Tr(a),"handleChangePage",function(e,t){a.setState({page:t})}),Cr(Tr(a),"handleChangeRowsPerPage",function(e){a.setState({rowsPerPage:e.target.value})}),Cr(Tr(a),"handleClose",function(){a.setState({open:!1})}),Cr(Tr(a),"handleClickOpen",function(){a.setState({open:!0})}),a.state={order:"asc",orderBy:"name",data:null,page:0,rowsPerPage:10,open:!1,isApplicationSharingEnabled:!0},a.handleAppDelete=a.handleAppDelete.bind(Tr(a)),a}var a,o,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&xr(e,t)}(t,n["Component"]),a=t,(o=[{key:"componentDidMount",value:function(){this.updateApps(),this.isApplicationGroupSharingEnabled()}},{key:"handleAppDelete",value:function(e){var t=this,a=this.state.data,n=this.props.intl,r=e.currentTarget.getAttribute("data-appId"),o=new Map(Sr(a)),i=o.get(r);i.deleting=!0,this.setState({data:o});var s=n.formatMessage({defaultMessage:"Application {name} deleted successfully!",id:"Applications.Listing.Listing.application.deleted.successfully"},{name:i.name});Gn.a.deleteApp(r).then(function(e){e&&(o.delete(r),bt.a.info(s),t.setState({data:o}))})}},{key:"render",value:function(){var e=this.state,t=e.data,a=e.order,n=e.orderBy,o=e.rowsPerPage,i=e.page,l=e.open,c=e.isApplicationSharingEnabled;if(!t)return r.a.createElement(He.a,null);var u=this.props,p=u.classes,d=u.theme,m=u.intl,f=d.palette.getContrastText(d.palette.background.paper);return r.a.createElement("main",{className:p.content},r.a.createElement("div",{className:p.root},r.a.createElement("div",{className:p.mainIconWrapper},r.a.createElement(Ie.a,{strokeColor:f,width:42,height:42,icon:"applications"})),r.a.createElement("div",{className:p.mainTitleWrapper},r.a.createElement(I.a,{variant:"h4",className:p.mainTitle},r.a.createElement(s.a,{id:"Applications.Listing.Listing.applications",defaultMessage:"Applications"})),t&&r.a.createElement(I.a,{variant:"caption",gutterBottom:!0,align:"left"},0===t.count?r.a.createElement(r.a.Fragment,null,r.a.createElement(s.a,{id:"Applications.Listing.Listing.no.applications.created",defaultMessage:"No Applications created"})):r.a.createElement(r.a.Fragment,null,r.a.createElement(s.a,{id:"Applications.Listing.Listing.displaying",defaultMessage:"Displaying"})," ",t.count," ",1===t.count?r.a.createElement(s.a,{id:"Applications.Listing.Listing.displaying.application",defaultMessage:"Application"}):r.a.createElement(s.a,{id:"Applications.Listing.Listing.displaying.applications",defaultMessage:"Applications"})))),(0!==t.size||l)&&r.a.createElement("div",{className:p.createLinkWrapper},r.a.createElement(cr,{updateApps:this.updateApps,open:l,handleClickOpen:this.handleClickOpen,handleClose:this.handleClose}))),r.a.createElement($a.a,{container:!0,spacing:0,justify:"center"},r.a.createElement($a.a,{item:!0,xs:12},t.size>0?r.a.createElement("div",{className:p.appContent},r.a.createElement(I.a,{variant:"caption",gutterBottom:!0,align:"left"},r.a.createElement(s.a,{id:"Applications.Listing.Listing.logical.description",defaultMessage:"An application is a logical collection of APIs. \n                                        Applications allow you to use a single access token to invoke a\n                                         collection of APIs and to subscribe to one API multiple times pre-created\n                                          and allows unlimited access by default."})),r.a.createElement(Da.a,null,r.a.createElement(kr,{order:a,orderBy:n,onRequestSort:this.handleRequestSort}),r.a.createElement(br,{handleAppDelete:this.handleAppDelete,apps:t,page:i,rowsPerPage:o,order:a,orderBy:n,isApplicationSharingEnabled:c})),r.a.createElement(Vn.a,{component:"div",count:t.size,rowsPerPage:o,rowsPerPageOptions:[5,10,15],labelRowsPerPage:"Show",page:i,backIconButtonProps:{"aria-label":"Previous Page"},nextIconButtonProps:{"aria-label":"Next Page"},onChangePage:this.handleChangePage,onChangeRowsPerPage:this.handleChangeRowsPerPage})):r.a.createElement(ur.a,{classes:p,handleClick:this.handleClickOpen,heading:"Create New Application",caption:m.formatMessage({defaultMessage:"An application is a logical collection of APIs. Applications\n                                    allow you to use a single access token to invoke a collection\n                                    of APIs and to subscribe to one API multiple times with different\n                                    SLA levels. The DefaultApplication is pre-created and allows unlimited\n                                    access by default.",id:"Applications.Listing.Listing.generic.display.description"}),buttonText:m.formatMessage({defaultMessage:"ADD NEW APPLICATION",id:"Applications.Listing.Listing.generic.display.description"})}))))}}])&&jr(a.prototype,o),i&&jr(a,i),t}();Cr(Pr,"contextType",m.c),Pr.propTypes={classes:y.a.shape({root:y.a.string,flex:y.a.string,content:y.a.string,mainIconWrapper:y.a.string,mainTitle:y.a.string,mainTitleWrapper:y.a.string,createLinkWrapper:y.a.string,appContent:y.a.string}).isRequired,theme:y.a.shape({}).isRequired,intl:y.a.func.isRequired};var Rr=Object(s.e)(Object(P.a)(function(e){return{card:{minWidth:275,paddingBottom:20},bullet:{display:"inline-block",margin:"0 2px",transform:"scale(0.8)"},pos:{marginBottom:12,color:e.palette.text.secondary},createAppWrapper:{textDecoration:"none"},divider:{marginBottom:20},createButton:{textDecoration:"none",display:"inline-block",marginLeft:20,alignSelf:"flex-start"},titleWrapper:{display:"flex"},content:{flexGrow:1},root:{height:70,background:e.palette.background.paper,borderBottom:"solid 1px "+e.palette.grey.A200,display:"flex",alignItems:"center"},mainIconWrapper:{paddingTop:13,paddingLeft:35,paddingRight:20},mainTitle:{paddingTop:10},createLinkWrapper:{paddingLeft:2*e.spacing.unit},appContent:{paddingLeft:4*e.spacing.unit,paddingTop:e.spacing.unit,width:e.custom.contentAreaWidth},dialogContainer:{width:1e3,padding:2*e.spacing.unit}}},{withTheme:!0})(Pr)),Ir=a(1206),_r=(a(785),a(1210),a(786)),Mr=(a(878),a(861)),Nr=a(862),Lr=a(863),qr=a(864),Dr=a(348),Br=a(650),Wr=a(652);function Ur(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),a.push.apply(a,n)}return a}function Kr(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function Fr(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var a=[],n=!0,r=!1,o=void 0;try{for(var i,s=e[Symbol.iterator]();!(n=(i=s.next()).done)&&(a.push(i.value),!t||a.length!==t);n=!0);}catch(e){r=!0,o=e}finally{try{n||null==s.return||s.return()}finally{if(r)throw o}}return a}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var zr=function(e){var t=Fr(Object(n.useState)(!0),2),a=t[0],o=t[1],i=function(t,a){var n=e.accessTokenRequest,r=e.updateAccessTokenRequest,i=function(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?Ur(a,!0).forEach(function(t){Kr(e,t,a[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):Ur(a).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))})}return e}({},n),s=a.target;switch(t){case"infiniteValidity":o(s.checked),s.checked?i.timeout=-1:i.timeout=null;break;case"timeout":i.timeout=s.value}r(i)},s=e.classes,l=e.intl,c=e.accessTokenRequest;return r.a.createElement(r.a.Fragment,null,r.a.createElement(Dr.a,{margin:"normal",className:s.FormControl},r.a.createElement(Br.a,{control:r.a.createElement(Wr.a,{checked:a,onChange:function(e){return i("infiniteValidity",e)},value:c.timeout}),label:"Api Key with infinite validity period"}),!a&&r.a.createElement(G.a,{required:!0,label:l.formatMessage({defaultMessage:"Api Key validity period",id:"Shared.AppsAndKeys.Tokens.apikey"}),InputLabelProps:{shrink:!0},helperText:l.formatMessage({defaultMessage:"You can set an expiration period to determine the validity period of the token after generation. Set this as -1 to ensure that the apikey never expires.",id:"Shared.AppsAndKeys.Tokens.apikey.set.validity"}),fullWidth:!0,name:"timeout",onChange:function(e){return i("timeout",e)},placeholder:l.formatMessage({defaultMessage:"Enter time in seconds",id:"Shared.AppsAndKeys.Tokens.apikey.enter.time"}),value:c.timeout,autoFocus:!0,className:s.inputText})))};zr.contextTypes={intl:y.a.shape({}).isRequired};var Vr=Object(s.e)(Object(P.a)(function(e){return{FormControl:{"margin-bottom":"8px",width:"100%",padding:"0px 10px"}}})(zr)),Gr=a(355),Hr=a(868);function Yr(e){return(Yr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Jr(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function Qr(e){return(Qr=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function $r(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Xr(e,t){return(Xr=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Zr(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var eo=function(e){function t(e){var a,n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=this,r=Qr(t).call(this,e),a=!r||"object"!==Yr(r)&&"function"!=typeof r?$r(n):r,Zr($r(a),"handleClose",function(){a.setState(function(){return{open:!1,accessTokenRequest:{timeout:-1}}})}),Zr($r(a),"handleClickOpen",function(){a.setState(function(){return{open:!0,showToken:!1}})}),Zr($r(a),"updateAccessTokenRequest",function(e){a.setState(function(){return{accessTokenRequest:e}})}),Zr($r(a),"generateKeys",function(e,t){(new te.a).generateApiKey(e.appId,t,a.state.accessTokenRequest.timeout).then(function(e){console.log("Non empty response received");var t={accessToken:e.body.apikey,validityTime:e.body.validityTime,isOauth:!1};a.setState(function(){return{apikey:t,open:!0,showToken:!0}})}).catch(function(e){404===e.status&&a.setState({notFound:!0})})});var o=a.props;o.classes,o.selectedApp,o.keyType;return a.state={apikey:null,open:!1,showToken:!1,accessTokenRequest:{timeout:-1}},a}var a,n,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Xr(e,t)}(t,r.a.Component),a=t,(n=[{key:"render",value:function(){var e=this,t=this.props,a=t.classes,n=t.selectedApp,o=t.keyType,i=this.state,l=i.showToken,c=i.accessTokenRequest,u=i.open,p=i.apikey;return r.a.createElement("div",{className:a.root},r.a.createElement(I.a,{variant:"h5",className:a.keyTitle},o+" ",r.a.createElement(s.a,{defaultMessage:"Api Key",id:"Shared.AppsAndKeys.TokenManager.ApiKey"})),r.a.createElement(Hr.a,{row:!0,className:a.formGroup},r.a.createElement($a.a,{container:!0,spacing:3},r.a.createElement($a.a,{item:!0,xs:4}),r.a.createElement($a.a,{item:!0,xs:2,className:a.gridWrapper},r.a.createElement(Gr.a,{className:a.formLabel},"Generate Api Key")),r.a.createElement($a.a,{item:!0,xs:3},r.a.createElement(k.a,{variant:"contained",color:"primary",className:a.button,onClick:this.handleClickOpen},"Generate Key")))),r.a.createElement(Hn.a,{open:u,onClose:this.handleClose,"aria-labelledby":"form-dialog-title"},r.a.createElement(qr.a,{id:"responsive-dialog-title",className:a.dialogTitle},"Generate Api Key"),r.a.createElement(Nr.a,{className:a.dialogContent},r.a.createElement(Lr.a,null,!l&&r.a.createElement(Vr,{updateAccessTokenRequest:this.updateAccessTokenRequest,accessTokenRequest:c}),l&&r.a.createElement(_r.a,{token:p}))),r.a.createElement(Mr.a,null,!l&&r.a.createElement(k.a,{onClick:function(){return e.generateKeys(n,o)},disabled:!c.timeout,color:"primary"},r.a.createElement(s.a,{id:"Shared.AppsAndKeys.ViewKeys.consumer.generate.btn",defaultMessage:"Generate"})),r.a.createElement(k.a,{onClick:this.handleClose,color:"primary",autoFocus:!0},r.a.createElement(s.a,{id:"Shared.AppsAndKeys.ViewKeys.consumer.close.btn",defaultMessage:"Close"})))))}}])&&Jr(a.prototype,n),o&&Jr(a,o),t}();eo.propTypes={classes:y.a.shape({}).isRequired,selectedApp:y.a.shape({tokenType:y.a.string.isRequired}).isRequired,keyType:y.a.string.isRequired,intl:y.a.shape({formatMessage:y.a.func}).isRequired};var to=Object(s.e)(Object(P.a)(function(e){return{root:{padding:3*e.spacing.unit},button:{marginLeft:5*e.spacing.unit,padding:"10px"},tokenSection:{marginTop:2*e.spacing.unit,marginBottom:2*e.spacing.unit},margin:{marginRight:2*e.spacing.unit},keyTitle:{textTransform:"uppercase"},keyConfigWrapper:{flexDirection:"column",marginBottom:0},generateWrapper:{padding:"10px","margin-inline-end":"auto"},paper:{display:"flex",marginTop:2*e.spacing.unit,marginBottom:2*e.spacing.unit,marginLeft:10*e.spacing.unit},formLabel:{"align-self":"center","font-size":"large"},dialogTitle:{padding:"24px 24px 0px"},dialogContent:{padding:"0 24px 0px"},formGroup:{padding:"20px"},gridWrapper:{"align-self":"center"}}})(eo)),ao=a(1203),no=a(873),ro=a(855),oo=a(856),io=a(857),so=a(360);function lo(e){return(lo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function co(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function uo(e,t){return!t||"object"!==lo(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function po(e){return(po=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function mo(e,t){return(mo=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var fo=function(e){function t(e){var a;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(a=uo(this,po(t).call(this,e))).state={selectedPolicy:null},a}var a,n,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&mo(e,t)}(t,r.a.Component),a=t,(n=[{key:"componentDidMount",value:function(){var e=this.props.policies;this.setState({selectedPolicy:e[0]})}},{key:"render",value:function(){var e=this,t=this.props,a=t.classes,n=t.policies,o=t.apiId,i=t.handleSubscribe,l=t.applicationId,c=this.state.selectedPolicy;return n&&r.a.createElement("div",{className:a.root},r.a.createElement(so.a,{value:c,onChange:function(t){e.setState({selectedPolicy:t.target.value})}},n.map(function(e){return r.a.createElement(j.a,{value:e},e)})),r.a.createElement(Qn.a,{resourcePath:Qn.c.SUBSCRIPTIONS,resourceMethod:Qn.b.POST},r.a.createElement(k.a,{variant:"contained",size:"small",color:"primary",className:a.buttonGap,onClick:function(){i(l,o,c)}},r.a.createElement(s.a,{defaultMessage:"Subscribe",id:"Apis.Listing.SubscriptionPolicySelect.subscribe"}))))}}])&&co(a.prototype,n),o&&co(a,o),t}();fo.propTypes={classes:y.a.object.isRequired};var ho=Object(P.a)(function(e){return{root:{display:"flex"},buttonGap:{marginLeft:20}}},{withTheme:!0})(fo);function go(e){return(go="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function yo(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function bo(e,t){return!t||"object"!==go(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function vo(e){return(vo=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Eo(e,t){return(Eo=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var wo=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),bo(this,vo(t).apply(this,arguments))}var a,n,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Eo(e,t)}(t,r.a.Component),a=t,(n=[{key:"render",value:function(){if(this.props.apisNotFound)return r.a.createElement(Na.a,null);var e=this.props,t=(e.theme,e.unsubscribedAPIList),a=e.handleSubscribe,n=e.applicationId,o=e.intl,i=[{name:"Id",label:o.formatMessage({id:"Apis.Listing.APIList.id",defaultMessage:"Id"}),options:{display:"excluded"}},{name:"Name",label:o.formatMessage({id:"Apis.Listing.APIList.name",defaultMessage:"Name"})},{name:"Policy",label:o.formatMessage({id:"Apis.Listing.APIList.policy",defaultMessage:"Policy"}),options:{customBodyRender:function(e,t,o){if(t.rowData){var i=t.rowData[0],s=e;return r.a.createElement(ho,{key:i,policies:s,apiId:i,handleSubscribe:function(e,t,n){return a(e,t,n)},applicationId:n})}}}}];return r.a.createElement(ft.a,{title:r.a.createElement(s.a,{defaultMessage:"APIs",id:"Apis.Listing.APIList.apis"}),data:t,columns:i,options:{selectableRows:!1}})}}])&&yo(a.prototype,n),o&&yo(a,o),t}();wo.propTypes={classes:y.a.object.isRequired,theme:y.a.object.isRequired,intl:y.a.shape({formatMessage:y.a.func}).isRequired};var ko=Object(s.e)(Object(P.a)(function(e){return{root:{display:"flex"},buttonGap:{marginRight:10}}},{withTheme:!0})(wo)),Oo=a(879);function So(e){return(So="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function jo(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function Ao(e){return(Ao=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function To(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function xo(e,t){return(xo=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Co=function(e){function t(e){var a,n,r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=this,(a=!(r=Ao(t).call(this,e))||"object"!==So(r)&&"function"!=typeof r?To(n):r).state={openMenu:!1},a.handleRequestClose=a.handleRequestClose.bind(To(a)),a.handleRequestOpen=a.handleRequestOpen.bind(To(a)),a.handleRequestDelete=a.handleRequestDelete.bind(To(a)),a}var a,n,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&xo(e,t)}(t,r.a.Component),a=t,(n=[{key:"handleRequestClose",value:function(){this.setState({openMenu:!1})}},{key:"handleRequestOpen",value:function(){this.setState({openMenu:!0})}},{key:"handleRequestDelete",value:function(e){var t=this.props.handleSubscriptionDelete;this.setState({openMenu:!1}),t&&t(e)}},{key:"render",value:function(){var e=this,t=this.props.subscription,a=t.apiInfo,n=t.status,o=t.throttlingPolicy,i=t.subscriptionId,l=t.apiId,c=this.state.openMenu,u=r.a.createElement(b.a,{to:"/apis/"+l},a.name);return r.a.createElement(Ua.a,{hover:!0},r.a.createElement(Wa.a,{style:{paddingLeft:0}},u),r.a.createElement(Wa.a,null,o),r.a.createElement(Wa.a,null,n),r.a.createElement(Wa.a,null,r.a.createElement("div",null,r.a.createElement(Qn.a,{resourcePath:Qn.c.SINGLE_SUBSCRIPTION,resourceMethod:Qn.b.DELETE},r.a.createElement(w.a,{"aria-label":"Delete",onClick:this.handleRequestOpen},r.a.createElement(C.a,null,"delete"))),r.a.createElement(Hn.a,{open:c,transition:Yn.a},r.a.createElement(qr.a,null,"Confirm"),r.a.createElement(Nr.a,null,r.a.createElement(Lr.a,null,r.a.createElement(s.a,{id:"Applications.Details.SubscriptionTableData.delete.subscription.confirmation",defaultMessage:"Are you sure you want to delete the Subscription?"}))),r.a.createElement(Mr.a,null,r.a.createElement(k.a,{dense:!0,color:"primary",onClick:this.handleRequestClose},r.a.createElement(s.a,{id:"Applications.Details.SubscriptionTableData.cancel",defaultMessage:"Cancel"})),r.a.createElement(k.a,{dense:!0,color:"primary",onClick:function(){return e.handleRequestDelete(i)}},r.a.createElement(s.a,{id:"Applications.Details.SubscriptionTableData.delete",defaultMessage:"Delete"})))))))}}])&&jo(a.prototype,n),o&&jo(a,o),t}();Co.propTypes={subscription:y.a.shape({apiInfo:y.a.shape({name:y.a.string.isRequired}).isRequired,throttlingPolicy:y.a.string.isRequired,subscriptionId:y.a.string.isRequired,apiId:y.a.string.isRequired,status:y.a.string.isRequired}).isRequired,handleSubscriptionDelete:y.a.func.isRequired};var Po=Co;function Ro(e){return(Ro="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Io(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function _o(e){return(_o=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Mo(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function No(e,t){return(No=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Lo=function(e){function t(e){var a,n,r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=this,(a=!(r=_o(t).call(this,e))||"object"!==Ro(r)&&"function"!=typeof r?Mo(n):r).state={subscriptions:null,unsubscribedAPIList:[],apisNotFound:!1,subscriptionsNotFound:!1,isAuthorize:!0},a.handleSubscriptionDelete=a.handleSubscriptionDelete.bind(Mo(a)),a.updateSubscriptions=a.updateSubscriptions.bind(Mo(a)),a.updateUnsubscribedAPIsList=a.updateUnsubscribedAPIsList.bind(Mo(a)),a.handleSubscribe=a.handleSubscribe.bind(Mo(a)),a.getIdsOfSubscribedEntities=a.getIdsOfSubscribedEntities.bind(Mo(a)),a}var a,n,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&No(e,t)}(t,r.a.Component),a=t,(n=[{key:"componentDidMount",value:function(){var e=this.props.match.params.applicationId;this.updateSubscriptions(e),this.updateUnsubscribedAPIsList()}},{key:"getIdsOfSubscribedEntities",value:function(){return this.state.subscriptions.map(function(e){return e.apiId}).filter(Boolean)}},{key:"updateSubscriptions",value:function(e){var t=this;(new Oo.a).getSubscriptions(null,e).then(function(e){t.setState({subscriptions:e.body.list},t.updateUnsubscribedAPIsList())}).catch(function(e){var a=e.status;404===a?t.setState({subscriptionsNotFound:!0}):401===a&&t.setState({isAuthorize:!1})})}},{key:"handleSubscriptionDelete",value:function(e){var t=this;(new Oo.a).deleteSubscription(e).then(function(a){if(200!==a.status)return console.log(a),void bt.a.info("Something went wrong while deleting the Subscription!");bt.a.info("Subscription deleted successfully!");var n=t.state.subscriptions;for(var r in n)if(Object.prototype.hasOwnProperty.call(n,r)&&n[r].subscriptionId===e){n.splice(r,1);break}t.setState({subscriptions:n},t.updateUnsubscribedAPIsList())}).catch(function(e){401===e.status&&t.setState({isAuthorize:!1}),bt.a.error("Error occurred when deleting subscription")})}},{key:"updateUnsubscribedAPIsList",value:function(){var e=this;(new te.a).getAllAPIs().then(function(t){var a=t.obj.list,n=e.getIdsOfSubscribedEntities(),r=a.filter(function(e){return!n.includes(e.id)&&!e.advertiseInfo.advertised}).map(function(e){return{Id:e.id,Policy:e.throttlingPolicies,Name:e.name}});e.setState({unsubscribedAPIList:r})}).catch(function(t){var a=t.status;404===a?e.setState({apisNotFound:!0}):401===a&&e.setState({isAuthorize:!1})})}},{key:"handleSubscribe",value:function(e,t,a){var n=this,r=new te.a,o=this.props.intl;a?r.subscribe(t,e,a).then(function(t){201!==t.status?bt.a.error(o.formatMessage({id:"Applications.Details.Subscriptions.error.occurred.during.subscription.not.201",defaultMessage:"Error occurred during subscription"})):(bt.a.info(o.formatMessage({id:"Applications.Details.Subscriptions.subscription.successful",defaultMessage:"Subscription successful"})),n.updateSubscriptions(e))}).catch(function(e){401===e.status&&n.setState({isAuthorize:!1}),bt.a.error(o.formatMessage({id:"Applications.Details.Subscriptions.error.occurred.during.subscription",defaultMessage:"Error occurred during subscription"}))}):bt.a.error(o.formatMessage({id:"Applications.Details.Subscriptions.select.a.subscription.policy",defaultMessage:"Select a subscription policy"}))}},{key:"render",value:function(){var e=this;this.state.isAuthorize||(window.location="/store-new/services/configs");var t=this.state,a=t.subscriptions,n=t.unsubscribedAPIList,o=t.apisNotFound,i=t.subscriptionsNotFound,l=this.props.match.params.applicationId,c=this.props.classes;return a?r.a.createElement("div",{className:c.root},r.a.createElement(I.a,{variant:"h5",className:c.keyTitle},r.a.createElement(s.a,{id:"Applications.Details.Subscriptions.subscription.management",defaultMessage:"Subscription Management"})),r.a.createElement($a.a,{container:!0,className:"tab-grid",spacing:2},r.a.createElement($a.a,{item:!0,xs:6,className:c.cardGrid},r.a.createElement(ko,{apisNotFound:o,unsubscribedAPIList:n,applicationId:l,handleSubscribe:function(t,a,n){return e.handleSubscribe(t,a,n)}})),r.a.createElement($a.a,{item:!0,xs:6,xl:10},r.a.createElement(ro.a,{className:c.card},r.a.createElement(oo.a,null,r.a.createElement(I.a,{variant:"h6",gutterBottom:!0,className:c.cardTitle},r.a.createElement(s.a,{id:"Applications.Details.Subscriptions.subscriptions",defaultMessage:"Subscriptions"}))),r.a.createElement(A.a,null),r.a.createElement(io.a,{className:c.cardContent},i?r.a.createElement(Na.a,null):r.a.createElement(Da.a,null,r.a.createElement(vr.a,null,r.a.createElement(Ua.a,null,r.a.createElement(Wa.a,{className:c.firstCell},r.a.createElement(s.a,{id:"Applications.Details.Subscriptions.api.name",defaultMessage:"API Name"})),r.a.createElement(Wa.a,null,r.a.createElement(s.a,{id:"Applications.Details.Subscriptions\n                                                                    .subscription.tier",defaultMessage:"Subscription Tier"})),r.a.createElement(Wa.a,null,r.a.createElement(s.a,{id:"Applications.Details.Subscriptions.Status",defaultMessage:"Status"})),r.a.createElement(Wa.a,null,r.a.createElement(s.a,{id:"Applications.Details.Subscriptions.action",defaultMessage:"Action"})))),r.a.createElement(Ba.a,null,a&&a.map(function(t){return r.a.createElement(Po,{key:t.subscriptionId,subscription:t,handleSubscriptionDelete:e.handleSubscriptionDelete})})))))))):"Loading . . . "}}])&&Io(a.prototype,n),o&&Io(a,o),t}();Lo.propTypes={classes:y.a.shape({}).isRequired,match:y.a.shape({params:y.a.shape({application_uuid:y.a.string.isRequired}).isRequired}).isRequired,intl:y.a.func.isRequired};var qo=Object(s.e)(Object(P.a)(function(e){return{root:{padding:3*e.spacing.unit},keyTitle:{textTransform:"uppercase",marginBottom:2*e.spacing.unit},firstCell:{paddingLeft:0},cardTitle:{paddingLeft:2*e.spacing.unit},cardContent:{minHeight:200}}})(Lo));function Do(e){return(Do="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Bo(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var a=[],n=!0,r=!1,o=void 0;try{for(var i,s=e[Symbol.iterator]();!(n=(i=s.next()).done)&&(a.push(i.value),!t||a.length!==t);n=!0);}catch(e){r=!0,o=e}finally{try{n||null==s.return||s.return()}finally{if(r)throw o}}return a}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function Wo(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function Uo(e){return(Uo=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Ko(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Fo(e,t){return(Fo=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var zo=function(e){function t(e){var a,n,r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=this,(a=!(r=Uo(t).call(this,e))||"object"!==Do(r)&&"function"!=typeof r?Ko(n):r).state={notFound:!1,showOverview:!0},a.toggleOverview=a.toggleOverview.bind(Ko(a)),a}var a,n,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Fo(e,t)}(t,r.a.Component),a=t,(n=[{key:"componentDidMount",value:function(){var e=this,t=new te.a,a=this.props.applicationId;t.getApplication(a).then(function(e){var a=t.getTierByName(e.obj.throttlingPolicy,"application");return Promise.all([e,a])}).then(function(t){var a=Bo(t.map(function(e){return e.obj}),2),n=a[0],r=a[1];e.setState({application:n,tierDescription:r.description})}).catch(function(t){404===t.status&&e.setState({notFound:!0})})}},{key:"toggleOverview",value:function(e){"boolean"==typeof e?this.setState({showOverview:e}):this.setState(function(e){return{showOverview:!e.showOverview}})}},{key:"render",value:function(){var e=this.props,t=e.classes,a=e.theme,n=e.resourceNotFountMessage,o=e.applicationId,i=this.state,l=i.application,c=i.tierDescription,u=i.showOverview;return i.notFound?r.a.createElement(Na.a,{message:n}):l?r.a.createElement("div",{className:t.infoBarMain},r.a.createElement("div",{className:t.root},r.a.createElement(b.a,{to:"/applications",className:t.backLink},r.a.createElement(C.a,{className:t.backIcon},"keyboard_arrow_left"),r.a.createElement("div",{className:t.backText},r.a.createElement(s.a,{id:"Applications.Details.InfoBar.new.back.to",defaultMessage:"BACK TO"})," ",r.a.createElement("br",null),r.a.createElement(s.a,{id:"Applications.Details.InfoBar.listing",defaultMessage:"LISTING"}))),r.a.createElement(qe.a,{height:70}),r.a.createElement("div",{style:{marginLeft:a.spacing.unit}},r.a.createElement(I.a,{variant:"h4"},l.name),r.a.createElement(I.a,{variant:"caption",gutterBottom:!0,align:"left"},l.subscriptionCount," ",r.a.createElement(s.a,{id:"Applications.Details.InfoBar.subscriptions",defaultMessage:"Subscriptions"})))),u&&r.a.createElement(qa.a,{in:u,timeout:"auto",unmountOnExit:!0},r.a.createElement("div",{className:t.infoContent},r.a.createElement("div",{className:t.contentWrapper},r.a.createElement("div",{className:t.topBar},r.a.createElement("div",{className:t.infoItem},r.a.createElement(I.a,{variant:"subtitle1",gutterBottom:!0},l.throttlingPolicy," ",r.a.createElement(I.a,{variant:"caption"},"(",c," ",")")),r.a.createElement(I.a,{variant:"caption",gutterBottom:!0,align:"left"},r.a.createElement(s.a,{id:"Applications.Details.InfoBar.throttling.tier",defaultMessage:"Throttling Tier"}))),Object.entries(l.attributes).map(function(e){var a=Bo(e,2),n=a[0],o=a[1];return""!==o?r.a.createElement("div",{className:t.infoItem,key:n},r.a.createElement(I.a,{variant:"subtitle1",gutterBottom:!0},n," : ",r.a.createElement(I.a,{variant:"caption"},o))):null}),r.a.createElement("div",{className:t.infoItem},"APPROVED"===l.status?r.a.createElement(C.a,null,"check_circle"):r.a.createElement(I.a,{variant:"subtitle1",gutterBottom:!0},l.status),r.a.createElement(I.a,{variant:"caption",gutterBottom:!0,align:"left"},r.a.createElement(s.a,{id:"Applications.Details.InfoBar.lifecycle.status",defaultMessage:"Lifecycle Status "}))),r.a.createElement("div",{className:t.infoItem},r.a.createElement(b.a,{to:"/application/edit/"+o,className:t.button},r.a.createElement(k.a,{variant:"contained",color:"default"},r.a.createElement(s.a,{id:"Applications.Details.InfoBar.edit",defaultMessage:"Edit"}))))),r.a.createElement(I.a,null,l.description)))),r.a.createElement("div",{className:t.infoContentBottom},r.a.createElement("div",{className:t.contentWrapper,onClick:this.toggleOverview,onKeyDown:this.toggleOverview},r.a.createElement("div",{className:t.buttonView},u?r.a.createElement(I.a,{className:t.buttonOverviewText},r.a.createElement(s.a,{id:"Applications.Details.InfoBar.less",defaultMessage:"LESS"})):r.a.createElement(I.a,{className:t.buttonOverviewText},r.a.createElement(s.a,{id:"Applications.Details.InfoBar.more",defaultMessage:"MORE"})),u?r.a.createElement(C.a,null,"arrow_drop_up_circle"):r.a.createElement(C.a,null,"arrow_drop_down_circle"))))):r.a.createElement(He.a,null)}}])&&Wo(a.prototype,n),o&&Wo(a,o),t}();zo.propTypes={classes:y.a.shape({}).isRequired,theme:y.a.shape({}).isRequired,resourceNotFountMessage:y.a.string.isRequired,applicationId:y.a.string.isRequired};var Vo=Object(P.a)(function(e){return{root:{height:70,background:e.palette.background.paper,borderBottom:"solid 1px "+e.palette.grey.A200,display:"flex",alignItems:"center"},backIcon:{color:e.palette.primary.main,fontSize:56,cursor:"pointer"},backText:{color:e.palette.primary.main,cursor:"pointer",fontFamily:e.typography.fontFamily},apiIcon:{height:45,marginTop:10,marginRight:10},starRate:{fontSize:70,color:e.custom.starColor},starRateMy:{fontSize:70,color:e.palette.primary.main},rateLink:{cursor:"pointer",lineHeight:"70px"},topBar:{display:"flex",paddingBottom:2*e.spacing.unit},infoContent:{background:e.palette.background.paper,padding:3*e.spacing.unit},infoContentBottom:{background:e.palette.grey[200],borderBottom:"solid 1px "+e.palette.grey.A200,color:e.palette.grey[600]},infoItem:{marginRight:4*e.spacing.unit},bootstrapRoot:{padding:0,"label + &":{marginTop:3*e.spacing.unit}},bootstrapInput:{borderRadius:4,backgroundColor:e.palette.common.white,border:"1px solid #ced4da",padding:"5px 12px",width:350,transition:e.transitions.create(["border-color","box-shadow"]),fontFamily:["-apple-system","BlinkMacSystemFont",'"Segoe UI"',"Roboto",'"Helvetica Neue"',"Arial","sans-serif",'"Apple Color Emoji"','"Segoe UI Emoji"','"Segoe UI Symbol"'].join(","),"&:focus":{borderColor:"#80bdff",boxShadow:"0 0 0 0.2rem rgba(0,123,255,.25)"}},epWrapper:{display:"flex"},prodLabel:{lineHeight:"30px",marginRight:10,width:100},contentWrapper:{width:e.custom.contentAreaWidth-e.custom.leftMenuWidth,alignItems:"center"},ratingBoxWrapper:{position:"relative",display:"flex",alignItems:"center"},ratingBox:{backgroundColor:e.palette.background.leftMenu,border:"1px solid rgb(71, 211, 244)",borderRadius:"5px",display:"flex",position:"absolute",top:14,height:"40px",color:e.palette.getContrastText(e.palette.background.leftMenu),alignItems:"center",left:"0",paddingLeft:"5px",paddingRight:"5px"},userRating:{display:"flex",alignItems:"flex-end"},verticalDividerStar:{borderLeft:"solid 1px "+e.palette.grey.A200,height:40,marginRight:e.spacing.unit,marginLeft:e.spacing.unit},backLink:{alignItems:"center",textDecoration:"none",display:"flex"},ratingSummery:{alignItems:"center",flexDirection:"column",display:"flex"},infoBarMain:{width:"100%"},buttonView:{textAlign:"left",justifyContent:"left",display:"flex",paddingLeft:2*e.spacing.unit,cursor:"pointer"},buttonOverviewText:{display:"inline-block",paddingTop:3},button:{textDecoration:"none"}}},{withTheme:!0})(zo);function Go(e){return(Go="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ho(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function Yo(e){return(Yo=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Jo(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Qo(e,t){return(Qo=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function $o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var Xo=function(e){function t(e){var a,n,o;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=this,o=Yo(t).call(this,e),a=!o||"object"!==Go(o)&&"function"!=typeof o?Jo(n):o,$o(Jo(a),"handleMenuSelect",function(e){var t=a.props,n=t.history,r=t.match;n.push({pathname:"/applications/"+r.params.application_uuid+"/"+e}),a.setState({active:e})}),$o(Jo(a),"handleChange",function(e,t){a.setState({secScheme:t})}),$o(Jo(a),"renderManager",function(e,t){return r.a.createElement(N.a,null,r.a.createElement(ao.a,{value:a.state.secScheme,onChange:a.handleChange,indicatorColor:"primary",textColor:"primary",variant:"fullWidth",scrollButtons:"auto"},r.a.createElement(no.a,{label:"Oauth",value:"Oauth"}),r.a.createElement(no.a,{label:"ApiKey",value:"ApiKey"})),"Oauth"===a.state.secScheme&&r.a.createElement("div",null,r.a.createElement(Ir.a,{keyType:t,selectedApp:{appId:e.applicationId,label:e.name,tokenType:e.tokenType,owner:e.owner}})),"ApiKey"===a.state.secScheme&&r.a.createElement("div",null,r.a.createElement(to,{keyType:t,selectedApp:{appId:e.applicationId,label:e.name,tokenType:e.tokenType,owner:e.owner}})))}),a.state={application:null,active:"overview",secScheme:"Oauth"},a}var a,o,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Qo(e,t)}(t,n["Component"]),a=t,(o=[{key:"componentDidMount",value:function(){var e=this,t=this.props.match;(new te.a).getApplication(t.params.application_uuid).then(function(t){e.setState({application:t.obj})}).catch(function(t){404===t.status&&e.setState({notFound:!0})})}},{key:"render",value:function(){var e=this,t=this.props,a=t.classes,n=t.match,o=this.state,i=o.notFound,s=o.application,l=o.active,c="/applications/"+n.params.application_uuid+"/productionkeys";return i?r.a.createElement(Na.a,null):s?r.a.createElement(r.a.Fragment,null,r.a.createElement("div",{className:a.LeftMenu},r.a.createElement(b.a,{to:"/applications"},r.a.createElement("div",{className:a.leftLInkMain},r.a.createElement(Ie.a,{width:52,height:52,icon:"applications"}))),r.a.createElement(_a,{text:"productionkeys",handleMenuSelect:this.handleMenuSelect,active:l}),r.a.createElement(_a,{text:"sandBoxkeys",handleMenuSelect:this.handleMenuSelect,active:l}),r.a.createElement(_a,{text:"subscriptions",handleMenuSelect:this.handleMenuSelect,active:l})),r.a.createElement("div",{className:a.content},r.a.createElement(Vo,{applicationId:n.params.application_uuid,innerRef:function(t){return e.infoBar=t}}),r.a.createElement("div",{className:a.contentDown},r.a.createElement(D.d,null,r.a.createElement(D.a,{exact:!0,from:"/applications/:applicationId",to:c}),r.a.createElement(D.b,{path:"/applications/:applicationId/productionkeys",component:function(){return e.renderManager(s,"PRODUCTION")}}),r.a.createElement(D.b,{path:"/applications/:applicationId/sandBoxkeys",component:function(){return e.renderManager(s,"SANDBOX")}}),r.a.createElement(D.b,{path:"/applications/:applicationId/subscriptions",component:qo}),r.a.createElement(D.b,{component:Ma}))))):r.a.createElement(He.a,null)}}])&&Ho(a.prototype,o),i&&Ho(a,i),t}();Xo.propTypes={classes:y.a.shape({}).isRequired,theme:y.a.shape({}).isRequired,match:y.a.shape({params:y.a.shape({application_uuid:y.a.string.isRequired}).isRequired}).isRequired,history:y.a.shape({push:y.a.func.isRequired}).isRequired};var Zo=Object(P.a)(function(e){return{LeftMenu:{backgroundColor:e.palette.background.leftMenu,width:e.custom.leftMenuWidth,textAlign:"center",fontFamily:e.typography.fontFamily,position:"absolute",bottom:0,left:0,top:0},leftLInkMain:{borderRight:"solid 1px "+e.palette.background.leftMenu,paddingBottom:e.spacing.unit,paddingTop:e.spacing.unit,cursor:"pointer",backgroundColor:e.palette.background.leftMenuActive,color:e.palette.getContrastText(e.palette.background.leftMenuActive),textDecoration:"none"},detailsContent:{display:"flex",flex:1},content:{display:"flex",flex:1,flexDirection:"column",marginLeft:e.custom.leftMenuWidth,paddingBottom:3*e.spacing.unit},contentDown:{width:e.custom.contentAreaWidth}}},{withTheme:!0})(Xo),ei=function(){return r.a.createElement(D.d,null,r.a.createElement(D.b,{exact:!0,path:"/applications",component:Rr}),r.a.createElement(D.b,{path:"/applications/:application_uuid/",component:Zo}),r.a.createElement(D.b,{component:Ma}))},ti=a(787),ai=a.n(ti);function ni(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var a=[],n=!0,r=!1,o=void 0;try{for(var i,s=e[Symbol.iterator]();!(n=(i=s.next()).done)&&(a.push(i.value),!t||a.length!==t);n=!0);}catch(e){r=!0,o=e}finally{try{n||null==s.return||s.return()}finally{if(r)throw o}}return a}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function ri(e){var t=e.theme,a=ni(Object(n.useState)(0),2),o=a[0],i=a[1],s=ni(Object(n.useState)("left"),2),l=s[0],c=s[1],u=t.custom.landingPage.carousel.slides,p=e.classes;return r.a.createElement("div",{className:p.root},r.a.createElement("div",{className:Ce()(p.arrowLeft,p.arrows),onClick:function(){c("right"),i(0===o?u.length-1:o-1)}},r.a.createElement(C.a,null,"chevron_left")),r.a.createElement("div",{className:Ce()(p.arrowRight,p.arrows),onClick:function(){c("left"),o===u.length-1?i(0):i(o+1)}},r.a.createElement(C.a,null,"chevron_right")),u.map(function(e,t){return r.a.createElement(Yn.a,{direction:l,in:o===t,timeout:{enter:500,exit:0},mountOnEnter:!0,unmountOnExit:!0},r.a.createElement("div",{className:p.slideContainer},r.a.createElement("div",{className:Ce()(p.slideContentWrapper,"slideContentWrapper")},r.a.createElement("div",{className:Ce()(p.slideContentTitle,"slideContentTitle")},r.a.createElement(ai.a,{html:e.title})),r.a.createElement("div",{className:p.slideContentContent},r.a.createElement(ai.a,{html:e.content}))),r.a.createElement("img",{className:p.imageBox,src:e.src})))}))}ri.propTypes={classes:y.a.object.isRequired,theme:y.a.object.isRequired};var oi=Object(P.a)(function(e){return{root:{position:"relative",display:"flex"},imageBox:{width:"100%",height:"auto"},arrows:{position:"absolute",zIndex:2,display:"flex",flex:1,height:"100%",background:"#00000044",justifyContent:"center",alignItems:"center",cursor:"pointer","& span":{fontSize:60,color:e.palette.getContrastText("#000000")}},arrowLeft:{left:0},arrowRight:{right:0},slideContainer:{width:"100%",zIndex:1,display:"flex",flex:1,justifyContent:"center"},slideContentWrapper:{position:"absolute",background:"#00000044",color:e.palette.getContrastText("#000000"),bottom:0,padding:2*e.spacing.unit},slideContentTitle:{fontWeight:e.typography.fontWeightLight,fontSize:e.typography.h3.fontSize},slideContentContent:{fontWeight:e.typography.fontWeightLight,fontSize:e.typography.body1.fontSize}}},{withTheme:!0})(ri);function ii(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var a=[],n=!0,r=!1,o=void 0;try{for(var i,s=e[Symbol.iterator]();!(n=(i=s.next()).done)&&(a.push(i.value),!t||a.length!==t);n=!0);}catch(e){r=!0,o=e}finally{try{n||null==s.return||s.return()}finally{if(r)throw o}}return a}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function si(e){var t=ii(Object(n.useState)(null),2),a=t[0],o=t[1],i=ii(Object(n.useState)(!1),2),s=i[0],l=i[1],c=e.tag,u=e.classes,p=e.maxCount,d=e.intl,f=Object(n.useContext)(m.c);return Object(n.useEffect)(function(){(new te.a).getAllAPIs({query:"tag:"+c,limit:p}).then(function(e){o(e.obj)}).catch(function(e){var t=e.status,a=e.response,n=d.formatMessage({defaultMessage:"Invalid tenant domain",id:"LandingPage.ApisWithTag.invalid.tenant.domain"});a&&901300===a.body.code&&(f.setTenantDomain("INVALID"),bt.a.error(n)),404===t&&l(!0)})},[]),s?r.a.createElement(Na.a,null):a&&r.a.createElement("div",{className:u.tagedApisWrapper},a.list.map(function(e){return r.a.createElement(Yt,{api:e,key:e.id})}))}si.propTypes={classes:y.a.object.isRequired,tag:y.a.object.isRequired,maxCount:y.a.object.isRequired};var li=Object(s.e)(Object(P.a)(function(e){return{tagedApisWrapper:{display:"flex",flexDirection:"row",flexWrap:"wrap"}}})(si));function ci(e){var t=e.classes,a=e.theme,n=e.index,o=a.custom.landingPage.parallax.content[n];return r.a.createElement(r.a.Fragment,null,r.a.createElement("div",{className:t.parallax,style:{backgroundImage:'url("'+o.src+'")'}},r.a.createElement("div",{className:Ce()(t.slideContentWrapper,"slideContentWrapper")},r.a.createElement("div",{className:Ce()(t.slideContentTitle,"slideContentTitle")},r.a.createElement(ai.a,{html:o.title})),r.a.createElement("div",{className:t.slideContentContent},r.a.createElement(ai.a,{html:o.content})))))}ci.propTypes={classes:y.a.object.isRequired,index:y.a.object.isRequired,theme:y.a.object.isRequired};var ui=Object(P.a)(function(e){return{parallax:{minHeight:200,backgroundAttachment:"fixed",backgroundPosition:"center",backgroundRepeat:"no-repeat",backgroundSize:"cover",position:"relative",marginTop:3*e.spacing.unit,marginBottom:3*e.spacing.unit},slideContentWrapper:{position:"absolute",background:"#00000044",color:e.palette.getContrastText("#000000"),top:3*e.spacing.unit,padding:2*e.spacing.unit,margin:"0 100px",alignItem:"center"},slideContentTitle:{fontWeight:e.typography.fontWeightLight,fontSize:e.typography.h3.fontSize},slideContentContent:{fontWeight:e.typography.fontWeightLight,fontSize:e.typography.body1.fontSize}}},{withTheme:!0})(ci);function pi(e){return(pi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function di(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function mi(e){return(mi=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function fi(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function hi(e,t){return(hi=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function gi(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var yi=function(e){function t(e){var a,n,r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=this,r=mi(t).call(this,e),a=!r||"object"!==pi(r)&&"function"!=typeof r?fi(n):r,gi(fi(a),"handleChange",function(e){return function(t){a.setState(gi({},e,t.target.value))}}),a}var a,n,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&hi(e,t)}(t,r.a.Component),a=t,(n=[{key:"render",value:function(){var e=this.props,t=e.classes,a=e.intl;return r.a.createElement(ro.a,{className:t.card},r.a.createElement(io.a,null,r.a.createElement(G.a,{id:"standard-full-width",label:a.formatMessage({defaultMessage:"Name",id:"LandingPage.Contact.name"}),style:{margin:8},placeholder:a.formatMessage({defaultMessage:"Enter your name",id:"LandingPage.Contact.name.placeholder"}),helperText:a.formatMessage({defaultMessage:"Let us know who you are.",id:"LandingPage.Contact.name.helperText"}),fullWidth:!0,margin:"normal",InputLabelProps:{shrink:!0}}),r.a.createElement(G.a,{id:"standard-full-width",label:a.formatMessage({defaultMessage:"Email",id:"LandingPage.Contact.email"}),style:{margin:8},placeholder:a.formatMessage({defaultMessage:"Enter your email",id:"LandingPage.Contact.email.placeholder"}),helperText:a.formatMessage({defaultMessage:"Let us know your email address.",id:"LandingPage.Contact.email.helperText"}),fullWidth:!0,margin:"normal",InputLabelProps:{shrink:!0}}),r.a.createElement(G.a,{id:"standard-full-width",label:a.formatMessage({defaultMessage:"Message",id:"LandingPage.Contact.message"}),style:{margin:8},placeholder:a.formatMessage({defaultMessage:"Briefly wirte your message.",id:"LandingPage.Contact.message.placeholder"}),helperText:a.formatMessage({defaultMessage:"Let us know what you think",id:"LandingPage.Contact.message.helperText"}),fullWidth:!0,multiline:!0,margin:"normal",InputLabelProps:{shrink:!0}})),r.a.createElement(oo.a,null,r.a.createElement(k.a,{variant:"contained",color:"primary"},r.a.createElement(s.a,{id:"LandingPage.Contact.submit",defaultMessage:"Submit"}))))}}])&&di(a.prototype,n),o&&di(a,o),t}();yi.propTypes={classes:y.a.object.isRequired,intl:y.a.shape({formatMessage:y.a.func}).isRequired};var bi=Object(s.e)(Object(P.a)({card:{minWidth:275},bullet:{display:"inline-block",margin:"0 2px",transform:"scale(0.8)"},title:{fontSize:14},pos:{marginBottom:12}})(yi));function vi(e){var t=e.classes,a=e.theme,n=(a.custom.listByTag,a.custom.landingPage.carousel.active),o=a.custom.landingPage.listByTag.active,i=a.custom.landingPage.parallax.active,s=a.custom.landingPage.listByTag.content;return r.a.createElement("div",{className:t.superRoot},r.a.createElement("div",{className:t.root},r.a.createElement($a.a,{container:!0,spacing:3},n&&r.a.createElement($a.a,{item:!0,xs:12},r.a.createElement(oi,null)),o&&s.length>0&&r.a.createElement($a.a,{item:!0,xs:12},r.a.createElement(I.a,{variant:"h2",gutterBottom:!0},s[0].title),s[0].description&&r.a.createElement(I.a,{variant:"body1",gutterBottom:!0},s[0].description),r.a.createElement(li,{tag:s[0].tag,maxCount:s[1].maxCount})))),i&&r.a.createElement("div",{className:t.fullWidthBack},r.a.createElement(ui,{index:0})),r.a.createElement("div",{className:t.root},r.a.createElement($a.a,{container:!0,spacing:3},o&&s.length>1&&r.a.createElement($a.a,{item:!0,xs:12},r.a.createElement(I.a,{variant:"h2",gutterBottom:!0},s[1].title),s[1].description&&r.a.createElement(I.a,{variant:"body1",gutterBottom:!0},s[1].description),r.a.createElement(li,{tag:s[1].tag,maxCount:s[1].maxCount})))),i&&r.a.createElement("div",{className:t.fullWidthBack},r.a.createElement(ui,{index:1})),r.a.createElement("div",{className:t.root},r.a.createElement(I.a,{variant:"h2",gutterBottom:!0},"Contact Us"),r.a.createElement(bi,null)))}vi.propTypes={classes:y.a.object.isRequired,theme:y.a.object.isRequired};var Ei=Object(P.a)(function(e){return{root:{flexGrow:1,margin:"0 100px",alignItem:"center"},fullWidthBack:{},superRoot:{display:"flex",flexDirection:"column"}}},{withTheme:!0})(vi);function wi(e){return(wi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ki(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function Oi(e,t){return!t||"object"!==wi(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Si(e){return(Si=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ji(e,t){return(ji=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Ai=c.a.app.context+"/services/configs";var Ti=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),Oi(this,Si(t).apply(this,arguments))}var a,n,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ji(e,t)}(t,r.a.Component),a=t,(n=[{key:"componentDidMount",value:function(){window.location=Ai}},{key:"render",value:function(){return r.a.createElement(s.a,{id:"Login.RedirectToLogin.you.will.be.redirected.to",defaultMessage:"You will be redirected to {page}",values:{page:Ai}})}}])&&ki(a.prototype,n),o&&ki(a,o),t}();function xi(e){return(xi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ci(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var a=[],n=!0,r=!1,o=void 0;try{for(var i,s=e[Symbol.iterator]();!(n=(i=s.next()).done)&&(a.push(i.value),!t||a.length!==t);n=!0);}catch(e){r=!0,o=e}finally{try{n||null==s.return||s.return()}finally{if(r)throw o}}return a}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function Pi(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),a.push.apply(a,n)}return a}function Ri(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?Pi(a,!0).forEach(function(t){Li(e,t,a[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):Pi(a).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))})}return e}function Ii(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function _i(e){return(_i=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Mi(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Ni(e,t){return(Ni=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Li(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function qi(){return(qi=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}function Di(e){return r.a.createElement(Yn.a,qi({direction:"up"},e))}var Bi=function(e){function t(e){var a,n,r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=this,r=_i(t).call(this,e),a=!r||"object"!==xi(r)&&"function"!=typeof r?Mi(n):r,Li(Mi(a),"updateApplicationRequest",function(e){a.setState({applicationRequest:e})}),Li(Mi(a),"handleAttributesChange",function(e){return function(t){var n=a.state.applicationRequest;n.attributes[e]=t.target.value,a.setState({applicationRequest:n})}}),Li(Mi(a),"getAttributeValue",function(e){return a.state.applicationRequest.attributes[e]}),Li(Mi(a),"isRequiredAttribute",function(e){var t=a.state.allAppAttributes;if(t)for(var n=0;n<t.length;n++)if(t[n].attribute===e)return"true"===t[n].required;return!1}),Li(Mi(a),"validateAttributes",function(e){var t=a.props.intl,n=a.state.allAppAttributes,r=!0,o=Object.keys(e);if(n.length>0)for(var i=0;i<n.length;i++)"true"===n[i].required&&"false"===n[i].hidden&&(-1===o.indexOf(n[i].attribute)?r=!1:o.indexOf(n[i].attribute)>-1&&(!e[n[i].attribute]||""===e[n[i].attribute].trim())&&(r=!1));return r?Promise.resolve(!0):Promise.reject(new Error(t.formatMessage({id:"Applications.Edit.app.update.error.no.required.attribute",defaultMessage:"Please fill all required application attributes"})))}),Li(Mi(a),"handleSubmit",function(){var e=a.state.applicationRequest,t=a.props,n=t.history,r=t.intl,o=new te.a;a.validateName(e.name).then(function(){return a.validateAttributes(e.attributes)}).then(function(){return o.updateApplication(e,null)}).then(function(e){var t="/applications/"+e.body.applicationId;n.push(t),bt.a.info(r.formatMessage({id:"Applications.Edit.app.updated.success",defaultMessage:"Application updated successfully"})),console.log("Application updated successfully.")}).catch(function(e){var t=e.response;if(t&&t.body){var a=t.body.description||"Error while updating the application";bt.a.error(a)}else bt.a.error(e.message);console.error("Error while updating the application")})}),Li(Mi(a),"handleClose",function(){a.setState({open:!1})}),Li(Mi(a),"handleClickOpen",function(){a.setState({open:!0})}),Li(Mi(a),"validateName",function(e){var t=a.props.intl;return e&&""!==e.trim()?(a.setState({isNameValid:!0}),Promise.resolve(!0)):(a.setState({isNameValid:!1}),Promise.reject(new Error(t.formatMessage({id:"Applications.Edit.app.name.required",defaultMessage:"Application name is required"}))))}),Li(Mi(a),"handleAddChip",function(e,t){var n=Ri({},a.state.applicationRequest),r=t||[];(r=r.slice()).push(e),n.groups=r,a.setState({applicationRequest:n})}),Li(Mi(a),"handleDeleteChip",function(e,t,n){var r=Ri({},a.state.applicationRequest),o=n||[];o=o.filter(function(t){return t!==e}),r.groups=o,a.setState({applicationRequest:r})}),Li(Mi(a),"isApplicationGroupSharingEnabled",function(){var e=a.context.settings.applicationSharingEnabled;a.setState({isApplicationSharingEnabled:e})}),a.state={open:!0,applicationRequest:{applicationId:null,name:"",throttlingPolicy:"",description:"",groups:null,tokenType:null,attributes:{}},isNameValid:!0,throttlingPolicyList:[],allAppAttributes:[],isApplicationSharingEnabled:!0},a}var a,n,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ni(e,t)}(t,r.a.Component),a=t,(n=[{key:"componentDidMount",value:function(){var e=this,t=this.props.match,a=this.state.applicationRequest,n=Gn.a.get(t.params.application_id),r=new te.a,o=r.getAllTiers("application"),i=r.getAllApplicationAttributes();Promise.all([n,o,i]).then(function(t){var n=Ci(t,3),r=n[0],o=n[1],i=n[2],s=[];o.body.list.map(function(e){return s.push(e.name)});var l=[];i.body.list.map(function(e){return l.push(e)});var c=Ri({},a);c.applicationId=r.applicationId,c.name=r.name,c.throttlingPolicy=r.throttlingPolicy,c.description=r.description,c.groups=r.groups,c.tokenType=r.tokenType,c.attributes=r.attributes,e.setState({applicationRequest:c,throttlingPolicyList:s,allAppAttributes:l})}).catch(function(t){404===t.status&&e.setState({notFound:!0})}),this.isApplicationGroupSharingEnabled()}},{key:"render",value:function(){var e=this.state,t=e.throttlingPolicyList,a=e.applicationRequest,n=e.isNameValid,o=e.open,i=e.allAppAttributes,l=e.isApplicationSharingEnabled,c=this.props.classes;return r.a.createElement(r.a.Fragment,null,r.a.createElement(Hn.a,{fullScreen:!0,open:o,onClose:this.handleClose,TransitionComponent:Di},r.a.createElement(v.a,{className:c.appBar},r.a.createElement(E.a,null,r.a.createElement(b.a,{to:"/applications",className:c.buttonRight},r.a.createElement(w.a,{color:"inherit",onClick:this.handleClose,"aria-label":"Close"},r.a.createElement(C.a,null,"close"))),r.a.createElement(I.a,{variant:"h6",color:"inherit",className:c.flex},r.a.createElement(s.a,{id:"Applications.Edit.edit.app",defaultMessage:"Edit Application"})))),r.a.createElement("div",{className:c.createFormWrapper},r.a.createElement(Jn.a,{throttlingPolicyList:t,applicationRequest:a,updateApplicationRequest:this.updateApplicationRequest,validateName:this.validateName,isNameValid:n,allAppAttributes:i,handleAttributesChange:this.handleAttributesChange,isRequiredAttribute:this.isRequiredAttribute,getAttributeValue:this.getAttributeValue,isApplicationSharingEnabled:l,handleDeleteChip:this.handleDeleteChip,handleAddChip:this.handleAddChip})),r.a.createElement("div",{className:c.buttonWrapper},r.a.createElement(b.a,{to:"/applications",className:c.link},r.a.createElement(k.a,{variant:"outlined",className:c.button},r.a.createElement(s.a,{id:"Applications.Edit.cancel",defaultMessage:"CANCEL"}))),r.a.createElement(k.a,{variant:"contained",className:c.button,color:"primary",onClick:this.handleSubmit},r.a.createElement(s.a,{id:"Applications.Edit.update.app",defaultMessage:"UPDATE APPLICATION"})))))}}])&&Ii(a.prototype,n),o&&Ii(a,o),t}();Li(Bi,"contextType",m.c),Bi.propTypes={classes:y.a.shape({}).isRequired,intl:y.a.shape({}).isRequired,match:y.a.shape({params:y.a.shape({application_uuid:y.a.string.isRequired}).isRequired}).isRequired,history:y.a.shape({push:y.a.func.isRequired}).isRequired};var Wi=Object(s.e)(Object(P.a)(function(e){return{appBar:{position:"relative",backgroundColor:e.palette.background.appBar,color:e.palette.getContrastText(e.palette.background.appBar)},buttonRight:{textDecoration:"none",color:"white"},flex:{flex:1},button:{marginRight:2*e.spacing.unit},link:{textDecoration:"none"},buttonWrapper:{paddingLeft:7*e.spacing.unit},createFormWrapper:{paddingLeft:5*e.spacing.unit}}})(Bi));function Ui(e){return e.custom.landingPage.active?"/home":!1===e.custom.landingPage.active&&e.custom.tagWiseMode?"/apiGroups":"apis"}var Ki=Object(P.a)({},{withTheme:!0})(function(e){var t=e.isAuthenticated,a=e.isUserFound,n=e.theme;return r.a.createElement(D.d,null,r.a.createElement(D.a,{exact:!0,from:"/",to:Ui(n)}),r.a.createElement(D.b,{path:"/home",component:Ei}),r.a.createElement(D.b,{path:"/api-groups",component:ut}),r.a.createElement(D.b,{path:"/applications",component:ei}),r.a.createElement(D.b,{path:"/(apis|api-products)",component:zn}),t?r.a.createElement(r.a.Fragment,null,r.a.createElement(D.b,{path:"/applications",component:ei}),r.a.createElement(D.b,{path:"/application/create",component:Jn.a}),r.a.createElement(D.b,{path:"/application/edit/:application_id",component:Wi})):[a?r.a.createElement(r.a.Fragment,null,r.a.createElement(D.b,{path:"/applications",component:La}),r.a.createElement(D.b,{path:"/application/create",component:La}),r.a.createElement(D.b,{path:"/application/edit/:application_id",component:La})):r.a.createElement(r.a.Fragment,null,r.a.createElement(D.b,{path:"/applications",component:Ti}),r.a.createElement(D.b,{path:"/application/create",component:Ti}),r.a.createElement(D.b,{path:"/application/edit/:application_id",component:Ti}))],r.a.createElement(D.b,{component:Ma}))});function Fi(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var a=[],n=!0,r=!1,o=void 0;try{for(var i,s=e[Symbol.iterator]();!(n=(i=s.next()).done)&&(a.push(i.value),!t||a.length!==t);n=!0);}catch(e){r=!0,o=e}finally{try{n||null==s.return||s.return()}finally{if(r)throw o}}return a}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var zi=function(e){var t=Object(n.useContext)(m.c),a=Fi(Object(n.useState)([]),2),o=a[0],i=a[1],s=e.tenantList,l=e.classes,c=e.theme;return Object(n.useEffect)(function(){s||0===s.length?(new d).getTenantsByState().then(function(e){i(e.body.list)}).catch(function(e){console.error("error when getting tenants "+e)}):i(s)},[]),r.a.createElement("div",{className:l.root},r.a.createElement($a.a,{container:!0,md:4,justify:"left",spacing:0,className:l.list},o.map(function(e){var a=e.domain;return r.a.createElement($a.a,{item:!0,xs:12,md:12,className:l.listItem},r.a.createElement(b.a,{style:{textDecoration:"none"},to:"/apis?tenant=".concat(a),onClick:function(){return t.setTenantDomain(a)}},r.a.createElement(N.a,{elevation:0,square:!0,className:l.paper},r.a.createElement(I.a,{noWrap:!0,style:{fontSize:c.typography.h5.fontSize,fontWeight:c.typography.h1.fontWeight}},a))))})))};zi.propTypes={classes:y.a.shape({root:y.a.string,list:y.a.string,paper:y.a.string,listItem:y.a.string}).isRequired,tenantList:y.a.arrayOf(y.a.string).isRequired,theme:y.a.shape({typography:y.a.shape({h5:y.a.shape({fontSize:y.a.string.isRequired}).isRequired,h1:y.a.shape({fontWeight:y.a.string.isRequired}).isRequired}).isRequired}).isRequired};var Vi=Object(P.a)(function(e){return{root:{flexGrow:1,display:"flex",background:e.palette.background.default,height:"100%"},paper:{padding:2*e.spacing.unit,textAlign:"left",color:e.palette.text.secondary,margin:"auto","-webkit-box-shadow":"0px 0px 2px 0px rgba(0,0,0,0.5)","-moz-box-shadow":"0px 0px 2px 0px rgba(0,0,0,0.5)","box-shadow":"0px 0px 2px 0px rgba(0,0,0,0.5)","&:hover":{background:e.palette.grey[100],cursor:"grab"}},list:{background:e.palette.background.paper,display:"block",margin:"auto","margin-top":"100px",padding:"".concat(3*e.spacing.unit,"px ").concat(2*e.spacing.unit,"px"),overflow:scroll},listItem:{margin:"auto"}}},{withTheme:!0})(zi);function Gi(e){return(Gi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Hi(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),a.push.apply(a,n)}return a}function Yi(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?Hi(a,!0).forEach(function(t){Zi(e,t,a[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):Hi(a).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))})}return e}function Ji(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function Qi(e){return(Qi=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function $i(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Xi(e,t){return(Xi=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Zi(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}a.d(t,"default",function(){return ts});var es=navigator.languages&&navigator.languages[0]||navigator.language||navigator.userLanguage,ts=function(e){function t(e){var a,n,r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=this,(a=!(r=Qi(t).call(this,e))||"object"!==Gi(r)&&"function"!=typeof r?$i(n):r).state={messages:{},userResolved:!1,scopesFound:!1,tenantList:null},a.environments=[],a.loadLocale=a.loadLocale.bind($i(a)),a}var o,l,u;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Xi(e,t)}(t,n["Component"]),o=t,(l=[{key:"componentDidMount",value:function(){var e=this,t=this.props.location.search,a=this.context.setTenantDomain,n=h.a.parse(t).tenant,r=new d;n?this.setState({tenantList:[]},a(n)):r.getTenantsByState().then(function(t){e.setState({tenantList:t.body.list})}).catch(function(e){console.error("error when getting tenants "+e)}),ve.a.getConfigs().environments.then(function(t){e.environments=t.data.environments}).catch(function(e){console.error("Error while receiving environment configurations : ",e)});var o=be.a.getUser();o?o.scopes.includes("apim:subscribe")?this.setState({userResolved:!0,scopesFound:!0}):(console.log("No relevant scopes found, redirecting to Anonymous View"),this.setState({userResolved:!0})):be.a.getUserFromToken().then(function(t){null!=t?t.scopes.includes("apim:subscribe")?e.setState({userResolved:!0,scopesFound:!0}):(console.log("No relevant scopes found, redirecting to Anonymous View"),e.setState({userResolved:!0})):(console.log("User returned with null, redirect to Anonymous View"),e.setState({userResolved:!0}))}).catch(function(t){console.log("Error: "+t+",redirecting to Anonymous View"),e.setState({userResolved:!0})})}},{key:"loadLocale",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"en";fetch("".concat(c.a.app.context,"/site/public/locales/").concat(t,".json")).then(function(e){return e.json()}).then(function(n){Object(s.c)(a(1302)("./".concat(t))),e.setState({messages:Object(s.d)(Yi({},n))})})}},{key:"handleEnvironmentQueryParam",value:function(){var e=Yi({},this.props.location).search.replace(/^\?/,""),t=i.a.parse(e).environment;if(!t||p.a.getEnvironment()===t)return t;var a=p.a.getEnvironmentID(this.environments,t);if(-1===a)return t;var n=this.environments[a];return p.a.setEnvironment(n),t}},{key:"render",value:function(){var e=this.state,t=e.userResolved,a=e.tenantList,n=this.context.tenantDomain;if(!t)return r.a.createElement(He.a,null);var o=this.state,i=o.scopesFound,l=o.messages,c=be.a.getUser(),u=!1;return i&&c&&(u=!0),null===a?r.a.createElement(He.a,null):"INVALID"===n||a.length>0&&!u&&null===n?r.a.createElement(Vi,{tenantList:a}):r.a.createElement(s.b,{locale:es,messages:l},r.a.createElement(Ge,null,r.a.createElement(Ki,{isAuthenticated:u,isUserFound:c})))}}])&&Ji(o.prototype,l),u&&Ji(o,u),t}();Zi(ts,"contextType",m.c),ts.propTypes={location:y.a.shape({search:y.a.string.isRequired}).isRequired}},662:function(e,t,a){"use strict";a.d(t,"a",function(){return i});var n=a(0),r=a.n(n),o=a(113),i=r.a.createContext({active:"overview",handleMenuSelect:function(){},api:null,applications:null,subscribedApplications:[],applicationsAvailable:[],updateSubscriptionData:function(){},apiType:o.a.API_TYPE})},667:function(e,t,a){"use strict";a.d(t,"a",function(){return p});var n=a(0),r=a.n(n);function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}function s(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function l(e,t){return!t||"object"!==o(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function u(e,t){return(u=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var p=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),l(this,c(t).apply(this,arguments))}var a,n,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&u(e,t)}(t,r.a.Component),a=t,(n=[{key:"render",value:function(){var e=void 0!==this.props.strokeColor?this.props.strokeColor:"#8b8e95",t=void 0!==this.props.width?this.props.width:32,a=void 0!==this.props.height?this.props.height:32,n=void 0!==this.props.icon?this.props.icon:"api",o=void 0!==this.props.className?this.props.className:"";return"overview"===n?r.a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:t,height:a,viewBox:"0 0 8.5272856 8.5114363",id:"svg8",className:o},r.a.createElement("g",{id:"layer2",transform:"translate(79.857 -62.367)"},r.a.createElement("g",{id:"g5726",transform:"matrix(.9999 0 0 1.00321 -86.091 38.578)",fill:"none",stroke:e,strokeLinejoin:"round"},r.a.createElement("path",{id:"path5717",transform:"scale(.26458)",d:"m 29.705078,90.623047 c -2.846282,0 -5.138672,2.290437 -5.138672,5.136719 V 111.5293 c 0,2.84628 2.29239,5.13867 5.138672,5.13867 h 17.177734 l -4.591796,-4.74219 a 8.7230968,9.0089885 0 0 1 -10.539063,-1.41406 8.7230968,9.0089885 0 0 1 0,-12.740236 8.7230968,9.0089885 0 0 1 6.296875,-2.638672 8.7230968,9.0089885 0 0 1 6.041016,2.638672 8.7230968,9.0089885 0 0 1 0,12.740236 8.7230968,9.0089885 0 0 1 -0.609375,0.5664 6.2078361,6.4112926 0 0 0 1.089843,-0.88671 6.2078361,6.4112926 0 0 0 1.50586,-2.53125 l 7.242187,7.47851 c 0.914205,-0.92665 1.480469,-2.19879 1.480469,-3.60937 V 95.759766 c 0,-2.846282 -2.29239,-5.136719 -5.138672,-5.136719 z",strokeWidth:"2"}),r.a.createElement("g",{transform:"scale(.88683 .9159) rotate(-45 -45.67 5.272)",id:"g5724",strokeWidth:"0.539"},r.a.createElement("circle",{id:"circle5720",cx:"-22.921",cy:"63.11",r:"2.603"}),r.a.createElement("path",{d:"m -89.15625,247.73828 v 13.91602 h 6.3125 V 247.74609 A 7,7 0 0 1 -86,248.5 a 7,7 0 0 1 -3.15625,-0.76172 z",transform:"scale(.26458)",id:"path5722",strokeWidth:"2.039"}))))):"api"===n?r.a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:t,height:a,viewBox:"0 0 8.4666662 8.466666",id:"svg8",className:o},r.a.createElement("g",{id:"layer2",transform:"translate(82.262 -41.963)"},r.a.createElement("g",{id:"g5764",transform:"matrix(.83117 0 0 .83117 193.242 4.456)",fill:e,fillOpacity:"0.933"},r.a.createElement("path",{id:"path5728",d:"m -326.92369,45.126027 c -0.0789,0 -0.14264,0.06373 -0.14264,0.142626 v 1.111562 a 3.9026041,3.9026041 0 0 0 -1.52651,0.635619 l -0.78859,-0.788582 c -0.0558,-0.05579 -0.14576,-0.05579 -0.20154,0 l -0.78084,0.78083 c -0.0558,0.05579 -0.0558,0.145751 0,0.201538 l 0.786,0.785998 a 3.9026041,3.9026041 0 0 0 -0.63098,1.529107 h -1.1136 c -0.0789,0 -0.14264,0.06373 -0.14264,0.142626 v 1.10381 c 0,0.07889 0.0637,0.142626 0.14264,0.142626 h 1.11154 a 3.9026041,3.9026041 0 0 0 0.63564,1.526522 l -0.7886,0.788582 c -0.0558,0.05579 -0.0558,0.145751 0,0.201539 l 0.78084,0.78083 c 0.0558,0.05579 0.14576,0.05579 0.20154,0 l 0.78599,-0.785998 a 3.9026041,3.9026041 0 0 0 1.52911,0.630968 v 1.113629 c 0,0.07889 0.0637,0.142626 0.14264,0.142626 h 1.10379 c 0.0789,0 0.14263,-0.06373 0.14263,-0.142626 v -1.11156 a 3.9026041,3.9026041 0 0 0 1.52652,-0.635622 l 0.78859,0.788583 c 0.0558,0.05579 0.14576,0.05579 0.20153,0 l 0.78084,-0.78083 c 0.0558,-0.05579 0.0558,-0.145751 0,-0.201539 l -0.786,-0.785997 a 3.9026041,3.9026041 0 0 0 0.63098,-1.529107 h 1.1136 c 0.0789,0 0.14264,-0.06373 0.14264,-0.142626 v -1.10381 c 0,-0.07889 -0.0637,-0.142626 -0.14264,-0.142626 h -1.11154 a 3.9026041,3.9026041 0 0 0 -0.63563,-1.526522 l 0.78859,-0.788583 c 0.0558,-0.05579 0.0558,-0.145751 0,-0.201538 l -0.78084,-0.78083 c -0.0558,-0.05579 -0.14576,-0.05579 -0.20153,0 l -0.786,0.785997 a 3.9026041,3.9026041 0 0 0 -1.52911,-0.630967 v -1.113629 c 0,-0.07889 -0.0637,-0.142626 -0.14263,-0.142626 z m 0.55189,2.081527 a 3.0119976,3.0119976 0 0 1 3.01223,3.011702 3.0119976,3.0119976 0 0 1 -3.01223,3.01222 3.0119976,3.0119976 0 0 1 -3.01223,-3.01222 3.0119976,3.0119976 0 0 1 3.01223,-3.011702 z",strokeWidth:"0.937",strokeLinejoin:"round"}),r.a.createElement("g",{transform:"matrix(.01024 0 0 .01024 -328.341 48.178)",id:"g5762"},r.a.createElement("path",{d:"m 364.427,259.214 c -14.051,-14.052 -32.733,-21.79 -52.605,-21.79 -10.619,0 -20.888,2.23 -30.302,6.431 -1.076,-1.701 -2.341,-3.298 -3.799,-4.756 l -54.188,-54.188 95.825,-95.825 c 2.645,2.529 5.363,3.085 7.197,3.085 4.06,0 6.8,-2.535 7.308,-3.042 L 356.06,66.932 c 3.771,-3.771 5.563,-7.434 5.477,-11.197 -0.135,-5.897 -4.599,-9.968 -9.767,-14.683 -1.53,-1.395 -3.111,-2.838 -4.7,-4.426 -1.588,-1.588 -3.03,-3.169 -4.426,-4.699 -4.782,-5.243 -8.912,-9.771 -14.939,-9.771 -3.676,0 -7.255,1.793 -10.941,5.48 l -22.281,22.281 c -2.746,2.746 -5.103,9.066 0.122,14.426 l -95.821,95.821 -56.131,-56.131 c 4.012,-9.232 6.137,-19.269 6.137,-29.638 0,-19.872 -7.739,-38.555 -21.791,-52.607 C 112.95,7.737 94.27,0 74.4,0 67.768,0 61.168,0.881 54.785,2.62 c -2.513,0.684 -4.569,2.752 -5.238,5.268 -0.683,2.565 0.096,5.206 2.121,7.232 0.266,0.267 26.668,26.873 35.46,35.665 1.31,1.31 1.193,4.015 1.058,4.81 l -0.069,0.489 c -1.005,10.964 -3.034,24.215 -4.565,27.493 -3.303,1.581 -16.767,3.637 -27.911,4.633 l -0.149,-0.013 -0.302,0.072 c -0.082,0.009 -0.26,0.024 -0.508,0.024 -1.253,0 -3.096,-0.349 -4.758,-2.011 C 40.773,77.13 15.387,51.932 15.145,51.692 13.085,49.632 10.998,49.2 9.609,49.2 6.384,49.2 3.497,51.549 2.587,54.913 -4.357,80.592 3,108.214 21.786,127 c 14.051,14.051 32.733,21.79 52.606,21.79 10.369,0 20.407,-2.126 29.639,-6.137 l 56.131,56.131 -22.013,22.013 c -3.536,-1.853 -7.497,-2.839 -11.618,-2.839 -6.693,0 -12.972,2.592 -17.678,7.298 l -12.282,12.283 c -1.175,-0.166 -2.369,-0.254 -3.578,-0.254 -6.692,0 -12.971,2.592 -17.677,7.298 l -64.351,64.35 c -4.707,4.706 -7.299,10.984 -7.299,17.678 0,6.693 2.592,12.971 7.299,17.678 l 28.44,28.44 c 4.706,4.706 10.984,7.298 17.678,7.298 6.692,0 12.971,-2.592 17.677,-7.298 l 64.35,-64.35 c 4.707,-4.706 7.299,-10.984 7.299,-17.678 0,-1.209 -0.087,-2.404 -0.254,-3.579 l 12.282,-12.282 c 4.707,-4.707 7.299,-10.984 7.299,-17.678 0,-4.121 -0.986,-8.082 -2.839,-11.618 l 22.013,-22.013 54.188,54.188 c 1.458,1.457 3.055,2.723 4.755,3.798 -4.201,9.414 -6.431,19.684 -6.431,30.302 0,19.873 7.739,38.555 21.791,52.607 14.048,14.048 32.729,21.785 52.6,21.786 0.001,0 0.001,0 0.003,0 6.63,0 13.23,-0.882 19.614,-2.62 2.513,-0.684 4.568,-2.752 5.236,-5.268 0.682,-2.565 -0.097,-5.206 -2.122,-7.23 -0.266,-0.267 -26.667,-26.874 -35.459,-35.666 -1.31,-1.31 -1.193,-4.015 -1.058,-4.811 l 0.069,-0.489 c 1.005,-10.964 3.034,-24.214 4.565,-27.493 3.303,-1.581 16.767,-3.637 27.911,-4.633 l 0.149,0.013 0.301,-0.072 c 0.083,-0.009 0.261,-0.024 0.508,-0.024 1.253,0 3.097,0.349 4.76,2.012 9.15,9.151 34.536,34.349 34.778,34.589 2.06,2.06 4.147,2.493 5.536,2.493 3.225,0 6.112,-2.349 7.023,-5.713 6.945,-25.677 -0.413,-53.299 -19.2,-72.086 z m -278.221,70.499 -7.226,7.226 c -7.778,7.778 -20.506,7.778 -28.284,0 l -3.94,-3.941 c -7.778,-7.778 -7.778,-20.506 0,-28.284 l 7.226,-7.226 c 7.778,-7.778 20.506,-7.778 28.284,0 l 3.941,3.941 c 7.777,7.778 7.777,20.506 -10e-4,28.284 z m 159.465,-84.042 c -1.465,1.464 -3.385,2.197 -5.304,2.197 -1.92,0 -3.839,-0.732 -5.304,-2.197 l -88.414,-88.414 c -2.929,-2.929 -2.929,-7.678 0,-10.607 2.931,-2.93 7.679,-2.929 10.607,0 l 27.519,27.519 v 0 l 24.749,24.749 v 0 l 36.146,36.147 c 2.93,2.929 2.93,7.678 0.001,10.606 z",id:"path5730"}))))):"credentials"===n?r.a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:t,height:a,viewBox:"0 0 8.4568129 8.4735926",id:"svg8",className:o},r.a.createElement("g",{id:"layer2",transform:"translate(84.561 -80.202)"},r.a.createElement("g",{id:"g5840",transform:"matrix(.97554 0 0 1.03848 285.272 10.057)",stroke:e,strokeLinejoin:"round"},r.a.createElement("path",{d:"m -377.71033,67.636776 c -0.18693,0.0024 -0.33127,0.152437 -0.32364,0.3365 l 0.1328,3.200529 a 1.5884513,1.537829 30 0 0 -1.14659,1.521611 1.5884513,1.537829 30 0 0 1.63897,1.530685 1.5884513,1.537829 30 0 0 1.5103,-1.57034 1.5884513,1.537829 30 0 0 -1.2716,-1.491164 l -0.0444,-1.069873 c 0.009,4.49e-4 0.0187,0.0011 0.0282,9.4e-4 l 1.51839,-0.01912 c 0.18693,-0.0024 0.3318,-0.14008 0.32479,-0.308811 -0.007,-0.168715 -0.16312,-0.302674 -0.35006,-0.300316 l -1.51839,0.01912 c -0.009,2.43e-4 -0.0188,7.96e-4 -0.0281,0.0015 l -0.0632,-1.524018 c -0.008,-0.184093 -0.16428,-0.330359 -0.35121,-0.328012 z m -0.15716,4.17116 c 0.0384,0.15021 0.17816,0.260928 0.34097,0.258879 l 0.0562,-7.39e-4 c 0.1628,-0.0021 0.29322,-0.116162 0.31916,-0.267173 a 0.96441684,0.93368182 30 0 1 0.63403,0.864633 0.96441684,0.93368182 30 0 1 -0.91696,0.953425 0.96441684,0.93368182 30 0 1 -0.9951,-0.929348 0.96441684,0.93368182 30 0 1 0.56169,-0.879674 z",id:"path5821",fill:e,strokeWidth:"0.112"}),r.a.createElement("g",{transform:"translate(.33 3.109)",id:"g5834",fill:"none",fillOpacity:"0.933",strokeLinecap:"round"},r.a.createElement("rect",{id:"rect5823",width:"5.051",height:"4.49",x:"-376.083",y:"67.842",ry:"0.561",strokeWidth:"0.529",paintOrder:"stroke markers fill"}),r.a.createElement("path",{d:"m -78.912749,239.34375 c -3.530924,0 -4.173189,3.15882 -4.173189,4.33403 v 5.56441 h 11.314454 v -5.05373 c 0,-1.17521 -0.640312,-4.84471 -4.171236,-4.84471 z",transform:"matrix(.26458 0 0 .26458 -353.07 1.507)",id:"rect5825",strokeWidth:"3",paintOrder:"stroke markers fill"}))))):"comments"===n?r.a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:t,height:a,viewBox:"0 0 8.7174778 8.7393768",id:"svg8",className:o},r.a.createElement("g",{id:"layer2",transform:"translate(80.796 -108.97)"},r.a.createElement("g",{id:"g13332",transform:"matrix(.48727 0 0 .51349 -107.832 57.032)",strokeWidth:"1.058",stroke:e},r.a.createElement("path",{id:"path13328",transform:"matrix(.26458 0 0 .26458 0 0)",d:"m 243.51367,384.29102 c -17.56897,-4.6e-4 -31.81151,10.10057 -31.81055,22.56054 0.003,9.0356 7.60775,17.19823 19.32618,20.74414 3.03057,1.59565 7.0628,3.84176 10.09375,6.06446 5.3033,3.88905 11.66797,10.95898 11.66797,10.95898 0,0 -1.06089,-8.13231 2.12109,-12.72852 7.64227,-7.92086 20.13217,-12.99077 20.41016,-25.03906 9.6e-4,-12.45943 -14.24039,-22.56024 -31.8086,-22.56054 z",fill:"none",strokeWidth:"3.998",strokeLinecap:"round",strokeLinejoin:"round"}),r.a.createElement("path",{id:"path13330",d:"m 59.597397,107.94999 h 9.128125",fill:e})))):"test"===n?r.a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:t,height:a,viewBox:"0 0 8.4809208 8.4427107",id:"svg8",className:o},r.a.createElement("g",{id:"layer2",transform:"translate(79.833 -138.905)"},r.a.createElement("g",{id:"g5708",transform:"matrix(1.19734 0 0 1.0548 -89.665 113.54)",fill:"none",stroke:e,strokeWidth:"0.529"},r.a.createElement("path",{id:"path5704",d:"m 8.6244111,24.214646 3.2203959,3.9527 -3.439584,3.704167"}),r.a.createElement("path",{id:"path5706",d:"M 10.944689,31.765172 H 15.2945"})))):"docs"===n?r.a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:t,height:a,viewBox:"0 0 8.7235365 8.6012734",id:"svg8",className:o},r.a.createElement("g",{id:"layer2",transform:"translate(96.939 -160.005)"},r.a.createElement("g",{transform:"translate(-105.895 83.252)",id:"g13502"},r.a.createElement("path",{id:"path13492",d:"m 10.313394,76.75522 c -0.7481907,0 -1.3505042,0.649337 -1.3505042,1.455945 v 4.182632 c 0,0.678745 -0.1020124,1.244445 0.4789962,1.407278 C 9.413435,83.683074 9.396752,83.559883 9.396752,83.432019 v -4.182631 c 0,-0.806608 1.131481,-1.985112 1.879671,-1.985112 h 4.521713 c 0.118615,0 0.23288,0.01799 0.342341,0.04866 -0.151051,-0.626389 -0.675771,-0.557722 -1.30537,-0.557722 z",fill:e,strokeWidth:"0.5",strokeLinejoin:"round"}),r.a.createElement("rect",{ry:"1.456",y:"78.01",x:"10.207",height:"7.095",width:"7.223",id:"rect13494",fill:"none",stroke:e,strokeWidth:"0.5",strokeLinejoin:"round"}),r.a.createElement("path",{id:"path13496",d:"m 11.646271,80.642085 h 4.583673",fill:"none",stroke:e,strokeWidth:"0.529"}),r.a.createElement("path",{d:"m 11.646271,82.138794 h 4.583673",id:"path13498",fill:"none",stroke:e,strokeWidth:"0.529"}),r.a.createElement("path",{id:"path13500",d:"m 11.646271,83.541959 h 4.583673",fill:"none",stroke:e,strokeWidth:"0.529"})))):"sdk"===n?r.a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:t,height:a,viewBox:"0 0 8.3962813 8.4666231",id:"svg8",className:o},r.a.createElement("g",{id:"layer2",transform:"translate(99.686 -182.41)"},r.a.createElement("g",{id:"g4078",transform:"translate(-107.97 77.96)",fill:"none",stroke:e,strokeWidth:"0.417"},r.a.createElement("path",{d:"m 10.662658,104.66064 -2.1402122,4.09743 2.3487482,3.94685",id:"path4072",strokeLinecap:"round"}),r.a.createElement("path",{id:"path4074",d:"m 14.300967,104.66064 2.140212,4.09743 -2.348749,3.94685",strokeLinecap:"round"}),r.a.createElement("path",{d:"m 11.8866,112.70492 1.39896,-8.04428",id:"path4076"})))):"subscriptions"===n?r.a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:t,height:a,viewBox:"0 0 8.428752 8.6233671",id:"svg8",className:o},r.a.createElement("g",{id:"layer2",transform:"translate(105.022 -106.571)"},r.a.createElement("g",{transform:"matrix(.84802 0 0 .87176 -110.085 63.188)",id:"g5876",strokeLinecap:"round"},r.a.createElement("circle",{id:"circle5869",cx:"8.138",cy:"57.583",r:"1.497",fill:e,strokeWidth:"0.529",strokeLinejoin:"round"}),r.a.createElement("path",{d:"m 6.6416492,53.373914 c 2.7091648,-0.363432 5.5994938,2.122181 5.7062048,5.612659",id:"path5872",fill:"none",stroke:e,strokeWidth:"1.323"}),r.a.createElement("path",{id:"path5874",d:"m 6.7351935,50.47404 c 5.1370835,-0.52388 7.9751195,3.245055 8.5125345,8.512533",fill:"none",stroke:e,strokeWidth:"1.323"})))):"applications"===n?r.a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:t,height:a,viewBox:"0 0 8.4505663 8.3507221",id:"svg8",className:o},r.a.createElement("g",{id:"layer2",transform:"translate(123.263 -67.386)"},r.a.createElement("g",{id:"g5908",transform:"matrix(1.00352 0 0 .99166 -122.928 40.99)",fill:e},r.a.createElement("circle",{r:"3.946",cy:"30.828",cx:"3.877",id:"circle5894",fill:"none",stroke:e,strokeWidth:"0.529",strokeLinecap:"round",strokeLinejoin:"round"}),r.a.createElement("g",{transform:"matrix(.70376 0 0 .70376 -3.385 9.22)",id:"g5902",strokeWidth:"0.529",strokeLinecap:"round",strokeLinejoin:"round"},r.a.createElement("path",{id:"path5896",d:"M 4.7613342,33.375515 C 4.8631294,33.213704 4.9670191,33.05335 5.0722839,32.893801 5.1386022,32.78256 5.206498,32.671647 5.2840974,32.56775 c 0.046965,-0.06795 0.094122,-0.136253 0.1377834,-0.206412 0.053525,-0.08978 0.087344,-0.188415 0.1309729,-0.282686 0.049209,-0.08677 0.087411,-0.175554 0.1418453,-0.259125 0.038288,-0.082 0.080276,-0.162084 0.1283769,-0.238803 0.066997,-0.0819 0.1429599,-0.15477 0.2044165,-0.241358 0.080426,-0.07808 0.1281639,-0.180477 0.1972413,-0.266009 0.063695,-0.05662 0.072795,-0.137237 0.100606,-0.212228 0.041434,-0.0658 0.05889,-0.140472 0.086826,-0.211693 0.051833,-0.06909 0.063968,-0.154456 0.1048719,-0.228026 0.040122,-0.06828 0.080049,-0.136649 0.11949,-0.205428 0.029448,-0.08488 0.075636,-0.161821 0.1086824,-0.245242 0.011192,-0.08303 0.067464,-0.133776 0.1103789,-0.199088 0.032786,-0.07541 0.07196,-0.14477 0.092765,-0.224954 0.012501,-0.07873 0.079614,-0.127881 0.1025321,-0.20342 0.029945,-0.06213 0.061462,-0.123261 0.09096,-0.185904 0.024508,-0.07918 0.078013,-0.138464 0.098885,-0.219729 0.034286,-0.08109 0.067554,-0.162597 0.1169305,-0.235756 0.042013,-0.08273 0.087005,-0.164219 0.1324602,-0.245597 0.02028,-0.08863 0.061221,-0.161753 0.1139984,-0.234551 0.024455,-0.04246 0.023831,-0.09634 0.023447,-0.144253 0.017671,-0.05197 0.051315,-0.09226 0.074691,-0.142539 0.012774,-0.06633 0.050109,-0.123804 0.07442,-0.18641 0.021384,-0.05539 0.03159,-0.112257 0.034506,-0.171288 -0.00148,-0.05331 0.020579,-0.102108 0.05846,-0.138798 0.027456,-0.04587 0.02797,-0.09933 0.0466,-0.147876 0.03144,-0.06336 0.07198,-0.108405 0.130524,-0.146806 0.03787,-0.05381 0.1015656,-0.07433 0.1381413,-0.128739 0.014124,-0.0475 0.00842,-0.101131 0.00565,-0.150286 0,0 0.6520503,-0.0028 0.6520503,-0.0028 v 0 c 0.00175,0.06224 0.00717,0.125208 -0.00604,0.186708 -0.032643,0.06536 -0.072739,0.105857 -0.1398024,0.134168 -0.040293,0.08802 -0.1033822,0.04113 -0.1292135,0.146264 -0.029212,0.0087 -0.024029,0.118147 -0.046758,0.148227 -0.020328,0.03962 -0.064491,0.0515 -0.057182,0.104778 -0.00642,0.06382 -0.00975,0.12746 -0.037203,0.186812 -0.019886,0.0717 -0.065789,0.124431 -0.071968,0.197628 -0.023556,0.03923 -0.025405,0.100711 -0.07474,0.111283 -0.00119,0.06261 -0.00259,0.125916 -0.024826,0.185481 -0.054673,0.07202 -0.1056624,0.130747 -0.1146701,0.226661 -0.048,0.08249 -0.09728,0.162282 -0.1332887,0.249378 -0.043781,0.0697 -0.08186,0.138652 -0.1156239,0.214963 -0.00864,0.03228 -0.013256,0.06589 -0.025728,0.0969 -0.013534,0.03364 -0.054565,0.06098 -0.065743,0.09292 -0.00487,0.01389 -0.00393,0.02919 -0.00589,0.04378 -0.031382,0.0577 -0.049296,0.120462 -0.09279,0.170043 -0.00909,0.04981 -0.028578,0.111027 -0.066676,0.148291 -0.00731,0.0071 -0.021926,0.0048 -0.027626,0.01334 -0.00789,0.01175 -0.00612,0.02765 -0.00918,0.04147 -0.017571,0.08895 -0.058932,0.162595 -0.091392,0.244393 -0.037048,0.0726 -0.1039921,0.101328 -0.1111927,0.190651 -0.036358,0.08496 -0.078514,0.163587 -0.1088776,0.250698 -0.034831,0.07483 -0.087342,0.14037 -0.1205632,0.216673 -0.061595,0.05065 -0.035616,0.159104 -0.103472,0.21377 -0.036118,0.06573 -0.03606,0.148918 -0.086634,0.209423 -0.037399,0.07874 -0.037097,0.173347 -0.1032523,0.239212 -0.086288,0.05613 -0.1007163,0.194321 -0.1976435,0.249661 -0.052372,0.09375 -0.1280837,0.167971 -0.2028502,0.244875 -0.055168,0.06905 -0.089512,0.154617 -0.1285743,0.233727 -0.0091,0.0168 -0.018203,0.03358 -0.027306,0.05038 -0.010681,0.0098 -0.024593,0.01693 -0.032047,0.02937 -0.031954,0.05328 -0.033363,0.129217 -0.082572,0.174985 -0.050238,0.09091 -0.074362,0.19571 -0.1296654,0.284895 -0.037724,0.0776 -0.097396,0.143473 -0.1407623,0.218334 -0.086158,0.09495 -0.1428337,0.212937 -0.2133743,0.319106 -0.1035939,0.159317 -0.213396,0.31464 -0.3088825,0.479272 0,0 -0.6472568,-0.03501 -0.6472568,-0.03501 z"}),r.a.createElement("path",{id:"path5898",d:"m 8.9406345,27.068147 c 0.03928,0.271561 0.1142992,0.530887 0.2147708,0.785186 0.086483,0.205163 0.1890273,0.401238 0.2603582,0.613516 0.070461,0.218844 0.165,0.427786 0.2477624,0.642119 0.079807,0.194493 0.1480569,0.396275 0.2589356,0.575734 0.076306,0.128944 0.1479585,0.260183 0.2206245,0.391689 0.06479,0.111477 0.143088,0.217355 0.228409,0.31382 0.06375,0.121904 0.141677,0.232738 0.221708,0.343513 0.08297,0.112538 0.148314,0.236686 0.228788,0.350661 0.06197,0.09098 0.08371,0.204687 0.138563,0.298767 0.02459,0.04217 0.05788,0.07879 0.08307,0.120603 0.09339,0.104277 0.162343,0.223009 0.243071,0.336523 0.03683,0.107622 0.113293,0.187598 0.18476,0.273661 0.07603,0.06777 0.116486,0.16972 0.205363,0.22057 0.0099,0.05748 0.07913,0.06809 0.108122,0.102592 0.03135,0.03731 0.03593,0.06919 0.07422,0.10272 0.06019,0.05314 0.104443,0.121745 0.165394,0.173307 0.05538,0.006 0.06625,0.05262 0.100695,0.08493 0.02945,0.02762 0.06865,0.03055 0.09965,0.06016 0.03142,0.104217 0.07447,0.05341 0.114292,0.105209 0.02913,0.05601 0.06914,0.108601 0.13026,0.136141 0.0325,0.08727 0.144098,0.0773 0.186097,0.14378 0,0 -0.650204,0.05069 -0.650204,0.05069 v 0 c -0.07407,-0.02577 -0.12331,-0.08137 -0.1836,-0.128254 -0.05203,-0.04043 -0.08648,-0.09588 -0.132182,-0.142603 -0.05742,-0.0092 -0.07409,-0.06998 -0.11301,-0.105838 -0.0733,-0.04353 -0.130195,-0.105199 -0.200836,-0.152535 -0.05352,-0.05979 -0.110175,-0.116996 -0.166022,-0.174535 -0.05791,-0.0676 -0.111836,-0.136816 -0.179897,-0.195514 -0.07705,-0.07087 -0.133901,-0.1607 -0.206752,-0.236056 -0.07115,-0.08704 -0.13967,-0.175305 -0.184253,-0.279731 -0.07559,-0.116591 -0.156646,-0.228947 -0.241041,-0.339185 -0.0862,-0.133636 -0.14698,-0.276585 -0.221396,-0.416822 C 10.100126,31.00656 10.027374,30.88799 9.9462258,30.774777 9.8650119,30.66615 9.798756,30.549119 9.7251664,30.435309 9.6425603,30.331201 9.556529,30.227995 9.4960391,30.108916 9.424744,29.97831 9.3521796,29.84859 9.2784921,29.719457 9.17104,29.53435 9.1019039,29.330065 9.0209152,29.132479 8.9390618,28.916934 8.8418947,28.707828 8.7716729,28.487875 8.6999415,28.27746 8.5951681,28.083216 8.5139688,27.877201 8.413852,27.617256 8.3449392,27.351371 8.2939018,27.077326 c 0,0 0.6467327,-0.0092 0.6467327,-0.0092 z"}),r.a.createElement("path",{id:"path5900",d:"m 6.0945796,31.324089 c 0.162945,-0.0873 0.3167404,-0.191071 0.4814803,-0.274971 0.086928,-0.06072 0.180439,-0.109873 0.271567,-0.163562 0.071097,-0.01685 0.1371349,-0.04314 0.1975789,-0.08479 0.067101,-0.02778 0.1125578,-0.08835 0.1827927,-0.108316 0.070079,-0.03781 0.1348865,-0.08351 0.1986968,-0.131058 0.050026,-0.04346 0.1099759,-0.06732 0.1687888,-0.0958 0.056322,-0.04479 0.1123673,-0.09074 0.167649,-0.137189 0.062041,-0.05378 0.1304343,-0.1011 0.2009119,-0.143266 0.076139,-0.05258 0.1548376,-0.100124 0.2370079,-0.142679 0.059735,-0.0285 0.1183823,-0.05858 0.1791854,-0.08524 0.067183,-0.03379 0.1317321,-0.07035 0.2059003,-0.09107 0.075807,-0.0091 0.144103,-0.03785 0.2143221,-0.06582 0.067399,-0.0182 0.1190852,-0.05515 0.1763429,-0.09197 0.052224,-0.02864 0.084841,-0.08315 0.1391303,-0.109643 0.023897,-0.04096 0.048641,-0.08841 0.096125,-0.105707 0.05263,-0.01442 0.0918,-0.05441 0.1394135,-0.08159 0.050501,-0.0099 0.084504,-0.04599 0.1271323,-0.07109 0.03788,-0.03183 0.078521,-0.0605 0.1094552,-0.09932 0.033503,-0.04383 0.071352,-0.0394 0.1038249,-0.08697 0.047919,-0.02903 0.09508,-0.0498 0.1405011,-0.08368 0.036571,-0.03275 0.084568,-0.04318 0.1265097,-0.06534 0.028147,-0.0403 0.077267,-0.05122 0.1116494,-0.08328 0.04514,-0.01775 0.09483,-0.0071 0.13997,-0.0223 0.03576,-0.02302 0.01801,-0.01222 0.05317,-0.03249 0,0 0.648075,0.07005 0.648075,0.07005 v 0 c -0.03466,0.01736 -0.01719,0.0085 -0.05241,0.0265 -0.0443,0.04256 -0.08103,0.0525 -0.141238,0.04325 -0.02607,-0.0141 -0.07764,0.03788 -0.108526,0.0449 -0.03409,0.05733 -0.08075,0.05181 -0.129516,0.08694 -0.05165,0.02024 -0.07574,0.07847 -0.138057,0.07179 -0.04044,0.0068 -0.0449,0.122219 -0.101165,0.06317 -0.02491,0.05589 -0.07114,0.08535 -0.112654,0.126471 -0.03778,0.03516 -0.08478,0.06694 -0.1303142,0.09129 -0.060019,0.0073 -0.089149,0.0579 -0.1367521,0.07508 -0.038158,0.02209 -0.086344,0.01545 -0.094571,0.07519 -0.029606,0.05841 -0.1141365,0.07207 -0.142957,0.140753 -0.068018,0.01823 -0.1000321,0.08896 -0.1760328,0.09199 -0.068599,0.03575 -0.1412267,0.06901 -0.2172153,0.08049 -0.07429,0.0097 -0.1531146,0.02669 -0.2034182,0.08653 -0.065558,0.0081 -0.1288876,0.04234 -0.1809867,0.08242 -0.086451,0.01106 -0.1594593,0.08306 -0.2337361,0.12556 -0.064336,0.04627 -0.1354915,0.08366 -0.2001358,0.130652 -0.051199,0.05747 -0.1203698,0.08991 -0.1679459,0.15127 -0.05536,0.04234 -0.122174,0.05093 -0.1696635,0.0958 -0.070371,0.0358 -0.1213287,0.102404 -0.1975231,0.127042 -0.034028,0.03742 -0.051916,0.01484 -0.088635,0.04191 -0.032556,0.024 -0.050493,0.06271 -0.094409,0.07137 -0.064781,0.03469 -0.1235374,0.09695 -0.2003015,0.0954 -0.08813,0.01826 0.015163,-0.0096 -0.077898,0.04203 -0.065611,0.03641 -0.1436725,0.05742 -0.1968458,0.117269 -0.1685594,0.07326 -0.3178233,0.182411 -0.4795059,0.268705 0,0 -0.6447653,-0.06667 -0.6447653,-0.06667 z"})),r.a.createElement("g",{id:"text5906",fontWeight:"400",fontSize:"2.238",fontFamily:"Silom",letterSpacing:"0",wordSpacing:"0",strokeWidth:"0.153"},r.a.createElement("path",{d:"m 4.7714347,30.569627 h 0.3737781 v 0.18577 q 0,-0.094 0.047002,-0.138768 0.047002,-0.047 0.1387679,-0.047 h 0.1880081 q 0.1521971,0 0.2618685,0.109671 0.1096714,0.109671 0.1096714,0.261869 v 0.559548 q 0,0.154435 -0.1096714,0.264106 -0.1096714,0.109672 -0.2618685,0.109672 h -0.373778 v 0.373778 H 4.7714347 Z m 0.3737781,1.119096 h 0.1857699 q 0.078337,0 0.1320533,-0.05372 0.055955,-0.05596 0.055955,-0.134291 v -0.559548 q 0,-0.0761 -0.055955,-0.129816 -0.053717,-0.05595 -0.1320533,-0.05595 -0.076098,0 -0.1320533,0.05595 -0.053717,0.05372 -0.053717,0.129816 z",id:"path13779"}),r.a.createElement("path",{d:"m 6.266477,30.569627 h 0.3737781 v 0.18577 q 0,-0.094 0.047002,-0.138768 0.047002,-0.047 0.1387679,-0.047 h 0.1880082 q 0.152197,0 0.2618684,0.109671 0.1096715,0.109671 0.1096715,0.261869 v 0.559548 q 0,0.154435 -0.1096715,0.264106 -0.1096714,0.109672 -0.2618684,0.109672 H 6.6402551 v 0.373778 H 6.266477 Z m 0.3737781,1.119096 H 6.826025 q 0.078337,0 0.1320534,-0.05372 0.055955,-0.05596 0.055955,-0.134291 v -0.559548 q 0,-0.0761 -0.055955,-0.129816 -0.053717,-0.05595 -0.1320534,-0.05595 -0.076098,0 -0.1320533,0.05595 -0.053717,0.05372 -0.053717,0.129816 z",id:"path13781"}))))):"forum"===n?r.a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:t,height:a,viewBox:"0 0 8.3807926 8.5141972",id:"svg8",className:o},r.a.createElement("g",{id:"layer2",transform:"translate(99.1 -122.406)"},r.a.createElement("g",{id:"g5232",transform:"matrix(.64374 0 0 .84004 -35.293 20.962)",stroke:e},r.a.createElement("path",{id:"path5713",d:"m -91.233427,124.2468 h 2.860358",fill:e,strokeWidth:"0.529"}),r.a.createElement("g",{id:"g5211",transform:"matrix(-.48727 0 0 .51349 -63.367 70.219)",strokeWidth:"1.058"},r.a.createElement("path",{id:"path5207",transform:"matrix(.26458 0 0 .26458 0 0)",d:"m 243.51367,388.92759 c -17.56897,-4.6e-4 -31.81151,5.464 -31.81055,17.92397 0.003,9.0356 7.60775,17.19823 19.32618,20.74414 3.03057,1.59565 7.0628,3.84176 10.09375,6.06446 5.3033,3.88905 11.66797,10.95898 11.66797,10.95898 0,0 -1.06089,-8.13231 2.12109,-12.72852 7.64227,-7.92086 20.13217,-12.99077 20.41016,-25.03906 9.6e-4,-12.45943 -14.24039,-17.92367 -31.8086,-17.92397 z",fill:"none",strokeWidth:"3.998",strokeLinecap:"round",strokeLinejoin:"round"}),r.a.createElement("path",{id:"path5209",d:"m 63.94133,107.94999 h 4.784192",fill:e})),r.a.createElement("path",{id:"path5215",d:"m -90.46618,121.02578 c -1.478217,-4e-5 -3.423998,1.10492 -3.491778,2.0929 1.880264,0.27914 3.2981,0.88779 3.297991,2.37505 -2.06e-4,0.65662 -0.282968,1.27864 -0.775146,1.78955 0.231067,0.14294 0.462103,0.29632 0.660425,0.44959 0.68372,0.52837 1.504301,1.4888 1.504301,1.4888 0,0 -0.136864,-1.10466 0.273368,-1.7291 0.985268,-1.07614 2.595524,-1.76497 2.631364,-3.40186 1.23e-4,-1.69274 -1.835571,-3.06489 -4.100525,-3.06493 z",fill:"none",strokeWidth:"0.529",strokeLinecap:"round",strokeLinejoin:"round"}),r.a.createElement("path",{id:"path5219",d:"m -92.406727,125.64996 h -4.447859",fill:e,strokeWidth:"0.529"})))):"productionkeys"===n||"sandBoxkeys"===n?r.a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:t,height:a,viewBox:"0 0 9.8881274 7.2221771",id:"svg8",className:o},r.a.createElement("g",{id:"layer25",transform:"translate(36.575 -55.028)"},r.a.createElement("g",{transform:"translate(-43.821 -15.122) scale(.93173)",id:"g10309"},r.a.createElement("g",{id:"g10305",transform:"matrix(.59773 0 0 .59773 8.88 46.917)",strokeLinecap:"round"},r.a.createElement("circle",{r:"1.497",cy:"57.583",cx:"8.138",id:"circle10299",fill:e,strokeWidth:"0.529",strokeLinejoin:"round"}),r.a.createElement("path",{id:"path10301",d:"m 6.6416492,53.373914 c 2.7091648,-0.363432 5.5994938,2.122181 5.7062048,5.612659",fill:"none",stroke:e,strokeWidth:"1.323"}),r.a.createElement("path",{d:"m 6.7351935,50.47404 c 5.1370835,-0.52388 7.9751195,3.245055 8.5125345,8.512533",id:"path10303",fill:"none",stroke:e,strokeWidth:"1.323"})),r.a.createElement("path",{d:"m 13.270424,82.869816 c 0.202009,-0.123999 0.264813,-0.386454 0.140817,-0.588463 l -2.15606,-3.512502 a 1.9966529,1.9966529 0 0 0 0.291837,-2.455259 1.9966529,1.9966529 0 0 0 -2.746164,-0.657136 1.9966529,1.9966529 0 0 0 -0.657136,2.746165 1.9966529,1.9966529 0 0 0 2.32141,0.851187 l 0.720727,1.174159 c -0.01053,0.0054 -0.02102,0.01091 -0.03127,0.0172 l -1.640879,1.007211 c -0.20201,0.123999 -0.273132,0.372901 -0.159465,0.558078 0.113665,0.185175 0.3678,0.234429 0.569812,0.110425 l 1.640878,-1.00721 c 0.01024,-0.0063 0.02,-0.01304 0.0296,-0.01993 l 1.026666,1.672574 c 0.123999,0.202009 0.386454,0.264813 0.588463,0.140817 z m -2.450446,-4.792127 c -0.13624,-0.143956 -0.357939,-0.17773 -0.533882,-0.06973 l -0.06077,0.03731 c -0.175941,0.107998 -0.246189,0.320971 -0.179518,0.507607 a 1.2122535,1.2122535 0 0 1 -1.233611,-0.560605 1.2122535,1.2122535 0 0 1 0.398974,-1.667314 1.2122535,1.2122535 0 0 1 1.667315,0.398975 1.2122535,1.2122535 0 0 1 -0.05853,1.353753 z",id:"path10307",fill:e,stroke:e,strokeWidth:"0.143",strokeLinejoin:"round"})))):"subscriptions"===n?r.a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:t,height:a,viewBox:"0 0 6.5989004 6.5674281",id:"svg8",className:o},r.a.createElement("g",{id:"layer25",transform:"translate(35.929 -86.734)"},r.a.createElement("g",{transform:"matrix(.66392 0 0 .66392 -39.893 53.694)",id:"g10459",strokeLinecap:"round"},r.a.createElement("circle",{id:"circle10453",cx:"8.138",cy:"57.583",r:"1.497",fill:e,strokeWidth:"0.529",strokeLinejoin:"round"}),r.a.createElement("path",{d:"m 6.6416492,53.373914 c 2.7091648,-0.363432 5.5994938,2.122181 5.7062048,5.612659",id:"path10455",fill:"none",stroke:e,strokeWidth:"1.323"}),r.a.createElement("path",{id:"path10457",d:"m 6.7351935,50.47404 c 5.1370835,-0.52388 7.9751195,3.245055 8.5125345,8.512533",fill:"none",stroke:e,strokeWidth:"1.323"})))):"api-product"===n?r.a.createElement("svg",i({width:t,height:a,className:o,viewBox:"0 0 8.467 8.467",id:"prefix__svg8"},this.props),r.a.createElement("g",{id:"prefix__layer2",transform:"translate(82.262 -41.963)"},r.a.createElement("g",{id:"prefix__g994"},r.a.createElement("g",{transform:"matrix(.76623 0 0 .76623 171.718 7.386)",id:"prefix__g5764",display:"inline",fill:"#8b8e95",fillOpacity:.933},r.a.createElement("path",{d:"M-326.924 45.126a.142.142 0 00-.142.143v1.111a3.903 3.903 0 00-1.527.636l-.788-.789a.142.142 0 00-.202 0l-.78.781a.142.142 0 000 .202l.785.786a3.903 3.903 0 00-.63 1.529h-1.114a.142.142 0 00-.143.142v1.104c0 .08.064.143.143.143h1.111a3.903 3.903 0 00.636 1.526l-.789.789a.142.142 0 000 .201l.781.781a.142.142 0 00.202 0l.786-.786a3.903 3.903 0 001.529.631v1.114c0 .079.063.142.142.142h1.104a.142.142 0 00.143-.142v-1.112a3.903 3.903 0 001.526-.635l.789.788a.142.142 0 00.201 0l.781-.78a.142.142 0 000-.202l-.786-.786a3.903 3.903 0 00.631-1.53h1.114a.142.142 0 00.142-.142v-1.104a.142.142 0 00-.142-.142h-1.112a3.903 3.903 0 00-.635-1.527l.788-.788a.142.142 0 000-.202l-.78-.78a.142.142 0 00-.202 0l-.786.785a3.903 3.903 0 00-1.53-.63v-1.114a.142.142 0 00-.142-.143zm.552 2.082a3.012 3.012 0 013.012 3.011 3.012 3.012 0 01-3.012 3.012 3.012 3.012 0 01-3.012-3.012 3.012 3.012 0 013.012-3.011z",id:"prefix__path5728",stroke:"none",strokeWidth:.937,strokeLinejoin:"round",strokeMiterlimit:4,strokeDasharray:"none",strokeOpacity:1}),r.a.createElement("g",{id:"prefix__g5762",transform:"matrix(.01024 0 0 .01024 -328.341 48.178)"},r.a.createElement("path",{id:"prefix__path5730",d:"M364.427 259.214c-14.051-14.052-32.733-21.79-52.605-21.79-10.619 0-20.888 2.23-30.302 6.431a27.521 27.521 0 00-3.799-4.756l-54.188-54.188 95.825-95.825c2.645 2.529 5.363 3.085 7.197 3.085 4.06 0 6.8-2.535 7.308-3.042l22.197-22.197c3.771-3.771 5.563-7.434 5.477-11.197-.135-5.897-4.599-9.968-9.767-14.683-1.53-1.395-3.111-2.838-4.7-4.426-1.588-1.588-3.03-3.169-4.426-4.699-4.782-5.243-8.912-9.771-14.939-9.771-3.676 0-7.255 1.793-10.941 5.48l-22.281 22.281c-2.746 2.746-5.103 9.066.122 14.426l-95.821 95.821-56.131-56.131c4.012-9.232 6.137-19.269 6.137-29.638 0-19.872-7.739-38.555-21.791-52.607C112.95 7.737 94.27 0 74.4 0a74.64 74.64 0 00-19.615 2.62c-2.513.684-4.569 2.752-5.238 5.268-.683 2.565.096 5.206 2.121 7.232.266.267 26.668 26.873 35.46 35.665 1.31 1.31 1.193 4.015 1.058 4.81l-.069.489c-1.005 10.964-3.034 24.215-4.565 27.493-3.303 1.581-16.767 3.637-27.911 4.633l-.149-.013-.302.072c-.082.009-.26.024-.508.024-1.253 0-3.096-.349-4.758-2.011-9.151-9.152-34.537-34.35-34.779-34.59-2.06-2.06-4.147-2.492-5.536-2.492-3.225 0-6.112 2.349-7.022 5.713C-4.357 80.592 3 108.214 21.786 127c14.051 14.051 32.733 21.79 52.606 21.79 10.369 0 20.407-2.126 29.639-6.137l56.131 56.131-22.013 22.013a24.953 24.953 0 00-11.618-2.839c-6.693 0-12.972 2.592-17.678 7.298l-12.282 12.283a25.561 25.561 0 00-3.578-.254c-6.692 0-12.971 2.592-17.677 7.298l-64.351 64.35c-4.707 4.706-7.299 10.984-7.299 17.678 0 6.693 2.592 12.971 7.299 17.678l28.44 28.44c4.706 4.706 10.984 7.298 17.678 7.298 6.692 0 12.971-2.592 17.677-7.298l64.35-64.35c4.707-4.706 7.299-10.984 7.299-17.678 0-1.209-.087-2.404-.254-3.579l12.282-12.282c4.707-4.707 7.299-10.984 7.299-17.678 0-4.121-.986-8.082-2.839-11.618l22.013-22.013 54.188 54.188a27.547 27.547 0 004.755 3.798c-4.201 9.414-6.431 19.684-6.431 30.302 0 19.873 7.739 38.555 21.791 52.607 14.048 14.048 32.729 21.785 52.6 21.786h.003c6.63 0 13.23-.882 19.614-2.62 2.513-.684 4.568-2.752 5.236-5.268.682-2.565-.097-5.206-2.122-7.23-.266-.267-26.667-26.874-35.459-35.666-1.31-1.31-1.193-4.015-1.058-4.811l.069-.489c1.005-10.964 3.034-24.214 4.565-27.493 3.303-1.581 16.767-3.637 27.911-4.633l.149.013.301-.072c.083-.009.261-.024.508-.024 1.253 0 3.097.349 4.76 2.012 9.15 9.151 34.536 34.349 34.778 34.589 2.06 2.06 4.147 2.493 5.536 2.493 3.225 0 6.112-2.349 7.023-5.713  6.945-25.677-.413-53.299-19.2-72.086zM86.206 329.713l-7.226 7.226c-7.778 7.778-20.506 7.778-28.284 0l-3.94-3.941c-7.778-7.778-7.778-20.506 0-28.284l7.226-7.226c7.778-7.778 20.506-7.778 28.284 0l3.941 3.941c7.777 7.778 7.777 20.506-.001 28.284zm159.465-84.042a7.482 7.482 0 01-5.304 2.197 7.476 7.476 0 01-5.304-2.197l-88.414-88.414a7.5 7.5 0 0110.607-10.607l27.519 27.519 24.749 24.749 36.146 36.147a7.498 7.498 0 01.001 10.606z"}))),r.a.createElement("path",{id:"prefix__rect893",d:"M-77.015 45.818a.343.343 0 00-.341.345v1.255h-4.282a.343.343 0 00-.34.345v2.072c0 .191.151.345.34.345h7.26c.189 0 .341-.154.341-.345v-3.672a.343.343 0 00-.341-.345z",opacity:1,fill:"#fff",fillOpacity:.535,fillRule:"nonzero",stroke:"#8b8e95",strokeWidth:.499,strokeLinecap:"round",strokeLinejoin:"round",strokeMiterlimit:4,strokeDasharray:"none",strokeDashoffset:0,strokeOpacity:.933,paintOrder:"stroke markers fill"}))),r.a.createElement("style",{type:"text/css",id:"style4833"}),r.a.createElement("style",{type:"text/css",id:"style4833-0"}),r.a.createElement("style",{id:"style4833-9",type:"text/css"}),r.a.createElement("style",{id:"style4833-0-6",type:"text/css"}),r.a.createElement("style",{id:"style4833-1",type:"text/css"}),r.a.createElement("style",{id:"style4833-0-0",type:"text/css"}),r.a.createElement("style",{type:"text/css",id:"style4833-9-3"}),r.a.createElement("style",{type:"text/css",id:"style4833-0-6-0"}),r.a.createElement("style",{type:"text/css",id:"style4833-2"}),r.a.createElement("style",{type:"text/css",id:"style4833-0-2"}),r.a.createElement("style",{id:"style4833-9-2",type:"text/css"}),r.a.createElement("style",{id:"style4833-0-6-8",type:"text/css"}),r.a.createElement("style",{type:"text/css",id:"style4833-94"}),r.a.createElement("style",{type:"text/css",id:"style4833-0-67"}),r.a.createElement("style",{id:"style4833-9-20",type:"text/css"}),r.a.createElement("style",{id:"style4833-0-6-6",type:"text/css"}),r.a.createElement("style",{type:"text/css",id:"style4833-4"}),r.a.createElement("style",{type:"text/css",id:"style4833-0-25"}),r.a.createElement("style",{id:"style4833-9-4",type:"text/css"}),r.a.createElement("style",{id:"style4833-0-6-3",type:"text/css"}),r.a.createElement("style",{type:"text/css",id:"style4833-5"}),r.a.createElement("style",{type:"text/css",id:"style4833-0-9"}),r.a.createElement("style",{id:"style4833-9-0",type:"text/css"}),r.a.createElement("style",{id:"style4833-0-6-80",type:"text/css"}),r.a.createElement("style",{type:"text/css",id:"style4833-00"}),r.a.createElement("style",{type:"text/css",id:"style4833-0-3"}),r.a.createElement("style",{id:"style4833-9-27",type:"text/css"}),r.a.createElement("style",{id:"style4833-0-6-5",type:"text/css"}),r.a.createElement("style",{type:"text/css",id:"style4833-53"}),r.a.createElement("style",{type:"text/css",id:"style4833-0-24"}),r.a.createElement("style",{id:"style4833-9-26",type:"text/css"}),r.a.createElement("style",{id:"style4833-0-6-2",type:"text/css"}),r.a.createElement("style",{type:"text/css",id:"style4833-44"}),r.a.createElement("style",{type:"text/css",id:"style4833-0-38"}),r.a.createElement("style",{id:"style4833-9-22",type:"text/css"}),r.a.createElement("style",{id:"style4833-0-6-64",type:"text/css"})):r.a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:t,height:a,viewBox:"0 0 8.4666662 8.466666",id:"svg8",className:o},r.a.createElement("g",{id:"layer2",transform:"translate(82.262 -41.963)"},r.a.createElement("g",{id:"g5764",transform:"matrix(.83117 0 0 .83117 193.242 4.456)",fill:e,fillOpacity:"0.933"},r.a.createElement("path",{id:"path5728",d:"m -326.92369,45.126027 c -0.0789,0 -0.14264,0.06373 -0.14264,0.142626 v 1.111562 a 3.9026041,3.9026041 0 0 0 -1.52651,0.635619 l -0.78859,-0.788582 c -0.0558,-0.05579 -0.14576,-0.05579 -0.20154,0 l -0.78084,0.78083 c -0.0558,0.05579 -0.0558,0.145751 0,0.201538 l 0.786,0.785998 a 3.9026041,3.9026041 0 0 0 -0.63098,1.529107 h -1.1136 c -0.0789,0 -0.14264,0.06373 -0.14264,0.142626 v 1.10381 c 0,0.07889 0.0637,0.142626 0.14264,0.142626 h 1.11154 a 3.9026041,3.9026041 0 0 0 0.63564,1.526522 l -0.7886,0.788582 c -0.0558,0.05579 -0.0558,0.145751 0,0.201539 l 0.78084,0.78083 c 0.0558,0.05579 0.14576,0.05579 0.20154,0 l 0.78599,-0.785998 a 3.9026041,3.9026041 0 0 0 1.52911,0.630968 v 1.113629 c 0,0.07889 0.0637,0.142626 0.14264,0.142626 h 1.10379 c 0.0789,0 0.14263,-0.06373 0.14263,-0.142626 v -1.11156 a 3.9026041,3.9026041 0 0 0 1.52652,-0.635622 l 0.78859,0.788583 c 0.0558,0.05579 0.14576,0.05579 0.20153,0 l 0.78084,-0.78083 c 0.0558,-0.05579 0.0558,-0.145751 0,-0.201539 l -0.786,-0.785997 a 3.9026041,3.9026041 0 0 0 0.63098,-1.529107 h 1.1136 c 0.0789,0 0.14264,-0.06373 0.14264,-0.142626 v -1.10381 c 0,-0.07889 -0.0637,-0.142626 -0.14264,-0.142626 h -1.11154 a 3.9026041,3.9026041 0 0 0 -0.63563,-1.526522 l 0.78859,-0.788583 c 0.0558,-0.05579 0.0558,-0.145751 0,-0.201538 l -0.78084,-0.78083 c -0.0558,-0.05579 -0.14576,-0.05579 -0.20153,0 l -0.786,0.785997 a 3.9026041,3.9026041 0 0 0 -1.52911,-0.630967 v -1.113629 c 0,-0.07889 -0.0637,-0.142626 -0.14263,-0.142626 z m 0.55189,2.081527 a 3.0119976,3.0119976 0 0 1 3.01223,3.011702 3.0119976,3.0119976 0 0 1 -3.01223,3.01222 3.0119976,3.0119976 0 0 1 -3.01223,-3.01222 3.0119976,3.0119976 0 0 1 3.01223,-3.011702 z",strokeWidth:"0.937",strokeLinejoin:"round"}),r.a.createElement("g",{transform:"matrix(.01024 0 0 .01024 -328.341 48.178)",id:"g5762"},r.a.createElement("path",{d:"m 364.427,259.214 c -14.051,-14.052 -32.733,-21.79 -52.605,-21.79 -10.619,0 -20.888,2.23 -30.302,6.431 -1.076,-1.701 -2.341,-3.298 -3.799,-4.756 l -54.188,-54.188 95.825,-95.825 c 2.645,2.529 5.363,3.085 7.197,3.085 4.06,0 6.8,-2.535 7.308,-3.042 L 356.06,66.932 c 3.771,-3.771 5.563,-7.434 5.477,-11.197 -0.135,-5.897 -4.599,-9.968 -9.767,-14.683 -1.53,-1.395 -3.111,-2.838 -4.7,-4.426 -1.588,-1.588 -3.03,-3.169 -4.426,-4.699 -4.782,-5.243 -8.912,-9.771 -14.939,-9.771 -3.676,0 -7.255,1.793 -10.941,5.48 l -22.281,22.281 c -2.746,2.746 -5.103,9.066 0.122,14.426 l -95.821,95.821 -56.131,-56.131 c 4.012,-9.232 6.137,-19.269 6.137,-29.638 0,-19.872 -7.739,-38.555 -21.791,-52.607 C 112.95,7.737 94.27,0 74.4,0 67.768,0 61.168,0.881 54.785,2.62 c -2.513,0.684 -4.569,2.752 -5.238,5.268 -0.683,2.565 0.096,5.206 2.121,7.232 0.266,0.267 26.668,26.873 35.46,35.665 1.31,1.31 1.193,4.015 1.058,4.81 l -0.069,0.489 c -1.005,10.964 -3.034,24.215 -4.565,27.493 -3.303,1.581 -16.767,3.637 -27.911,4.633 l -0.149,-0.013 -0.302,0.072 c -0.082,0.009 -0.26,0.024 -0.508,0.024 -1.253,0 -3.096,-0.349 -4.758,-2.011 C 40.773,77.13 15.387,51.932 15.145,51.692 13.085,49.632 10.998,49.2 9.609,49.2 6.384,49.2 3.497,51.549 2.587,54.913 -4.357,80.592 3,108.214 21.786,127 c 14.051,14.051 32.733,21.79 52.606,21.79 10.369,0 20.407,-2.126 29.639,-6.137 l 56.131,56.131 -22.013,22.013 c -3.536,-1.853 -7.497,-2.839 -11.618,-2.839 -6.693,0 -12.972,2.592 -17.678,7.298 l -12.282,12.283 c -1.175,-0.166 -2.369,-0.254 -3.578,-0.254 -6.692,0 -12.971,2.592 -17.677,7.298 l -64.351,64.35 c -4.707,4.706 -7.299,10.984 -7.299,17.678 0,6.693 2.592,12.971 7.299,17.678 l 28.44,28.44 c 4.706,4.706 10.984,7.298 17.678,7.298 6.692,0 12.971,-2.592 17.677,-7.298 l 64.35,-64.35 c 4.707,-4.706 7.299,-10.984 7.299,-17.678 0,-1.209 -0.087,-2.404 -0.254,-3.579 l 12.282,-12.282 c 4.707,-4.707 7.299,-10.984 7.299,-17.678 0,-4.121 -0.986,-8.082 -2.839,-11.618 l 22.013,-22.013 54.188,54.188 c 1.458,1.457 3.055,2.723 4.755,3.798 -4.201,9.414 -6.431,19.684 -6.431,30.302 0,19.873 7.739,38.555 21.791,52.607 14.048,14.048 32.729,21.785 52.6,21.786 0.001,0 0.001,0 0.003,0 6.63,0 13.23,-0.882 19.614,-2.62 2.513,-0.684 4.568,-2.752 5.236,-5.268 0.682,-2.565 -0.097,-5.206 -2.122,-7.23 -0.266,-0.267 -26.667,-26.874 -35.459,-35.666 -1.31,-1.31 -1.193,-4.015 -1.058,-4.811 l 0.069,-0.489 c 1.005,-10.964 3.034,-24.214 4.565,-27.493 3.303,-1.581 16.767,-3.637 27.911,-4.633 l 0.149,0.013 0.301,-0.072 c 0.083,-0.009 0.261,-0.024 0.508,-0.024 1.253,0 3.097,0.349 4.76,2.012 9.15,9.151 34.536,34.349 34.778,34.589 2.06,2.06 4.147,2.493 5.536,2.493 3.225,0 6.112,-2.349 7.023,-5.713 6.945,-25.677 -0.413,-53.299 -19.2,-72.086 z m -278.221,70.499 -7.226,7.226 c -7.778,7.778 -20.506,7.778 -28.284,0 l -3.94,-3.941 c -7.778,-7.778 -7.778,-20.506 0,-28.284 l 7.226,-7.226 c 7.778,-7.778 20.506,-7.778 28.284,0 l 3.941,3.941 c 7.777,7.778 7.777,20.506 -10e-4,28.284 z m 159.465,-84.042 c -1.465,1.464 -3.385,2.197 -5.304,2.197 -1.92,0 -3.839,-0.732 -5.304,-2.197 l -88.414,-88.414 c -2.929,-2.929 -2.929,-7.678 0,-10.607 2.931,-2.93 7.679,-2.929 10.607,0 l 27.519,27.519 v 0 l 24.749,24.749 v 0 l 36.146,36.147 c 2.93,2.929 2.93,7.678 0.001,10.606 z",id:"path5730"})))))}}])&&s(a.prototype,n),o&&s(a,o),t}()},668:function(e,t,a){"use strict";var n=a(0),r=a.n(n),o=a(287),i=a(209),s=a(11);t.a=function(e){return r.a.createElement(o.a,{elevation:4},r.a.createElement(i.a,{variant:"h5",component:"h3"},r.a.createElement(s.a,{id:"Base.Errors.ResourceNotfound.title",defaultMessage:"404 Resource Not Found!"})),r.a.createElement(i.a,{variant:"body1",component:"p"},r.a.createElement(s.a,{id:"Base.Errors.ResourceNotfound.message",defaultMessage:"Can't find the resource you are looking for"}),r.a.createElement("span",{style:{color:"green"}}," ",e.response?e.response.statusText:""," ")))}},688:function(e,t,a){"use strict";a.d(t,"a",function(){return h}),a.d(t,"b",function(){return f}),a.d(t,"c",function(){return m});var n=a(0),r=a.n(n),o=a(2),i=a.n(o),s=a(12);function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function c(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function u(e,t){return!t||"object"!==l(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function p(e){return(p=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function d(e,t){return(d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var m={APIS:"/apis",SINGLE_API:"/apis/{apiId}",API_SWAGGER:"/apis/{apiId}/swagger",API_WSDL:"/apis/{apiId}/wsdl",API_GW_CONFIG:"/apis/{apiId}/gateway-config",API_THUMBNAIL:"/apis/{apiId}/thumbnail",API_COPY:"/apis/copy-api",API_LC_HISTORY:"/apis/{apiId}/lifecycle-history",API_CHANGE_LC:"/apis/change-lifecycle",API_LC:"/apis/{apiId}/lifecycle",API_LC_PENDING_TASK:"/apis/{apiId}/lifecycle/lifecycle-pending-task",API_DEF:"/apis/import-definition",API_VALIDATE_DEF:"/apis/validate-definition",API_DOCS:"/apis/{apiId}/documents",API_DOC:"'/apis/{apiId}/documents/{documentId}'",API_DOC_CONTENT:"'/apis/{apiId}/documents/{documentId}/content'",APPLICATIONS:"/applications",SINGLE_APPLICATION:"/applications/{applicationId}",APPLICATION_GENERATE_KEYS:"/applications/{applicationId}/generate-keys",APPLICATION_GENERATE_KEY_TYPE:"/applications/{applicationId}/keys/{keyType}",EXPORT_APIS:"/export/apis",IMPORT_APIS:"/import/apis",SUBSCRIPTION:"/subscriptions",SINGLE_SUBSCRIPTION:"/subscriptions/{subscriptionId}",SUBSCRIPTIONS:"/subscriptions",BLOCK_SUBSCRIPTION:"/subscriptions/block-subscription:",UNBLOCK_SUBSCRIPTION:"/subscriptions/unblock-subscription",POLICIES:"'/policies/{tierLevel}'",POLICY:"'/policies/{tierLevel}/{tierName}'",ENDPOINTS:"/endpoints",ENDPOINT:"/endpoints/{endpointId}",LABLES:"/labels",WORKFLOW:"/workflows/{workflowReferenceId}",SERVICE_DISCOVERY:"/external-resources/services"},f={POST:"post",PUT:"put",GET:"get",DELETE:"delete"},h=function(e){function t(e){var a;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(a=u(this,p(t).call(this,e))).state={},a}var a,n,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&d(e,t)}(t,r.a.Component),a=t,(n=[{key:"componentDidMount",value:function(){var e=this,t=this.props,a=t.resourcePath,n=t.resourceMethod,r=s.a.hasScopes(a,n);r&&r.then(function(t){e.setState({haveScope:t})})}},{key:"render",value:function(){var e=this.props.children;return this.state.haveScope&&e||null}}])&&c(a.prototype,n),o&&c(a,o),t}();h.propTypes={children:i.a.node.isRequired,resourcePath:i.a.string.isRequired,resourceMethod:i.a.string.isRequired}},691:function(e,t,a){"use strict";a.d(t,"a",function(){return p});var n=a(78),r=a(81),o=a(6);function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function l(e,t){return!t||"object"!==i(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function u(e,t){return(u=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var p=function(e){function t(e,a,r,i){var s;for(var u in function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(s=l(this,c(t).call(this))).id=i?i.applicationId:null,s.client=(new n.a).getAPIClient(o.a.getEnvironment().label).client,s.keys=new Map,s.tokens=new Map,i)if(i.hasOwnProperty(u)){if("keys"===u){s._setKeys(i[u]);continue}s[u]=i[u]}return s}var a,i,p;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&u(e,t)}(t,r["a"]),a=t,p=[{key:"get",value:function(e){var a=this;return(new n.a).getAPIClient(o.a.getEnvironment()).client.then(function(t){return t.apis.Applications.get_applications__applicationId_({applicationId:e},a._requestMetaData())}).then(function(e){var a=e.obj;return new t(a.name,a.description,a.throttlingTier,a)})}},{key:"all",value:function(){var e=this;return(new n.a).getAPIClient(o.a.getEnvironment()).client.then(function(t){return t.apis.Applications.get_applications({},e._requestMetaData())}).then(function(e){return e.obj})}},{key:"deleteApp",value:function(e){var t=this;return(new n.a).getAPIClient(o.a.getEnvironment()).client.then(function(a){return a.apis.Applications.delete_applications__applicationId_({applicationId:e},t._requestMetaData())}).then(function(e){return e.ok})}}],(i=[{key:"_setKeys",value:function(e){var t=!0,a=!1,n=void 0;try{for(var r,o=e[Symbol.iterator]();!(t=(r=o.next()).done);t=!0){var i=r.value;this.keys.set(i.keyType,i)}}catch(e){a=!0,n=e}finally{try{t||null==o.return||o.return()}finally{if(a)throw n}}}},{key:"_setTokens",value:function(e){var t=!0,a=!1,n=void 0;try{for(var r,o=e[Symbol.iterator]();!(t=(r=o.next()).done);t=!0){var i=r.value;this.tokens.set(i.keyType,i.token)}}catch(e){a=!0,n=e}finally{try{t||null==o.return||o.return()}finally{if(a)throw n}}}},{key:"getKeys",value:function(e){var t=this;return this.client.then(function(e){return e.apis["Application Keys"].get_applications__applicationId__keys({applicationId:t.applicationId})}).then(function(e){var a=e.obj.list;return t._setKeys(a),t._setTokens(a),t.keys})}},{key:"generateToken",value:function(e,t,a){var n=this;return this.getKeys().then(function(){return n.client}).then(function(r){var o=n.keys.get(e),i=n.tokens.get(e),s={consumerSecret:o.consumerSecret,validityPeriod:t,revokeToken:i.accessToken,scopes:a,additionalProperties:""},l={applicationId:n.id,keyType:e,body:s};return r.apis["Application Tokens"].post_applications__applicationId__keys__keyType__generate_token(l)}).then(function(t){var a=t.obj;return n.tokens.set(e,a),a})}},{key:"generateKeys",value:function(e,t,a){var n=this;return this.client.then(function(r){var o={keyType:e,grantTypesToBeSupported:t,callbackUrl:a},i={applicationId:n.id,body:o};return r.apis["Application Keys"].post_applications__applicationId__generate_keys(i)}).then(function(t){return n.keys.set(e,t.obj),n.keys.get(e)})}},{key:"cleanUpKeys",value:function(e){var t=this;return this.client.then(function(a){return a.apis["Application Keys"].post_applications__applicationId__keys__keyType__clean_up({applicationId:t.id,keyType:e})}).then(function(e){return t.keys=new Map,t.tokens=new Map,e.ok})}},{key:"updateKeys",value:function(e,t,a,n,r,o){var i=this;return this.client.then(function(s){var l={consumerKey:r,consumerSecret:o,supportedGrantTypes:a,callbackUrl:n,keyType:t,tokenType:e},c={applicationId:i.id,keyType:t,body:l};return s.apis["Application Keys"].put_applications__applicationId__keys__keyType_(c)}).then(function(e){return i.keys.set(t,e.obj),i})}},{key:"provideKeys",value:function(e,t,a){var n=this;return this.client.then(function(r){var o={consumerKey:t,consumerSecret:a,keyType:e},i={applicationId:n.id,body:o};return r.apis["Application Keys"].post_applications__applicationId__map_keys(i)}).then(function(t){return n.keys.set(e,t.obj),n.keys.get(e)})}}])&&s(a.prototype,i),p&&s(a,p),t}();p.KEY_TYPES={PRODUCTION:"PRODUCTION",SANDBOX:"SANDBOX"}},714:function(e,t,a){"use strict";var n=a(0),r=a.n(n),o=a(2),i=a.n(o),s=a(5);function l(e){var t=e.classes,a=e.height?e.height:30,n=e.marginLeft?e.marginLeft:10,o=e.marginRight?e.marginRight:10;return r.a.createElement(r.a.Fragment,null,r.a.createElement("div",{className:t.divider,style:{height:a,marginLeft:n,marginRight:o}}))}l.propTypes={classes:i.a.object.isRequired},t.a=Object(s.a)(function(e){return{divider:{borderRight:"solid 1px #ccc"}}})(l)},752:function(e,t,a){"use strict";var n=a(0),r=a.n(n),o=a(829),i=a(348),s=a(642),l=a(645),c=a(153),u=a(354),p=a(360),d=a(5),m=a(11),f=a(2),h=a.n(f),g=a(355),y=a(1253),b=a.n(y),v=a(356);function E(){return(E=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}function w(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),a.push.apply(a,n)}return a}function k(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var O=function(e){var t=function(t,a){var n=e.applicationRequest,r=e.updateApplicationRequest,o=function(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?w(a,!0).forEach(function(t){k(e,t,a[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):w(a).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))})}return e}({},n),i=a.target;switch(t){case"name":o.name=i.value;break;case"description":o.description=i.value;break;case"throttlingPolicy":o.throttlingPolicy=i.value;break;case"tokenType":o.tokenType=i.value;break;case"attributes":o.attributes=i.value}r(o)},a=e.classes,n=e.throttlingPolicyList,d=e.applicationRequest,f=e.isNameValid,h=e.allAppAttributes,y=e.handleAttributesChange,O=e.isRequiredAttribute,S=e.getAttributeValue,j=e.intl,A=e.validateName,T=e.isApplicationSharingEnabled,x=e.handleAddChip,C=e.handleDeleteChip;return r.a.createElement("form",{className:a.container,noValidate:!0,autoComplete:"off"},r.a.createElement(s.a,{container:!0,spacing:3,className:a.root},r.a.createElement(s.a,{item:!0,xs:12,md:6},r.a.createElement(i.a,{margin:"normal",className:a.FormControl},r.a.createElement(l.a,{required:!0,value:d.name,label:j.formatMessage({defaultMessage:"Application Name",id:"Shared.AppsAndKeys.ApplicationCreateForm.application.name"}),InputLabelProps:{shrink:!0},helperText:j.formatMessage({defaultMessage:"Enter a name to identify the Application. \n                                    You will be able to pick this application when subscribing to APIs",id:"Shared.AppsAndKeys.ApplicationCreateForm.enter.a.name"}),fullWidth:!0,name:"name",onChange:function(e){return t("name",e)},placeholder:j.formatMessage({defaultMessage:"My Mobile Application",id:"Shared.AppsAndKeys.ApplicationCreateForm.my.mobile.application"}),autoFocus:!0,className:a.inputText,onBlur:function(e){return A(e.target.value)},error:!f})),n&&r.a.createElement(i.a,{margin:"normal",className:a.FormControlOdd},r.a.createElement(u.a,{htmlFor:"quota-helper",className:a.quotaHelp},r.a.createElement(m.a,{defaultMessage:"Per Token Quota",id:"Shared.AppsAndKeys.ApplicationCreateForm.per.token.quota"})),r.a.createElement(p.a,{value:d.throttlingPolicy,onChange:function(e){return t("throttlingPolicy",e)},input:r.a.createElement(c.a,{name:"quota",id:"quota-helper"})},n.map(function(e){return r.a.createElement(o.a,{key:e,value:e},e)})),r.a.createElement(v.a,null,r.a.createElement(m.a,{defaultMessage:"Assign API request quota per access token. \n                                    Allocated quota will be shared among all\n                                    the subscribed APIs of the application.",id:"Shared.AppsAndKeys.ApplicationCreateForm.assign.api.request"}))),r.a.createElement(i.a,{margin:"normal",className:a.FormControlOdd},r.a.createElement(u.a,{htmlFor:"quota-helper",className:a.quotaHelp},r.a.createElement(m.a,{defaultMessage:"Token Type",id:"Shared.AppsAndKeys.ApplicationCreateForm.token.type"})),r.a.createElement(p.a,{value:d.tokenType,onChange:function(e){return t("tokenType",e)},input:r.a.createElement(c.a,{name:"tokenType",id:"quota-helper"})},["JWT","OAUTH"].map(function(e){return r.a.createElement(o.a,{key:e,value:e},e)}))),r.a.createElement(i.a,{margin:"normal",className:a.FormControl},r.a.createElement(l.a,{label:"Application Description",value:d.description,InputLabelProps:{shrink:!0},helperText:j.formatMessage({defaultMessage:"Describe the application",id:"Shared.AppsAndKeys.ApplicationCreateForm.describe.the.application"}),fullWidth:!0,multiline:!0,rowsMax:"4",name:"description",onChange:function(e){return t("description",e)},placeholder:j.formatMessage({defaultMessage:"This application is grouping apis for my mobile application",id:"Shared.AppsAndKeys.ApplicationCreateForm.this.application"}),className:a.inputText})),h&&Object.entries(h).map(function(e){return"false"===e[1].hidden?r.a.createElement(i.a,{margin:"normal",className:a.FormControl,key:e[1].attribute},r.a.createElement(l.a,{required:O(e[1].attribute),label:e[1].attribute,value:S(e[1].attribute),InputLabelProps:{shrink:!0},helperText:e[1].description,fullWidth:!0,name:e[1].attribute,onChange:y(e[1].attribute),placeholder:"Enter "+e[1].attribute,className:a.inputText})):null}),T&&r.a.createElement(i.a,{margin:"normal",className:a.FormControl},r.a.createElement(g.a,{component:"legend"},r.a.createElement(v.a,null,r.a.createElement(m.a,{defaultMessage:"Application Groups",id:"Shared.AppsAndKeys.ApplicationCreateForm.add.groups.label"}))),r.a.createElement(b.a,E({},d,{value:d.groups||[],onAdd:function(e){return x(e,d.groups)},onDelete:function(e,t){return C(e,t,d.groups)}}))))))};O.propTypes={classes:h.a.shape({}).isRequired,applicationRequest:h.a.shape({}).isRequired,intl:h.a.func.isRequired,isNameValid:h.a.bool.isRequired,allAppAttributes:h.a.arrayOf(h.a.array).isRequired,handleAttributesChange:h.a.func.isRequired,getAttributeValue:h.a.func.isRequired,validateName:h.a.func.isRequired,updateApplicationRequest:h.a.func.isRequired,isRequiredAttribute:h.a.bool.isRequired,isApplicationSharingEnabled:h.a.func.isRequired,handleAddChip:h.a.func.isRequired,handleDeleteChip:h.a.func.isRequired,throttlingPolicyList:h.a.arrayOf(h.a.string).isRequired},t.a=Object(m.e)(Object(d.a)(function(e){return{FormControl:{padding:2*e.spacing.unit,width:"100%"},FormControlOdd:{padding:2*e.spacing.unit,backgroundColor:e.palette.background.paper,width:"100%"},quotaHelp:{position:"relative"}}})(O))},785:function(e,t,a){"use strict";var n=a(0),r=a.n(n),o=a(5),i=a(645),s=a(354),l=a(348),c=a(356),u=a(652),p=a(650),d=a(11),m=a(15),f=a.n(m),h=a(2),g=a.n(h),y=a(668);function b(e){return(b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function v(e){return function(e){if(Array.isArray(e)){for(var t=0,a=new Array(e.length);t<e.length;t++)a[t]=e[t];return a}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function E(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),a.push.apply(a,n)}return a}function w(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function k(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function O(e,t){return!t||"object"!==b(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function S(e){return(S=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function j(e,t){return(j=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var A=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),O(this,S(t).apply(this,arguments))}var a,n,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&j(e,t)}(t,r.a.Component),a=t,(n=[{key:"getGrantTypeDisplayList",value:function(e,t){var a={};return e.forEach(function(e){a[e]=t[e],t[e]||(a[e]=e)}),a}},{key:"handleChange",value:function(e,t){var a=this.props,n=a.keyRequest,r=a.updateKeyRequest,o=function(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?E(a,!0).forEach(function(t){w(e,t,a[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):E(a).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))})}return e}({},n),i=t.target,s=v(o.supportedGrantTypes);switch(e){case"callbackUrl":o.callbackUrl=i.value;break;case"grantType":s=i.checked?[].concat(v(s),[i.id]):o.supportedGrantTypes.filter(function(e){return e!==i.id}),o.supportedGrantTypes=s}r(o)}},{key:"isGrantTypeDisabled",value:function(e){var t=this.props,a=t.keyRequest,n=t.isUserOwner,r=a.callbackUrl;return!(n&&(r||"authorization_code"!==e&&"implicit"!==e))}},{key:"render",value:function(){var e=this,t=this.props,a=t.classes,n=t.keyRequest,o=t.notFound,m=t.intl,h=t.isUserOwner,g=n.serverSupportedGrantTypes,b=n.supportedGrantTypes,v=n.callbackUrl;if(o)return r.a.createElement(y.a,null);var E=this.getGrantTypeDisplayList(g,f.a.grantTypes);return r.a.createElement(r.a.Fragment,null,r.a.createElement(l.a,{className:a.FormControl,component:"fieldset"},r.a.createElement(s.a,{shrink:!0,htmlFor:"age-label-placeholder",className:a.quotaHelp},r.a.createElement(d.a,{id:"grant.types",defaultMessage:"Grant Types"})),r.a.createElement("div",{className:a.checkboxWrapper},r.a.createElement("div",{className:a.checkboxWrapperColumn},Object.keys(E).map(function(t){var a=E[t];return r.a.createElement(p.a,{control:r.a.createElement(u.a,{id:t,checked:!(!b||!b.includes(t)||e.isGrantTypeDisabled(t)),onChange:function(t){return e.handleChange("grantType",t)},value:a,disabled:e.isGrantTypeDisabled(t)}),label:m.formatMessage({defaultMessage:a,id:"Shared.AppsAndKeys.KeyConfiguration."+a.replace(/ /g,".")})})}))),r.a.createElement(c.a,null,r.a.createElement(d.a,{defaultMessage:"The application can use the following grant types to generate \n                            Access Tokens. Based on the application requirement,you can enable or disable \n                            grant types for this application.",id:"Shared.AppsAndKeys.KeyConfiguration.the.application.can"}))),r.a.createElement(l.a,{className:a.FormControlOdd},r.a.createElement(i.a,{id:"callbackURL",fullWidth:!0,onChange:function(t){return e.handleChange("callbackUrl",t)},label:"Callback URL",placeholder:"http://url-to-webapp",className:a.textField,margin:"normal",value:v,disabled:!h}),r.a.createElement(c.a,null,r.a.createElement(d.a,{defaultMessage:"Callback URL is a redirection URI in the client\n                                application which is used by the authorization server to send the\n                                client's user-agent (usually web browser) back after granting access.",id:"Shared.AppsAndKeys.KeyConfiguration.callback.url"}))))}}])&&k(a.prototype,n),o&&k(a,o),t}();A.propTypes={classes:g.a.instanceOf(Object).isRequired,keyRequest:g.a.shape({callbackUrl:g.a.string,serverSupportedGrantTypes:g.a.array,supportedGrantTypes:g.a.array}).isRequired,isUserOwner:g.a.bool.isRequired,notFound:g.a.bool.isRequired,updateKeyRequest:g.a.func.isRequired,intl:g.a.shape({formatMessage:g.a.func}).isRequired},t.a=Object(d.e)(Object(o.a)(function(e){return{FormControl:{padding:2*e.spacing.unit,width:"100%"},FormControlOdd:{padding:2*e.spacing.unit,width:"100%"},button:{marginLeft:1*e.spacing.unit},quotaHelp:{position:"relative"},checkboxWrapper:{display:"flex"},checkboxWrapperColumn:{display:"flex",flexDirection:"row"},group:{flexDirection:"row"}}})(A))},786:function(e,t,a){"use strict";var n=a(0),r=a.n(n),o=a(2),i=a.n(o),s=a(5),l=a(751),c=a.n(l),u=a(850),p=a(877),d=a.n(p),m=a(209),f=a(645),h=a(356),g=a(11),y=a(875);function b(e){return(b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function v(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function E(e){return(E=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function w(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function k(e,t){return(k=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function O(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var S=function(e){function t(){var e,a,n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=new Array(o),s=0;s<o;s++)i[s]=arguments[s];return n=this,r=(e=E(t)).call.apply(e,[this].concat(i)),a=!r||"object"!==b(r)&&"function"!=typeof r?w(n):r,O(w(a),"state",{tokenCopied:!1}),O(w(a),"onCopy",function(e){return function(){a.setState(O({},e,!0));var t=w(a),n=e;setTimeout(function(){t.setState(O({},n,!1))},4e3)}}),a}var a,n,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&k(e,t)}(t,r.a.Component),a=t,(n=[{key:"getTokeScopesString",value:function(e){return e?e.join(", "):""}},{key:"render",value:function(){var e=this.props,t=e.classes,a=e.token,n=this.state.tokenCopied;return r.a.createElement("div",{className:t.root},r.a.createElement(y.a,{type:"warn"},r.a.createElement(m.a,{variant:"h5",component:"h3"},a.isOauth&&r.a.createElement(g.a,{id:"Shared.AppsAndKeys.ViewToken.please.copy",defaultMessage:"Please Copy the Access Token"}),!a.isOauth&&r.a.createElement(g.a,{id:"Shared.AppsAndKeys.ViewToken.please.copy.apikey",defaultMessage:"Please Copy the Api Key"})),r.a.createElement(m.a,{component:"p"},r.a.createElement(g.a,{id:"Shared.AppsAndKeys.ViewToken.please.copy.help",defaultMessage:"Please copy this generated token value as it will be displayed only for \n                            the current browser session. ( After a page refresh, the token is not visible in the UI )"}))),r.a.createElement("div",{className:t.epWrapper},r.a.createElement(m.a,{className:t.prodLabel},a.isOauth&&r.a.createElement(g.a,{id:"Shared.AppsAndKeys.ViewToken.access.token",defaultMessage:"Access Token"}),!a.isOauth&&r.a.createElement(g.a,{id:"Shared.AppsAndKeys.ViewToken.apikey",defaultMessage:"Api Key"})),r.a.createElement(f.a,{defaultValue:a.accessToken,id:"bootstrap-input",multiline:!0,rows:4,InputProps:{disableUnderline:!0,classes:{root:t.bootstrapRoot,input:t.bootstrapInput}},InputLabelProps:{shrink:!0,className:t.bootstrapFormLabel}}),r.a.createElement(u.a,{title:n?"Copied":"Copy to clipboard",placement:"right"},r.a.createElement(c.a,{text:a.accessToken,onCopy:this.onCopy("tokenCopied")},r.a.createElement(d.a,{color:"secondary"},"file_copy")))),r.a.createElement(h.a,null,r.a.createElement(g.a,{id:"Shared.AppsAndKeys.ViewToken.info.first",defaultMessage:"Above token has a validity period of "}),a.validityTime,r.a.createElement(g.a,{id:"Shared.AppsAndKeys.ViewToken.info.second",defaultMessage:" seconds"}),a.isOauth&&r.a.createElement(g.a,{id:"Shared.AppsAndKeys.ViewToken.info.second",defaultMessage:" and the token has ("}),this.getTokeScopesString(a.tokenScopes),a.isOauth&&r.a.createElement(g.a,{id:"Shared.AppsAndKeys.ViewToken.info.third",defaultMessage:") scopes"}),"."))}}])&&v(a.prototype,n),o&&v(a,o),t}();S.propTypes={classes:i.a.shape({}).isRequired,token:i.a.shape({accessToken:i.a.string.isRequired,validityTime:i.a.number.isRequired,tokenScopes:i.a.array.isRequired}).isRequired},t.a=Object(s.a)(function(e){return{bootstrapRoot:{padding:0,"label + &":{marginTop:3*e.spacing.unit}},bootstrapInput:{borderRadius:4,backgroundColor:e.palette.common.white,border:"1px solid #ced4da",padding:"5px 12px",width:350,height:100,transition:e.transitions.create(["border-color","box-shadow"]),fontFamily:["-apple-system","BlinkMacSystemFont",'"Segoe UI"',"Roboto",'"Helvetica Neue"',"Arial","sans-serif",'"Apple Color Emoji"','"Segoe UI Emoji"','"Segoe UI Symbol"'].join(","),"&:focus":{borderColor:"#80bdff",boxShadow:"0 0 0 0.2rem rgba(0,123,255,.25)"}},epWrapper:{display:"flex",marginTop:20},prodLabel:{lineHeight:"30px",marginRight:10,width:100,"text-align-last":"center"},contentWrapper:{width:e.custom.contentAreaWidth-e.custom.leftMenuWidth},root:{marginTop:20}}})(S)},874:function(e,t,a){"use strict";var n=a(0),r=a.n(n),o=a(875),i=a(209),s=a(646),l=a(688);t.a=function(e){var t=e.classes,a=e.handleClick,n=e.heading,c=e.caption,u=e.buttonText;return r.a.createElement("div",{className:t.appContent},r.a.createElement(o.a,{type:"info",className:t.dialogContainer},r.a.createElement(i.a,{variant:"h5",component:"h3"},n),r.a.createElement(i.a,{component:"p"},c),r.a.createElement(l.a,{resourcePath:l.c.APPLICATIONS,resourceMethod:l.b.POST},r.a.createElement(s.a,{variant:"contained",color:"primary",className:t.button,onClick:a},u))))}},875:function(e,t,a){"use strict";var n=a(0),r=a.n(n),o=a(2),i=a.n(o),s=a(5),l=a(287),c=a(648),u=a(714);function p(e){return(p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function d(){return(d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}function m(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function f(e){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function h(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function g(e,t){return(g=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function y(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var b=function(e){function t(){var e,a,n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=new Array(o),s=0;s<o;s++)i[s]=arguments[s];return n=this,r=(e=f(t)).call.apply(e,[this].concat(i)),a=!r||"object"!==p(r)&&"function"!=typeof r?h(n):r,y(h(a),"state",{value:0}),y(h(a),"handleExpandClick",function(){a.setState(function(e){return{expanded:!e.expanded}})}),a}var a,n,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&g(e,t)}(t,r.a.Component),a=t,(n=[{key:"render",value:function(){var e=this.props,t=e.classes,a=e.type||"info";return r.a.createElement(l.a,d({className:t.root,elevation:1},this.props),"info"===a&&r.a.createElement(c.a,{className:t.iconItem},"info"),"warn"===a&&r.a.createElement(c.a,{className:t.iconItem},"warning"),r.a.createElement(u.a,{height:100}),r.a.createElement("div",{className:t.content},this.props.children))}}])&&m(a.prototype,n),o&&m(a,o),t}();b.propTypes={classes:i.a.instanceOf(Object).isRequired,type:i.a.instanceOf(Object).isRequired},t.a=Object(s.a)(function(e){return{root:{display:"flex",height:100,alignItems:"center",paddingLeft:2*e.spacing.unit,borderRadius:e.shape.borderRadius,border:"solid 1px "+e.palette.secondary.main},iconItem:{paddingRight:2*e.spacing.unit,fontSize:60},button:{marginTop:e.spacing.unit,marginBottom:e.spacing.unit},content:{paddingTop:e.spacing.unit,paddingBottom:e.spacing.unit}}})(b)},876:function(e,t,a){"use strict";var n=a(0),r=a.n(n),o=a(11),i=a(2),s=a.n(i),l=a(5),c=a(645),u=a(153),p=a(354),d=a(348),m=a(209),f=a(1208),h=a(829),g=a(360);function y(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),a.push.apply(a,n)}return a}function b(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var v={PaperProps:{style:{maxHeight:224,width:250}}},E=function(e){var t=function(t,a){var n=e.accessTokenRequest,r=e.updateAccessTokenRequest,o=function(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?y(a,!0).forEach(function(t){b(e,t,a[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):y(a).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))})}return e}({},n),i=a.target;switch(t){case"timeout":o.timeout=i.value;break;case"scopesSelected":o.scopesSelected=i.value;break;case"keyType":o.keyType=i.value}r(o)},a=e.classes,n=e.intl,i=e.accessTokenRequest,s=e.subscriptionScopes;return r.a.createElement(r.a.Fragment,null,r.a.createElement(d.a,{margin:"normal",className:a.FormControl},r.a.createElement(c.a,{required:!0,label:n.formatMessage({defaultMessage:"Access token validity period",id:"Shared.AppsAndKeys.Tokens.access.token"}),InputLabelProps:{shrink:!0},helperText:n.formatMessage({defaultMessage:"You can set an expiration period to determine the validity period of the token after generation. Set this to a negative value to ensure that the token never expires.",id:"Shared.AppsAndKeys.Tokens.you.can.set"}),fullWidth:!0,name:"timeout",onChange:function(e){return t("timeout",e)},placeholder:n.formatMessage({defaultMessage:"Enter time in milliseconds",id:"Shared.AppsAndKeys.Tokens.enter.time"}),value:i.timeout,autoFocus:!0,className:a.inputText})),r.a.createElement(d.a,{margin:"normal",className:a.FormControlOdd,disabled:0===s.length},r.a.createElement(p.a,{htmlFor:"quota-helper",className:a.quotaHelp},r.a.createElement(o.a,{id:"Shared.AppsAndKeys.Tokens.when.you.generate.scopes",defaultMessage:"Scopes"})),r.a.createElement(g.a,{name:"scopesSelected",multiple:!0,value:i.scopesSelected,onChange:function(e){return t("scopesSelected",e)},input:r.a.createElement(u.a,{id:"select-multiple-chip"}),renderValue:function(e){return r.a.createElement("div",{className:a.chips},e.map(function(e){return r.a.createElement(f.a,{key:e,label:e,className:a.chip})}))},MenuProps:v},s.map(function(e){return r.a.createElement(h.a,{key:e,value:e},e)})),r.a.createElement(m.a,{variant:"caption"},r.a.createElement(o.a,{id:"Shared.AppsAndKeys.Tokens.when.you.generate",defaultMessage:"When you generate access tokens to APIs protected by scope/s, you can select the scope/s and then generate the token for it. Scopes enable fine-grained access control to API resources based on user roles. You define scopes to an API resource. When a user invokes the API, his/her OAuth 2 bearer token cannot grant access to any API resource beyond its associated scopes."}))))};E.contextTypes={intl:s.a.shape({}).isRequired},t.a=Object(o.e)(Object(l.a)(function(e){return{FormControl:{padding:2*e.spacing.unit,width:"100%"},FormControlOdd:{padding:2*e.spacing.unit,backgroundColor:e.palette.background.paper,width:"100%"},quotaHelp:{position:"relative"},chips:{display:"flex",flexWrap:"wrap"},chip:{margin:e.spacing.unit/4}}})(E))},878:function(e,t,a){"use strict";var n=a(0),r=a.n(n),o=a(5),i=a(11);t.a=Object(i.e)(Object(o.a)(function(e){return{root:{padding:3*e.spacing.unit}}})(function(e){var t=e.classes,a=e.keyState,n=e.states,o=e.intl,i=o.formatMessage({defaultMessage:"A request to register this application has been sent.",id:"Shared.AppsAndKeys.WaitingForApproval.msg.ok"});return a===n.REJECTED&&(i=o.formatMessage({defaultMessage:"This application has been rejected from generating keys",id:"Shared.AppsAndKeys.WaitingForApproval.msg.reject"})),r.a.createElement("div",{className:t.root},i)}))},879:function(e,t,a){"use strict";a.d(t,"a",function(){return p});var n=a(78),r=a(81),o=a(6);function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function l(e,t){return!t||"object"!==i(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function u(e,t){return(u=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var p=function(e){function t(){var e;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(e=l(this,c(t).call(this))).client=(new n.a).getAPIClient(o.a.getEnvironment().label).client,e}var a,i,p;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&u(e,t)}(t,r["a"]),a=t,(i=[{key:"getSubscriptions",value:function(e,t){return this.client.then(function(a){return a.apis.Subscriptions.get_subscriptions({apiId:e,applicationId:t})})}},{key:"deleteSubscription",value:function(e){return this.client.then(function(t){return t.apis.Subscriptions.delete_subscriptions__subscriptionId_({subscriptionId:e})})}}])&&s(a.prototype,i),p&&s(a,p),t}()}},0,[0,4,8,1,9,3,2,6]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,